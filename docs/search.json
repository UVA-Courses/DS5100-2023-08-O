[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 5100: Programming for Data Science | Fall 2023 | Online",
    "section": "",
    "text": "Welcome\nWelcome to website for DS 5100 Programming for Data Science, Fall 2023.\n\n\n\n\n\n\nNote\n\n\n\nThis site contains all the content needed to complete the course. All graded coursework is hosted on the Canvas website.\n\n\nIn this course, you will develop skills in Python and R Programming, as well as how to use the command line and GitHub.\nThe objective of this course is to introduce essential programming concepts, structures, and techniques.\nYou will gain confidence in not only reading code, but learning what it means to write good quality code.\nAdditionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization."
  },
  {
    "objectID": "modules/m01/m01-intro.html#topics",
    "href": "modules/m01/m01-intro.html#topics",
    "title": "M01 Getting Started",
    "section": "Topics",
    "text": "Topics\n\nIntroduce the course\nAccess Rivanna\nExplore the Unix command line\nExplore use of Git and GitHub"
  },
  {
    "objectID": "topics/rivanna.html#introduction",
    "href": "topics/rivanna.html#introduction",
    "title": "About Rivanna",
    "section": "Introduction",
    "text": "Introduction\nA useful infrastructural resource for this course is Rivanna, UVA’s high-performance computing (HPC) cluster. Each student has an account on Rivanna and access to resources there based on participation in this course. We will use Rivanna in our class for both Python and R. \nThis page describes some of the tools available for your use in this course. For information about Rivanna, see this introduction. Resources for getting help, including a knowledge base and ticket system, are found at the Support Option’s Page on UVA’s Research Computing website.\nYou may need to use VPN to access Rivanna from an off-grounds location. To install VPN on your computer, go to the ITS VPN page for instructions. Note that you should connect to “UVA Anywhere,” not to any of the higher security options. Course Allocation\nThis course has been allocated compute and space resources on Rivanna. The names of the resources are given below. The allocation ID needs to be entered to access certain tools. The storage path is accessible to you on the remote server.\n\nAllocation ID: msds_ds5100\nStorage path: /project/MSDS_DS5100  (Don’t use unless directed to.)"
  },
  {
    "objectID": "topics/rivanna.html#tools",
    "href": "topics/rivanna.html#tools",
    "title": "About Rivanna",
    "section": "Tools ",
    "text": "Tools \nUVA Research Computing provides you with a suite of tools to access Rivanna. These tools are accessible through the menu on the UVA OpenOnDemand Dashboard page. Below are some brief descriptions of the tools.\nFile Explorer. A web-based GUI to access the file system of the remote server. Can be used to create, move, and delete directories and files, and to edit the contents of files (see Editor). You can also upload and download files through this interface. The File Explorer is useful to view your remote content and manage files and directories without having to use the command line. Note that not all operations can be performed through this interface.\nFind under “Files” in the menu. \nEditor. A web-based text editor launched from the File Explorer to view and edit text files on the remote server.  Although not as sophisticated as VS Code (below), this is very useful for editing data and code files without having to use a command line editor. One advantage over VS Code is that it does not need to be launched – which means it does not time out like the Interactive Apps listed below.\nThe Editor is launched from the File Explorer.\nSSH Shell Access (Terminal). Access to the command line of the remote server.  Use this to open a terminal window to perform Linux commands directly.  Note that It is necessary to use a terminal to install and run certain programs on the remote server.\nFind under “Clusters” in the menu. \nYou can also access the remote command line via SSH on your local computer. Just enter the following on the command line of either a PC or Mac:\nssh -Y <userid>@hpc.rivanna.virginia.edu\nReplace <userid> with your UVA Net ID, e.g. abc2x. \nBe suer to be running VPN if you are accessing Rivanna from an off-grounds location."
  },
  {
    "objectID": "topics/rivanna.html#interactive-apps",
    "href": "topics/rivanna.html#interactive-apps",
    "title": "About Rivanna",
    "section": "Interactive Apps",
    "text": "Interactive Apps\nThese tools must be launched by specifying a set of parameters, including the allocation you are using. They are also timed and will close when time is up. Be sure to give yourself enough time when launching these, and to be aware of how much time you have when working.\nNote also that you should allocate the fewest resources necessary to do the work you plan to do. This saves resources on the remote host, but also allows your app to launch more quickly. If you ask for an excessive amount of resources, you may wait a long time (e.g. hours) to have your app launched.\nDesktop. Access to a GUI desktop to the remote server. This provides a access to various applications on the server, including a web browser, a file explorer, and terminal windows.  Using this is not necessary if you can get by with the tools listed above.\nFind under “Interactive Apps > Desktop” in the menu.\nVS Code. Access to Visual Studio Code on the remote server. This is a fully functional instance of the IDE.\nFind under “Interactive Apps > Code Server” in the menu.\nJupyter. Access to Jupyter Lab on the remote server. Find under “Interactive Apps > Jupyter Lab” in the menu.\nRStudio. Access to Jupyter Lab on the remote server.\nFind under “Interactive Apps > RStudio Server” in the menu."
  },
  {
    "objectID": "topics/rivanna.html#for-more-information",
    "href": "topics/rivanna.html#for-more-information",
    "title": "About Rivanna",
    "section": "For More Information",
    "text": "For More Information\nUVA’s Research Computing Learning Portal provides resources for learning how to use Rivanna. Here are two slide decks that you may find useful:\n\nIntroduction to Rivanna\nUsing Rivanna from the Command Line\n\n\n\n\n\n\n\nNote\n\n\n\nSee video on Canvas."
  },
  {
    "objectID": "topics/unix.html#introduction",
    "href": "topics/unix.html#introduction",
    "title": "Using Unix",
    "section": "Introduction",
    "text": "Introduction\nThe Unix family of operating systems provide users with a command line interface (CLI) to execute commands and get things done. They also, typically provide GUIs but we won’t go into those here.\nThe Unix family includes all varieties of Linux and the Mac OS (which is based on FreeBSD).\nThe command line that you actually interact with – the set of commands available to you – is called a shell, and there are several shells that you can run on your system. The most typical shell in use today is called bash which stands for Bourne Again Shell, since it is an improved version of bsh (The Bourne Shell). New versions of MacOS use the Z shell (zsh). The commands in these two shells are mostly similar, but there are subtle differences.\nWindows has shells too for its command line interface. The default shell is DOS, but is also has PowerShell  as an advanced (and very capable) option.\nFor more information, check out these resources:\n\nUVA Research Computing’s Unix tutorial.\nNewham, 2005, Learning the bash Shell, O’Reilly Media.\nJeroen Janssens, 2021, Data Science From the Command Line, O’Reilly Media.\nNeal Stephenson, 1999, In the Beginning Was The Command Line. (PDF version.)"
  },
  {
    "objectID": "topics/unix.html#basic-commands",
    "href": "topics/unix.html#basic-commands",
    "title": "Using Unix",
    "section": "Basic Commands",
    "text": "Basic Commands\nIn this course, you don’t need to know very many Unix shell commands, but you should be comfortable working from the command line to perform basic tasks. This is because some things can only be performed from the command line, such as installing some essential software. Here is a list of basic commands.\nNavigating filesystems and managing directories:\n\ncd – change directory\npwd – show the current directory\nln – make links and symlinks to files and directories\nmkdir – make new directory\nrmdir – remove directories in Unix\n\nNavigating filesystem and managing files and access permissions:\n\nls – list files and directories\ncp – copy files (work in progress)\nrm – remove files and directories (work in progress)\nmv – rename or move files and directories to another location\nchmod – change file/directory access permissions\nchown – change file/directory ownership"
  },
  {
    "objectID": "topics/unix.html#text-file-commands",
    "href": "topics/unix.html#text-file-commands",
    "title": "Using Unix",
    "section": "Text file commands",
    "text": "Text file commands\nMost of important configuration in Unix is in plain text files, these commands will let you quickly inspect files or view logs:\n\ncat – concatenate files and show contents to the standard output\nmore – basic pagination when viewing text files or parsing Unix commands output\nless – an improved pagination tool for viewing text files (better than more command)\nhead – show the first 10 lines of text file (you can specify any number of lines)\ntail – show the last 10 lines of text file (any number can be specified)\ngrep – search for patterns in text files"
  },
  {
    "objectID": "topics/unix.html#miscellaneous",
    "href": "topics/unix.html#miscellaneous",
    "title": "Using Unix",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nclear – clear screen\nhistory – show history of previous commands"
  },
  {
    "objectID": "topics/unix.html#command-line-cool",
    "href": "topics/unix.html#command-line-cool",
    "title": "Using Unix",
    "section": "Command Line Cool",
    "text": "Command Line Cool\nAlthough we will not be using the command line to this degree, you should know that it is a powerful environment for doing data science work. The book Data Science from the Command Line makes the case for using the command line to perform many tasks that we often perform with more resource intensive (i.e. bloated) tools such as Python and R.  At some point in your early DS career, you may want to look at this. The book itself is also a great introduction to data science!\n\nOne last thing – for fun you may want to read Neal Stephenson’s “In the Beginning Was The Command Line”, a kind of cyberpunk history of the topic. Stephenson, by the way, is the author who coined the term “metaverse” in the novel Snowcrash.\n\n\n\n\n\n\nNote\n\n\n\nSee video on Canvas."
  },
  {
    "objectID": "topics/setting-up-ssh.html#overview",
    "href": "topics/setting-up-ssh.html#overview",
    "title": "SSH for GitHub",
    "section": "Overview",
    "text": "Overview\n\nThis method will allow you to interact with your repos hosted on GitHub without having to enter your login credentials each time.\nYou will create an SSH key on your local machine. By “local machine,” we mean the machine where you will be working and pulling to, e.g your laptop or Rivanna. In other words, it’s local relative to GitHub.\nSSH keys have a public and private component. These are hash strings that are stored in files. Both will be generated on your machine.\nYou will copy and paste the generate public key to your GitHub account.\nGoing forward, you will clone from your account using the SSH protocol."
  },
  {
    "objectID": "topics/setting-up-ssh.html#steps",
    "href": "topics/setting-up-ssh.html#steps",
    "title": "SSH for GitHub",
    "section": "Steps",
    "text": "Steps\n\nPart A\nOn your local machine\n\nGet to the command line on the computer from which you will be pushing and pulling to your GitHub repo.\n\n\nIf you are using Rivanna, you can access this through the Dashboard or connect via SSH.\nIf you are using a Mac, open Terminal.\nIf you are using Windows and you have admin rights, first install git-bash. Otherwise follow this tutorial from Microsoft.\n\n\nMove into your root directory. If on a Unix-based system (Rivanna or a Mac), you can do this by entering cd by itself.\nGenerate the key:\n\n\nEnter: ssh-keygen -t ed25519 -C \"your_email_id@example.com\", using your email address.\nThe value ed25519 is the key type and must not be changed.\nBe sure to use the email address associated with your GitHub account in the above command.\n\n\nAt the prompt, type in a secure passphrase.\n\n\nYou don’t have to do this, but it is advised.\nCreate a memorable sentence.\nA good passphrase should have at least 15, preferably 20 characters and be difficult to guess. It should contain upper case letters, lower case letters, digits, and preferably at least one punctuation character.\n\n\nAdd the key to ssh-agent:\n\n\nEnter: eval \"$(ssh-agent -s)\"\nEnter: ssh-add ~/.ssh/id_ed25519\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are on a Mac and the ssh-add command gives an error saying that the file is not found or that you do not have permission, try running the following command then re-running ssh-add:\nls -al\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you’re using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Follow the instructions here (at step 2).\n\n\n\n\nPart B\nOn your GitHub account\n\nGet the public key that was just generated.\n\n\nEnter: more ~/.ssh/id_ed25519.pub\nCopy the result to your clipboard (e.g. by blocking off the line and entering Ctrl-C).\nThe key should begin ssh-ed25519 and end with the email address you used in generating the key. In between it will have a long string of alphanumeric characters.\n\n\nOn GitHub, go to your account settings and select “SSH and GPG Keys” from the side menu.\n\n\nA link to your account settings can be found in the drop-down list produced by clicking on your user icon in the upper right of the website.\n\n\nUnder “SSH keys,” press the “New SSH Key” button.\n\n\nAdd a brief title describing the context of the key, i.e. the local machine where it was generated, e.g. Rivanna.\nChoose “Authentication Key” as the Key type.\nPaste the key into the Key text area.\nSubmit the form by pressing “Add SSH key.”\n\nYou are now good to go. Whenever you clone a site from your GitHub account, choose the SSH link."
  },
  {
    "objectID": "topics/setting-up-ssh.html#information-sources",
    "href": "topics/setting-up-ssh.html#information-sources",
    "title": "SSH for GitHub",
    "section": "Information Sources",
    "text": "Information Sources\nThe GitHub site has lots of excellent documentation.\nHere are some pages you may find useful:\n\nAbout SSH\nGenerate the key\nAbout pass phrases\nAdding the key to GitHub\nUpdating repos with SSH"
  },
  {
    "objectID": "topics/git-and-github.html#introduction",
    "href": "topics/git-and-github.html#introduction",
    "title": "Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:\n\nGit is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.\nGit does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories."
  },
  {
    "objectID": "topics/git-and-github.html#using-git-and-github-together",
    "href": "topics/git-and-github.html#using-git-and-github-together",
    "title": "Git and GitHub",
    "section": "Using Git and GitHub Together",
    "text": "Using Git and GitHub Together\n\n\n\nXKCD #1597\n\n\nSource\nA basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone <repo>\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add <filename>Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs. \n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\n\nHere is a visualization of the process:\n\n\n\nDiagram of common git workflow\n\n\nIn this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.\nNote also that the here “Remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo."
  },
  {
    "objectID": "topics/git-and-github.html#to-learn-more",
    "href": "topics/git-and-github.html#to-learn-more",
    "title": "Git and GitHub",
    "section": "To Learn More",
    "text": "To Learn More\nThe Git website has excellent learning materials. Use the following links to access vides and\n\nVideos\nBook\n\n\n\n\n\n\n\nNote\n\n\n\nSee video on Canvas."
  },
  {
    "objectID": "modules/m01/m01-using-rivanna.html",
    "href": "modules/m01/m01-using-rivanna.html",
    "title": "Activity: Using Rivanna",
    "section": "",
    "text": "Goal: Create your course directory structure on Rivanna.\n\n\n\nAfter reading the previous documents on Rivanna and Unix, try this activity to get acquainted with the Rivanna high-performance computing cluster at UVA.\nTo get started, go to OpenOnDemand Dashboard page and from the main menu select Clusters → Rivanna Shell Access.\nThis should open a terminal to what is called the “shell” of the operating system.\n\n\n\nScreenshot of Rivanna shell\n\n\nRivanna uses Linux, a member of the Unix family of operating systems. Many cloud resources use Linux.\nUnderstanding how to do work from the command line on such systems is an essential skill of the data scientist.\nIf you have never used the command line, have no fear! Just enter the commands exactly as shown and ask questions in the Teams chat if you are stuck.\nNow, create a directory for your course and this course by entering the following commands:\ncd Documents \nmdkir MSDS \ncd MSDS \nmkdir DS5100 \ncd DS5100\nIf the Documents directory does not exist, create that first using the mkdir command.\n\ncd means “change directory,” and is a basic Unix command.\nmkdir means “make directory.” It’s also a basic Unix command.\n\nNote that you can use the tab key to complete path and command names as you type.\nYou don’t have to, but it would be a good idea to create subdirectories for any of your courses that use Rivanna.\nMore information about Unix shell commands can be found the document Unix Shell Commands."
  },
  {
    "objectID": "modules/m01/m01-activity-github.html#going-forward",
    "href": "modules/m01/m01-activity-github.html#going-forward",
    "title": "Activity: Using Git and GitHub",
    "section": "Going Forward",
    "text": "Going Forward\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will get course materials. This should be updated each day.\nYour Assessments Repo, which is where you will be your finished work as assigned."
  },
  {
    "objectID": "modules/m02/m02-intro.html#topics",
    "href": "modules/m02/m02-intro.html#topics",
    "title": "M02 Introducing Python",
    "section": "Topics",
    "text": "Topics\n\nRunning Python code\nPython’s basic data types\nPython’s primary operators associated with each data type\nPython’s built-in data structures"
  },
  {
    "objectID": "modules/m02/m02-intro.html#readings",
    "href": "modules/m02/m02-intro.html#readings",
    "title": "M02 Introducing Python",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nKatz and Katz 2019, Section 1, Preparing the Workspace\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 2\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 3\n\n\nLutz, Learning Python, Part II: Types and Operations, Chapters 4–9\n\n\n\n\nOptional\n\n\nKatz and Katz 2019, Section 1, First Steps in Coding - Variables and Data Types\n\n\nBuilt-in Types (Official)\n\n\nPython Data Types (GFG)\n\n\nPython Operators (W3S)\n\n\nImmutable vs Mutable Data Types in Python (Medium)"
  },
  {
    "objectID": "topics/on-data.html#code-should-be-simple",
    "href": "topics/on-data.html#code-should-be-simple",
    "title": "Data and Code",
    "section": "Code should be simple",
    "text": "Code should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.\n\nA contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured."
  },
  {
    "objectID": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "href": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "title": "Data and Code",
    "section": "Simplicity of code follows from the structure of data",
    "text": "Simplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible."
  },
  {
    "objectID": "topics/on-data.html#supporting-references",
    "href": "topics/on-data.html#supporting-references",
    "title": "Data and Code",
    "section": "Supporting References",
    "text": "Supporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious.\n\n\n\n\n\n\n\nNote\n\n\n\nSee video on Canvas."
  },
  {
    "objectID": "topics/python-object-types.html",
    "href": "topics/python-object-types.html",
    "title": "Python Object Types",
    "section": "",
    "text": "Python is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\nData types and data structures are kinds of objects.\n\n\n\n\n\n\n\nNote\n\n\n\nSee video on Canvas."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#which-python",
    "href": "modules/m02/m02-activity-hello-world.html#which-python",
    "title": "Activity: Hello, World!",
    "section": "Which Python?",
    "text": "Which Python?\nOnce you are in Rivanna, you will want to know which version of Python you have installed as the default.\nTo find out, from the command line type:\nwhich python\nThis will show you the “path” to a python interpreter. For example:\n\nIf you do not see “anaconda” in that path, then run the following command:\nmodule load anaconda\nThis will update your environment to use Anaconda’s distribution of Python.\nAfter running the command, enter the command to see which pythion is being used to confirm that it is the one from Ancaconda."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#aside",
    "href": "modules/m02/m02-activity-hello-world.html#aside",
    "title": "Activity: Hello, World!",
    "section": "Aside",
    "text": "Aside\nNote that you can use module to run other programs on your Rivanna account.\nType module list to see which programs have already been installed on your account.\nType module spider to see all the programs you can install."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "href": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "title": "Activity: Hello, World!",
    "section": "The Python Interactive Shell",
    "text": "The Python Interactive Shell\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the >>> prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)"
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#try-this",
    "href": "modules/m02/m02-activity-hello-world.html#try-this",
    "title": "Activity: Hello, World!",
    "section": "Try this",
    "text": "Try this\nNow, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#running-python-files",
    "href": "modules/m02/m02-activity-hello-world.html#running-python-files",
    "title": "Activity: Hello, World!",
    "section": "Running Python Files",
    "text": "Running Python Files\nNow create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python.\n\n\n\n\n\n\nNote\n\n\n\nSee video in Canvas."
  },
  {
    "objectID": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "href": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "title": "Activity: Jupyter Lab",
    "section": "",
    "text": "Now that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session. Your form should have the following values:\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that you may increase the number of hours, cores, and megabytes of RAM, but asking for too much will increase the time it takes to start your session. So select just the resources needed and enter our course allocation msds_ds5100 if this value is different than in the image above).\n\n\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class — one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "",
    "text": "Python Data Types\nWe declare a number of variables with different value types.\nBy ‘type’ we mean object type.\nData types and data structures are both types of object.\nData types are created by the way they are written or as keywords …\nHere is a series of literal values (called literals):\nIntegers\nFloats (decimals)\nStrings\nType of quote does not matter, but they must be straight quotes, not “smart quotes” that some word processors use.\nNote that there is no explicit character type as in Java and other languages.\nBoolean\nNothing\nIt evaluates to nothing!\nComplex\nFor the physicists and signal processors.\nYou can always find out what kind of type you are working with by calling the type() function.\nData are assigned to variables using the assignment operator =.\nThe variable is always on the left, the value assigned to it on the right.\nThis is not the same as mathemtical equality.\nVariables are assigned types dynamically.\nThis is in contrast to static typing, where you have define variables by asserting what kind of data values they can hold.\nPython figures out what type of data is being set to the variable and implicitly stores that info.\nNote that type() returns the type of the value that a variable holds, not the type “variable”.\nYou can’t delete values!\nThis function returns the identity of an object.\nThe identity is a number that is guaranteed to be unique and constant for this object during its lifetime (during the program session).\nYou can think of it as the address of the object in memory.\nIt is possible to convert between types (when it makes sense to do so).\nSometimes conversions are “lossy” – you lose information in the process\nIf variables are nouns, and values meanings, then operators are verbs.\nIn effect, they are elementary functions that are expressed in sequential syntax.\na + b could have been expressed as add(a, b).\nBasically, each data type is associated with a set of operators that allow you to manipulate the data in way that makes sense for its type. Numeric data types are subject to mathematical operations, booleans to logical ones, and so forth.\nThere are also operations appropriate to structures. For example, list-like things have membership.\nThe relationship between types and operators is a microcosm of the relationship betweed data structures and algorithms. Data structures imply algorithms and algorithms assume data structures.\nThe w3schools site has a good summary.\nHere are some you may not have seen.\nPython offers a short-cut for most operators. When updating a variable with an operation to that variable, such as:\nYou can do this:\nPython supports many operators this way. Here are some:\nVariables, literal values, and operators are the building blocks of ebxpressions.\nFor example, the following combines three operators and four variables:\nPython employs operator precedence when evaluating expressions:\nYou can use parentheses to group them to force the order of operations you want:\nVariables and literal values can be combined:\nExpresssion can be very complex.\nExpressions evaluate to a value, just as single variables do.\nTherefore, they can be put anywhere a value is accepted."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "int()",
    "text": "int()\n\nint?\n\nInit signature: int(self, /, *args, **kwargs)\nDocstring:     \nint([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4\nType:           type\nSubclasses:     bool, IntEnum, IntFlag, _NamedIntConstant\n\n\nFloat to Int\n\nval = 3.8\nprint(val, type(val))\n\n3.8 <class 'float'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\n3 <class 'int'>\n\n\nString to Float\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = float(val)\nprint(val_int, type(val_int))\n\n3.8 <class 'float'>\n\n\nConverting string decimal to integer will fail:\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\nValueError: invalid literal for int() with base 10: '3.8'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "ord()",
    "text": "ord()\nConverting a character to it’s code point\n\nord?\n\nSignature: ord(c, /)\nDocstring: Return the Unicode code point for a one-character string.\nType:      builtin_function_or_method\n\n\n\nord('a'), ord('A')\n\n(97, 65)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\nfloor division //\n\n5 // 2\n\n2\n\n\n\n-5 // 2\n\n-3\n\n\n\n5.5 // 2\n\n2.0\n\n\n\n\nmodulus %\nReturns the remainder\n\n5 % 2\n\n1\n\n\nodd integers % 2 = 1\neven integers % 2 = 0\nLook at this …\n\n5.5 / 2, 5.5 // 2, 5.5 % 2\n\n(2.75, 2.0, 1.5)\n\n\n\n\nexponentiation **\n\n5**3\n\n125"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "String Operators",
    "text": "String Operators\n\nconcatenation +\nThe plus sign is an ovderloaded operator in Python.\n\nmyString = 'This: '\n\n\nmy2ndString = myString + ' Goodbye, world!'\n\n\nmy2ndString\n\n'This:  Goodbye, world!'\n\n\n\n\nrepetition *\n\n# print('-' * 80)\n\n\nmyString*2                     \n\n'This: This: '\n\n\n\nmyString * 5\n\n'This: This: This: This: This: '\n\n\n\nbart_S1E3 = 'I will not skateboard in the halls'\n\n\nprint((bart_S1E3 + '\\n') * 5)\n\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\n\n\n\n\nprint('-' * 80)\n\n--------------------------------------------------------------------------------\n\n\nSee them all :-)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Assignment Operator =",
    "text": "Assignment Operator =\nWe’ve used this already, but it too is an operator.\n\nepoch = 20\nprint('epoch:', epoch)\n\nepoch: 20"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nComparisons are questions.\nThey return a boolean value.\n\nequality ==\n\n0 == (10 % 5)\n\nTrue\n\n\n\n'Boo' == 'Hoo'\n\nFalse\n\n\nCan we compare strings\n\n'A' < 'B'\n\nTrue\n\n\n\nord('A'), ord('B')\n\n(65, 66)\n\n\n\n\ninequality !=\n\n5/9 != 0.5555\n\nTrue"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Logical Operators",
    "text": "Logical Operators\nPython uses words where other languages will use other symbols.\n\nConjunctions and, or, not\nNote the we group comparisons with parentheses.\n\nx = 10\n\n(x % 10 == 0) or (x < -1)\n\nTrue\n\n\n\n(x % 10 == 0) and (x < -1)\n\nFalse\n\n\n\nnot x == 5\n\nTrue\n\n\n\n\nIdentity is\nThe is keyword is used to test if two variables refer to the same object.\nThe test returns True if the two objects are the same object.\nThe test returns False if they are not the same object, even if the two objects are 100% equal.\nUse the == operator to test if two variables are equal.\n– from W3Schools on Identity Operators\nis\n\nx = 'fail'\n\n\nx is 'fail'\n\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1139635342.py:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  x is 'fail'\n\n\nTrue\n\n\nis not\n\nx is not 'fail'\n\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1754352910.py:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  x is not 'fail'\n\n\nFalse\n\n\n\nx = 'foo'\ny = 'foo'\nx is y\n\nTrue\n\n\n\nx = ['a']\ny = ['a']\nx is y\n\nFalse\n\n\n\n\nNegation not\n\nnot True, not False, not 0, not 1, not 1000, not None\n\n(False, True, True, False, False, True)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "title": "NB: Numbers",
    "section": "",
    "text": "Built-in Functions\nThese are built-in mathematical functions for numbers.\nSee the Python docs on the math library.\nSee random — Generate pseudo-random numbers for more info."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "title": "NB: Numbers",
    "section": "pow() Power",
    "text": "pow() Power\n\npow(2,3) # 2 raised to 3 = 8"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "title": "NB: Numbers",
    "section": "abs() Absolute value",
    "text": "abs() Absolute value\n\nabs(-2) # returns 2, the absolute value of its argument"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "title": "NB: Numbers",
    "section": "round() Round",
    "text": "round() Round\nRounding up or down its argument (to closest whole number).\n\nround(2.8) # rounds up to 3.0\n\n3\n\n\n\nround(1.1) # rounds down to 1.0\n\n1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "title": "NB: Numbers",
    "section": "math.sqrt() Square root",
    "text": "math.sqrt() Square root\n\nmath.sqrt?\n\nSignature: math.sqrt(x, /)\nDocstring: Return the square root of x.\nType:      builtin_function_or_method\n\n\n\n# sqrt(intOne)\n\n\nmath.sqrt(12) # using the square-root function from the math library\n\n3.4641016151377544\n\n\n\nprint(math.floor(2.5)) # returns largest whole number less than the argument\nprint(math.floor(2.9))\nprint(math.floor(2.1))\n\n2\n2\n2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "title": "NB: Numbers",
    "section": "math.log()",
    "text": "math.log()\n\nmath.log?\n\n\nmath.log(100, 10)\n\n\nmath.log(256, 2)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "title": "NB: Numbers",
    "section": "random.random()",
    "text": "random.random()\n\nrandom.random?\n\n\nprint(random.random()) # using random() function in random library\n    # will return a number between 0 and 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "title": "NB: Numbers",
    "section": "random.randint()",
    "text": "random.randint()\n\nrandom.randint?\n\n\nprint(random.randint(1,100)) # specify a range in the parenthesis\n    # this will return a random integer in the range 1-100"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "href": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "title": "NB: Booleans",
    "section": "",
    "text": "A boolean value takes one of True or False, which are built-in values\ncheck if cache is True, using if statement\nif statement using a bool evaluates to True or False\n\ncache = True\n\nif cache:\n   print('data will be cached')\n\ndata will be cached\n\n\n\nprint(type(cache))\n\n<class 'bool'>\n\n\nBooleans are frequently used in if/then statements.\nWe’ll cover these later.\n\ncache = True\noome = False\n\nif cache or oome:\n    print('condition met!')\nelse:\n    print(\"No dice.\")\n\nAND statements will short circuit if an early condition fails.\n\nif oome and cache:\n    print('condition met!')\n\nIn this case, since oome is False, the check on cache never happens."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "title": "NB: Strings",
    "section": "",
    "text": "Kinds of quotes\nStrings are signified by quotes.\nSingle and double quotes are identical in function.\nThey must be “straight quotes” though – cutting and pasting from a Word document with smart quotes won’t work.\nPython uses a print function.\nPython supports special “escape characters” in strings that produce effects when printed.\nNote that these are not unique to Python. They are part of almost all languages.\nThe print function puts spaces between strings and a newline at the end, but you can change that:\nComments are lines of code that aren’t read by the interpreter.\nThey are used to explain blocks of code, or to remove code from execution when debugging.\nThese following are multiline strings that can serve as comments:\nNote that multiline comments also evaluate as values.\nActually, they are list-like.\nHere are some functions applicable to strings because they are lists."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "title": "NB: Strings",
    "section": "Quote prefixes",
    "text": "Quote prefixes\n\nr strings\nPrefixing a string causes escape characters to be uninterpreted.\n\nprint(\"Sentence one.\\nSentence two.\")\n\n\nprint(r\"Sentence one.\\nSentence two.\")\n\n\n\nf strings\nPrefixing a string with f allows variable interpolation – inplace evaluation of variables in strings.\n\nppl = 'knights'\ngreeting = 'Ni'\n\n\nprint(f'We are the {ppl} who say {greeting}!') # Output: We are the knights who say Ni!\n\nThe brackets and characters within them (called format fields) are replaced with the passed objects.\n\nprint(b\"This is a sentence.\")\n\n\nprint(\"This is a sentence.\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "title": "NB: Strings",
    "section": ".lower(), .upper()",
    "text": ".lower(), .upper()\n\n'BOB'.lower() #.upper()\n\n'bob'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "title": "NB: Strings",
    "section": ".split()",
    "text": ".split()\nParase a string based on a delimiter, which defaults to whitespace.\nNOTE: This does not use regular expressions.\nThis returns a list.\n\nmontyPythonQuote = 'are.you.suggesting.coconuts.migrate'\n\n\n'are.you.suggesting.coconuts.migrate'.split('.')\n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']\n\n\n\nmontyPythonQuote\n\n'are.you.suggesting.coconuts.migrate'\n\n\n\nmontyPythonQuote.split('.') # split by the '.' delimiter. Result: a list!\n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "title": "NB: Strings",
    "section": ".strip(), .rstrip(), lstrip() Strip methods",
    "text": ".strip(), .rstrip(), lstrip() Strip methods\nStrip out extra whitespace using strip(), rstrip() and lstrip() functions\n.strip() removes white space from anywhere\n.rstrip() only removes white space from the right-hand-side of the string\n.lstrip() only removes white space from the left-hand-side of the string\n\nstr1 = '  hello, world!'    # white space at the beginning\nstr2 = '  hello, world!  '  # white space at both ends\nstr3 = 'hello, world!  '    # white space at the end\n\n\nstr1, str2, str3\n\n\nstr1.lstrip(), str1.rstrip()\n\n\nstr2.strip(), str2.rstrip()\n\n\nstr2.lstrip(), str3.rstrip()\n\n\nstatus.startswith('a')\n\n\nstatus.endswith('s')"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "title": "NB: Strings",
    "section": ".replace()",
    "text": ".replace()\n\n\"latina\".replace(\"a\", \"x\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "title": "NB: Strings",
    "section": ".format()",
    "text": ".format()\nVariable values can be embedding in strings using the format() function.\nPlace {} in the string in order from left to right. followed by .format(var1, var2, ...)`\n\nepoch = 20\nloss = 1.55\n\nprint('Epoch: {}, loss: {}'.format(epoch, loss))\n\nThis breaks, as three variables are required based on number of {}\n\nprint('Epoch: {}, loop: {}, loss: {}'.format(epoch, loss))"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "title": "NB: Strings",
    "section": ".zfill()",
    "text": ".zfill()\nBasic usage of the str.zfill() method (pads a numeric string on the left with zeros) It understands about plus and minus signs\n\nprint('12'.zfill(5))       # Output: 00012\nprint('-3.14'.zfill(7))    # Output: -003.14\nprint('3.141592'.zfill(5)) # Output: 3.141592"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "title": "NB: Strings",
    "section": "len() Length",
    "text": "len() Length\nThis is built-in length funciton tells us how many characters in the string.\nIt also applys to any list-like object, including strings, lists, dicts, sets, and dataframes.\n\nlen?\n\n\nmy_new_tring = 'This is a string'\n\n\nlen(my_new_tring)\n\n\nIndexing\nSince strings are sequences in Python, each character of the string has a unique position that can be indexed.\nIndexes are indicated by suffixed brackets, e.g. foo[]\n\nmy_new_tring[0] # displays the first character of the string\n            # first position is position zero. Will display 'h'\n\n\nmy_new_tring[-1] # displays the last character. Negatives count backwords.\n\n\n\nSlicing\nWe can used the colon to ‘slice’ strings (and lists)\n\nmy_new_tring[0:4] # First four characters (index positions 0-3)\n\n\nmy_new_tring[:4]  # Beginning (0) to (n-1) position\n\n\nmy_new_tring[4:]  # Fifth character and onwards until the end of the string\n\nit is NOT possible to reassign elements of a string. Python strings are immutable.\n\nstatus = 'success'\nstatus[0] = 't'\n\nAdd strings and handle pathing"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "title": "NB: Structures",
    "section": "",
    "text": "Lists\nA list is an ordered sequence of items.\nEach element of a list is associated with an integer that represents the order in which the element appears.\nLists are indexed with brackets [].\nList elements are accessed by providing their order number in the brackets.\nLists are mutable, meaning you can modify them after they have been created.\nThey can contain mixed types.\nLike a hash table.\nHas key-value pairs.\nElements are indexed using brackets [] (like lists).\nBut they are constructed used braces {}.\nKey names are unique. If you re-use a key, you overwrite its value.\nKeys don’t have to be strings – they can be numbers or tuples or expressions that evaluate to one of these.\nA tuple is like a list but with one big difference: a tuple is an immutable object!\nYou can’t change a tuple once it’s created.\nA tuple can contain any number of elements of any datatype.\nAccessed with brackets [] but constructed with parentheses ().\nA set is an unordered collection of unique objects.\nThey are subject to set operations.\nNote the set is deduped\nSince sets are unordered, they don’t have an index. This will break:\nCheck if a value is in the set using in\nCombine two sets\nThis fails:\nThis succeeds:\nGet the set intersection\nA range is a sequence of integers, from start to stop by step. - The start point is zero by default.\n- The step is one by default.\n- The stop point is NOT included.\nRanges can be assigned to a variable.\nMore often, ranges are used in iterations, which we will cover later.\nanother range:\nVery often you will want to build a dictionary from some data source, and add keys as they appear. The default dict type in Python, however, requires that the key exists before you can mutate it. The defaultdict type in the collections module solves this problem. Here’s an example."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nThey can be constructed in several ways:\n\nlist1 = []\nlist2 = list()\nlist3 = \"some string\".split()\nnumbers = [1,2,3,4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "title": "NB: Structures",
    "section": "Indexing",
    "text": "Indexing\nZero-based indexing\nPython uses xzero-based indexing, which means for a collection mylist\nmylist[0] references the first element\nmylist[1] references the second element, etc\nFor any iterable object of length N:\nmylist[:n] will return the first n elements from index 0 to n-1\nmylist[-n:] will return the last n elements from index N-n to N-1\n\nnumbers[0] # Access first element (output: 1)\n\n1\n\n\n\nnumbers[-1]\n\n4\n\n\n\nnumbers[0] + numbers[3] # doing arithmetic with the values (output: 5)\n\n5\n\n\n\nnumbers[len(numbers)]\n\nIndexError: list index out of range"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "title": "NB: Structures",
    "section": "Slicing",
    "text": "Slicing\n\nnumbers[0:2] # Output: [1, 2]\n\n[1, 2]\n\n\n\nnumbers[1:3] # Output: [2, 3]\n\n[2, 3]\n\n\n\nlen(numbers) # use len() function to find the size. Output: 4\n\n4\n\n\n\nnumbers[2:]  # Output: [3, 4]\n\n[3, 4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "title": "NB: Structures",
    "section": "Multiply lists by a scalar",
    "text": "Multiply lists by a scalar\nA scalar is a single value number.\n\nnumbers * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "title": "NB: Structures",
    "section": "Concatenate lists with +",
    "text": "Concatenate lists with +\n\nnumbers2 = [30, 40, 50]\n\n\nnumbers + numbers2 # concatenate two lists"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "title": "NB: Structures",
    "section": "Lists can mix types",
    "text": "Lists can mix types\n\nmyList = ['coconuts', 777, 7.25, 'Sir Robin', 80.0, True]\n\n\nmyList\n\nWhat happens if we multiply a list with strings?\n\n# myList * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "title": "NB: Structures",
    "section": "Lists can be nested",
    "text": "Lists can be nested\n\nnames = ['Darrell', 'Clayton', ['Billie', 'Arthur'], 'Samantha']\nnames[2] # returns a *list*\nnames[0] # returns a *string*\n\ncannot subset into a float, will break\n\nnames[2][0]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "title": "NB: Structures",
    "section": "Lists can concatenated with +",
    "text": "Lists can concatenated with +\n\nvariables = ['x1', 'x2', 'x3']\nresponse = ['y']\n\n\nvariables + response\n\n['x1', 'x2', 'x3', 'y']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\n\ndict1 = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\n\ndict2 = dict(x=55, y=29, z=99) # Note the absence of quotes around keys\n\n\ndict2\n\n{'x': 55, 'y': 29, 'z': 99}\n\n\n\ndict3 = {'A': 'foo', 99: 'bar', (1,2): 'baz'}\n\n\ndict3\n\n{'A': 'foo', 99: 'bar', (1, 2): 'baz'}"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "title": "NB: Structures",
    "section": "Retrieve a value",
    "text": "Retrieve a value\nJust write a key as the index.\n\nphonelist = {'Tom':123, 'Bob':456, 'Sam':897}\n\n\nphonelist['Bob']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "title": "NB: Structures",
    "section": "Print list of keys, values, or both",
    "text": "Print list of keys, values, or both\nUse the .keys(), .values()', or.items()` methods.\nKeys are not sorted. For example, they are not ordered in order in which they were added.\n\nphonelist.keys() # Returns a list\n\n\nphonelist.values() # Returns a list\n\n\nphonelist.items() # Returns a list of tuples\n\n\nphonelist # note the data returned is not the same as the data entered"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nCreated with comma-separated values, with or without parenthesis.\n\nletters = 'a', 'b', 'c', 'd'\n\n\nletters\n\n\nnumbers = (1,2,3,4) # numbers 1,2,3,4 stored in a tuple\n\nA single valued tuple must include a comma ,, e.g.\n\ntuple0 = (29)\n\n\ntuple0, type(tuple0)\n\n\ntuple1 = (29,)\n\n\ntuple1, type(tuple1)\n\n\nlen(numbers)\n\n\nnumbers[0] = 5 # Trying to assign a new value 5 to the first position"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "title": "NB: Structures",
    "section": "Membership with in",
    "text": "Membership with in\nReturns a boolean.\n\n'Sam' in phonelist"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "title": "NB: Structures",
    "section": "Try with dict",
    "text": "Try with dict\n\nwords = {}\nfor word in source_data:\n    words[word] += 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "title": "NB: Structures",
    "section": "Use try and except",
    "text": "Use try and except\n\nfor word in source_data:\n    try:\n        words[word] += 1\n    except KeyError:\n        words[word] = 1\n\n\nwords"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "title": "NB: Structures",
    "section": "Or use .get()",
    "text": "Or use .get()\n\nfor word in source_data:\n    words[word] = words.get(word, 0) + 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "title": "NB: Structures",
    "section": "Use collections.defaultdict",
    "text": "Use collections.defaultdict\n\nfrom collections import defaultdict\n\n\nwords2 = defaultdict(int) # Not the type must be set\n\n\nfor word in source_data:\n    words2[word] += 1\n\n\nwords2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html",
    "href": "notebooks/M02_BasicPython/M02-Notes.html",
    "title": "M02 Notes",
    "section": "",
    "text": "Review Assignment\nSee M01 Notebook for results.\nTypes | name | type | literal | |——|——|———| | int | integer | 1 | | str | string | \"1\", '1' | | float | floating point (real) | 1. | | complex | complex | 1j (imaginary component) | | bool | boolean | True |\nStructures | name | mutable | constructor | |——|———|————-| | tuple | no | (), tuple() | | list | yes | [], list() | | dict | yes | {} with key/value pairs, dict() | | set | yes | {} with single values, set() |"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#data-code",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#data-code",
    "title": "M02 Notes",
    "section": "Data / Code",
    "text": "Data / Code\nData vs algorithm (code). How are they related?"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#data-types-and-structures",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#data-types-and-structures",
    "title": "M02 Notes",
    "section": "Data types and structures",
    "text": "Data types and structures\nData types and data structures. What are the differences?\nData types are atomic; they don’t contain other data types.\nA data structure contains data types organized in a certain way."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#strings",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#strings",
    "title": "M02 Notes",
    "section": "Strings",
    "text": "Strings\nStrings are data types, but internally they are like data structures.\nHowever, unlike the data structures considered here, strings can’t contain any of the data types specified by Python.\nInternally, a string is a sequence of Unicode code points, which are not exposed as data types (as they are in some other languages).\n\nA code point is a numerical value that maps to a specific character.\nUnicode is an international standard of code points that map onto the alphabets of many languages.\n\nEach character is an element in an immutable list-like structure.\nYou can access it’s elements as if it were a tuple of characters:\n\nmy_string = \"This is a string\"\nprint(my_string[0])\nprint(my_string[-1])\nprint(my_string[1:-1])\nprint(my_string[1:4])\nprint(my_string[1:-4])\nprint(my_string[-4:1])\n\nT\ng\nhis is a strin\nhis\nhis is a st\n\n\n\nBut also like a tuple, you can’t change its values:\n\nmy_string[2] = 'a'\nmy_string[3] = 't'\n\nTypeError: 'str' object does not support item assignment\n\n\nNote that some languages, like Java, have a data type for individual characters, e.g. A."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#string-indexing",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#string-indexing",
    "title": "M02 Notes",
    "section": "String indexing",
    "text": "String indexing\nNote that strings can be accessed via indexes, since they are list-like sequences.\nOne thing to understand about indexing elements and slices is that slices are always\nfrom left to right, even if using negative numbers, which move backwards, as it were.\nAlso, every positive number has a corresponding negative number, and these may be\nsubstituted freely and using indexes and slices.\nThe following example illustrates these points.\n\nmy_string2 = \"I AM A STRING\"\n\nThe above string can represented in the following way:\n\n\n\nI\n\nA\nM\n\nA\n\nS\nT\nR\nI\nN\nG\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n-13\n-12\n-11\n-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\nNote that the second and third rows of this table represent two functionally\nequivalent ways of accessing elements of the string sequence.\nAlso note that positive and negative numbers are subsitutible.\n\nprint(my_string2[12], '==', my_string2[-1])\n\nG == G\n\n\n\nmy_string2[2:6]\n\n'AM A'\n\n\n\nmy_string2[2:-7]\n\n'AM A'\n\n\n\nmy_string2[-11:-7]\n\n'AM A'\n\n\n\nmy_string2[-11:6]\n\n'AM A'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#mutability",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#mutability",
    "title": "M02 Notes",
    "section": "Mutability",
    "text": "Mutability\nA mutable object is one whose internal value can be changed.\nThis property applies to data structures.\nTuples are immutable, lists are not.\nDemonstration\nHere, we mutate a list by appending a value to it.\n\na = [1,2,3,4,5]\na.append(10)\nprint(a)\n\n[1, 2, 3, 4, 5, 10]\n\n\n\na[0] = 5\nprint(a)\n\n[5, 2, 3, 4, 5, 10]\n\n\nIf we try the same things with a tuple, we get an error.\n\nb = (1,2,3,4,5)\nb.append(10)\nprint(b)\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n\n\nb[0] = 5\nprint(b)\n\nTypeError: 'tuple' object does not support item assignment\n\n\nThis, on the other hand, is not mutation:\n\na = [1,2,3,4,5,10] # A list\nb = (1,2,3,4,5,10) # A tuple\nprint(a)\nprint(b)\n\n[1, 2, 3, 4, 5, 10]\n(1, 2, 3, 4, 5, 10)\n\n\nWe are just re-assigning a new value to the variable.\nThe new value just replaces the old one.\nIn mutation, the same data structure remains in place and its contents are changed.\nNote, however, that this works with tuples:\n\nb += (11,)\nprint(b)\n\n(1, 2, 3, 4, 5, 10, 11)\n\n\nIt looks like mutation, but it’s not.\nThis is because we are replacing b with a new tuple value.\n\nNotice that we write a single valued tuple with a comma. Why?\n\nBehavior\n\nView the video for this section on Canvas.\n\nRelatedly, mutable and immutable objects behave differently.\nFor example, when you assign a variable to another variable of a\nmutable datatype, any changes to the data are reflected by both variables.\nThe new variable is just an alias for the old variable.\nThis is only true for mutable datatypes.\nLets explore how + operator behaves differently.\nFirst, let’s create a function that will allow us\nto compare the objects as we modify them.\n\ndef compare_objects(trial:int, obj1:str, obj2:str):\n    o1 = eval(obj1)\n    o2 = eval(obj2)\n    print(f\"t{trial} {obj1} {o1} {id(o1)}\")\n    print(f\"t{trial} {obj2} {o2} {id(o2)}\")\n    print(f\"{obj1} == {obj2}:\", o1 == o2)\n\nList t1\nWe initialize a list and make a copy of it.\nNote that the two variables share the same id.\n\na0 = [1,2,3,4,5]\na1 = a0 # Make a copy of a list\ncompare_objects(1, 'a0', 'a1')\n\nt1 a0 [1, 2, 3, 4, 5] 4534811776\nt1 a1 [1, 2, 3, 4, 5] 4534811776\na0 == a1: True\n\n\nList t2\nNow we add to the copy and note the effects on the original.\nThe original value is also changed.\nThis is because both variables point to the same object.\n\na1 += [12] # Extend the copy\ncompare_objects(2, 'a0', 'a1')\n\nt2 a0 [1, 2, 3, 4, 5, 12] 4534811776\nt2 a1 [1, 2, 3, 4, 5, 12] 4534811776\na0 == a1: True\n\n\nList t3\nNote, however, that if we don’t use the unary operator,\nthen a1 becomes a different object!\nThis is weird and does not seem to be noticed by the Python people.\nLutz goes into the difference between the += and the + in Ch 11 pages 360-363.\n\n\n\nimage.png\n\n\n\na1 = a1 + [12] # Extend the copy\ncompare_objects(3, 'a0', 'a1')\n\nt3 a0 [1, 2, 3, 4, 5, 12] 4534811776\nt3 a1 [1, 2, 3, 4, 5, 12, 12] 4521759168\na0 == a1: False\n\n\nList t4\nTry it with a new object copy, to avoid any possible inference between t2 and t3.\n\na2 = a0\na2 = a2 + [12] # Extend the copy\ncompare_objects(4, 'a0', 'a2')\n\nt4 a0 [1, 2, 3, 4, 5, 12] 4534811776\nt4 a2 [1, 2, 3, 4, 5, 12, 12] 4534668992\na0 == a2: False\n\n\nWe get the same result.\nTuple t1\nLet’s try this with a tuple.\nWe see again that both variables have the same id.\n\nb0 = (1,2,3,4,5)\nb1 = b0 # Make a copy of a tuple\ncompare_objects(1, 'b0', 'b1')\n\nt1 b0 (1, 2, 3, 4, 5) 4535096624\nt1 b1 (1, 2, 3, 4, 5) 4535096624\nb0 == b1: True\n\n\nTuple t2\nHowever, if extend the tuple with the unary operator,\n b1 becomes a new object.\nNote how this differs from the list behavior.\n\nb1 += (12,) # Extend the copy\ncompare_objects(2, 'b0', 'b1')\n\nt2 b0 (1, 2, 3, 4, 5) 4535096624\nt2 b1 (1, 2, 3, 4, 5, 12) 4535001504\nb0 == b1: False\n\n\nTuple t3\nIf we don’t use the unary operator, the same thing happens again.\nThe value of b1 becomes a new object because the variable has been reassigned.\n\nb1 = b1 + (12,) # Extend the copy\ncompare_objects(3, 'b0', 'b1')\n\nt3 b0 (1, 2, 3, 4, 5) 4535096624\nt3 b1 (1, 2, 3, 4, 5, 12, 12) 4534999776\nb0 == b1: False\n\n\nLet’s look at another example.\nHere is a list:\n\nfoo = ['hi']\nbar = foo\ncompare_objects(1, 'foo', 'bar')\n\nt1 foo ['hi'] 4538156288\nt1 bar ['hi'] 4538156288\nfoo == bar: True\n\n\n\nbar += ['bye']\ncompare_objects(2, 'foo', 'bar')\n\nt2 foo ['hi', 'bye'] 4538156288\nt2 bar ['hi', 'bye'] 4538156288\nfoo == bar: True\n\n\n\nbar = bar + ['bye']\ncompare_objects(2, 'foo', 'bar')\n\nt2 foo ['hi', 'bye'] 4538156288\nt2 bar ['hi', 'bye', 'bye'] 4534918016\nfoo == bar: False\n\n\nAnd here is a tuple:\n\nfoo1 = ('hi')\nbar1 = foo1\ncompare_objects(1, 'foo1', 'bar1')\n\nt1 foo1 hi 4475663600\nt1 bar1 hi 4475663600\nfoo1 == bar1: True\n\n\n\nbar1 += ('bye')\ncompare_objects(2, 'foo1', 'bar1')\n\nt2 foo1 hi 4475663600\nt2 bar1 hibye 4538288752\nfoo1 == bar1: False"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#comparing-floats",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#comparing-floats",
    "title": "M02 Notes",
    "section": "Comparing floats",
    "text": "Comparing floats\nLet’s do an experiment:\n\nf1 = 0.1 + 0.2\nf2 = 0.3\n\n\nf1 == f2\n\nFalse\n\n\nIn the above case, f1 and f2 don’t hold precisely the same value because of the limitations of representing base-10 fractions in base-2 (binary).\nInspecting their values, we find minor differences in the lower significant digits:\n\nf1, f2\n\n(0.30000000000000004, 0.3)\n\n\nTo get around this problem, try using math.isclose() instead of ==:\n\nimport math\nmath.isclose(f1, f2)\n\nTrue\n\n\nNote that sometimes floating point comparisons do work:\n\nf3 = 4.0\nf4 = 3.5 + .5\n\n\nf3 == f4\n\nTrue\n\n\nSee the Wikipedia article on floating point arithmetic to learn more about how this arises.\nIt will provide you with insight into how computers actually work as machines that process numbers."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-Notes.html#the-word-scalar",
    "href": "notebooks/M02_BasicPython/M02-Notes.html#the-word-scalar",
    "title": "M02 Notes",
    "section": "The word “scalar”",
    "text": "The word “scalar”\nSometimes you will see the word “scalar” in the literature to refer to certain kinds of values.\nScalars are single values as opposed to structures or collections of values.\n\nStrings as data types sometimes behave as scalars and sometimes as sequential structures."
  },
  {
    "objectID": "modules/m03/m03-intro.html#topics",
    "href": "modules/m03/m03-intro.html#topics",
    "title": "M03 Control Structures",
    "section": "Topics",
    "text": "Topics\n\nMore on Statements and Syntax\nControl Structures and Loops\nConditional Logic\nIterators\nComprehensions"
  },
  {
    "objectID": "modules/m03/m03-intro.html#readings",
    "href": "modules/m03/m03-intro.html#readings",
    "title": "M03 Control Structures",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz, 2019, Part III, Chapter 10. Introducing Python Statements\n\n\nLutz, 2019, Part III, Chapter 11. Assignments, Expressions, and Prints Read only up to and including “The Python 3.X print Function.”\n\n\nLutz, 2019, Part III, Chapter 12. if Tests and Syntax Rules\n\n\nLutz, 2019, Part III, Chapter 13. while and for Loops\n\n\nLutz, 2019, Part III, Chapter 14. Iterations and Comprehensions\n\n\nLutz, 2019, Part III, Chapter 15: The Documentations Interlude\n\n\n\n\nOptional\n\n\nVariables, Expressions, Statements, Types (Python Notes)\n\n\nMore Control Flow Tools (Python Docs)\n\n\nIf … Then (W3S)\n\n\nIterators (GFG)"
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#definitions",
    "href": "topics/vals-vars-expressions-statements.html#definitions",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "Definitions",
    "text": "Definitions\n\nValues: Raw data elements represented in a program, e.g. numbers and strings.\nVariables: Names to which values are assigned.\nExpressions: Combinations of values, variables, operators, functions, and other expressions that evaluate to a value.\nStatements: Groupings of expressions that produce some result. Statements do things."
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#statement-types",
    "href": "topics/vals-vars-expressions-statements.html#statement-types",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "Statement Types",
    "text": "Statement Types\nSee Statement Types in Lutz."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "title": "NB: Control Structures",
    "section": "Introducing Control Structures",
    "text": "Introducing Control Structures\nPython includes structures to control the flow of a program:\n\nconditions (if, else)\nloops\n\nwhile-loop\nExecute statements while a condition is true\nfor-loop\nIterates over a iterable object (list, tuple, dict, set, string)"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "title": "NB: Control Structures",
    "section": "Indentation",
    "text": "Indentation\nThis is where Python differs from most languages. To define control structures,\nand functional blocks of code in general, most languages use either characters\nlike braces { and } or key words like IF ... END IF.\nPython uses tabs — spaces, actually — to signify logical blocks off code.\nIt is therefore imperative to understand and get a feel for indentation.\nFor more information, see Lutz 2019, “A Tale of Two Ifs.”"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "title": "NB: Control Structures",
    "section": "Conditions",
    "text": "Conditions\n\nif and else can be used for conditional processing.\n\nval = -2\n\nif val >= 0:\n    print(val)\nelse:\n    print(-val)\n\n2\n\n\n\n\nelif\nelif is reached when the previous statements are not.\nNote that these are disjoint — if one succeeds, those\nthat follow are not processed.\nThis is unlike a series of if statements.\n\nval = -2\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nbucket 3\n\n\n\n\nelse\nelse can be used as a catchall\n\nval = 5\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4\n\n\n\n\nif and else as one-liners\n\nx = 3\nprint('odd') if x % 2 == 1 else print('even')\n\nodd\n\n\nNotice == for checking the condition x % 2 == 1.\nboth if and else are required. This breaks:\n\nprint('odd') if x % 2 == 1\n\nSyntaxError: invalid syntax (471325368.py, line 1)\n\n\n\n\nUsing multiple conditions\nIf statements can be complex combinations of expressions.\nUse parentheses carefully, to keep order of operations correct.\nCorrect:\n\nval = 2\n\nif (-2 < val < 2) or (val > 10):\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 2\n\n\nIncorrect:\n\nif (-2 < val) < 2 or val > 10:\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 1\n\n\nThe problem is the misplaced parenthesis.\nThis is because the condition line is interpreted asTrue < 2,\nwhere True is cast to integer value \\(1\\)."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "title": "NB: Control Structures",
    "section": "Loops",
    "text": "Loops\n\nwhile\nWhat does this print?\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\nprint(ix)\n\n16\n\n\n\n\nbreak to exit the loop altogether\nsometimes you want to quit the loop early, if some condition is met.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        break\nprint(ix)\n\n4\n\n\nThe break causes the loop to end early\n\n\ncontinue to stop the current iteration\nsometimes you want to introduce skipping behavior in the loop.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        print('skipping 4...')\n        continue\n    print(ix)\n\n2\nskipping 4...\n8\n16\n\n\nThe continue causes the loop to skip printing 4\n\n\nfor\niterate over an iterable\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nsf\nbos\nla\n\n\nquit early if SF reached, using break\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        break\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\n\n\nskip over SF if reached, using continue\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        continue\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nbos\nla"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "title": "NB: Control Structures",
    "section": "while vs for",
    "text": "while vs for\nFor loops are used to loop through a list of values or an operation in which the number of iterations is known in advance.\nWhile loops are when you don’t know how many interations it will take — you are depending on some condition to be met.\nIt is possible for while loops to be unending, for example:\nwhile 1:\n    print(\"This is so annoying\")"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "title": "NB: Iterables and Iterators",
    "section": "",
    "text": "Defining Iterables and Iterators\nIterable objects or iterables can return elements one at a time.\nAn iterator is an object that iterates over iterable objects such as sets, lists, tuples, dictionaries, and strings.\nIteration can be implemented: - with for loops - with the next() method\nNext, we show examples for various iterables.\nWe iterated over a list. Next we will illustrate for other iterables: str, tuple, set, dict\nlists, tuples, and strings are sequences. Sequences are designed so that elements come out of them in the same order they were put in.\nSets and dictionaries are not sequences, since they don’t keep elements in order. They are called collections. The ordering of the items is arbitrary.\nNOTE: This has changed for dictionaries in Python 3.7: > the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec.\n– What’s New in Python 3.7\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\nAlternatively, keys and values can be extracted from the dict by: - looping over the keys - extract the value by indexing into the dict with the key\niterating using for\nIf you just want to iterate for a known number of times, use range().\nVery often you will want to know iteration number you are on in a loop.\nThis can be used to name files or dict keys, for example.\nenumerate() will return the index and key for each iteration.\nIterations can be nested!\nThis works well with nested data structures, like dicts within dicts.\nThis is basically how JSON files are handled, BTW.\nBe careful, though – these can get deep and complicated."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using for",
    "text": "iterating using for\n\ntokens = ['living room', 'was', 'quite', 'large']\n\nfor tok in tokens:\n    print(tok)\n\nliving room\nwas\nquite\nlarge"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using iter() and next()",
    "text": "iterating using iter() and next()\niter() gets an iterator. Pops out a value each time it’s used.\nnext() gets the next item from the iterator\n\ntokens = ['living room','was','quite','large']\nmyit = iter(tokens)\nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \n\nliving room\nwas\nquite\nlarge\n\n\nCalling next() when the iterator has reached the end of the list produces an exception:\n\nprint(next(myit))\n\nStopIteration: \n\n\nNext, look at the type of the iterator, and the documentation\n\ntype(myit)\n\nlist_iterator\n\n\n\n# help(myit)\n\n\nhelp(next)\n\nHelp on built-in function next in module builtins:\n\nnext(...)\n    next(iterator[, default])\n    \n    Return the next item from the iterator. If default is given and the iterator\n    is exhausted, it is returned instead of raising StopIteration.\n\n\n\nNote that for implicitly creates an iterator and executes next() on each loop iteration. This is best way to iterate through a list-like object."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "title": "NB: Comprehensions",
    "section": "",
    "text": "List Comprehensions\nConsider this task: check if each integer in a list is odd.\nWithout list comprehensions, you might do this:\nComprehensions provide a concise method for iterating over any list-like object to a new list like object.\nThere are comprehensions for each list-like object: * List comprehensions * Dictionary comprehensions * Tuple comprehensions * Set comprehensions\nComprehensions are essentially very concise for loops. They are compact visually, but they also are more efficient than loops.\nAll comprehensions have the form:\nlistlike_result = [ expression + context]\nThe type of comprehension is indicated by the use of enclosing pairs, just like anonymous constructors:\nExpression defines what to do with each element in the list. This has the structure of the kind of comprehension. So, dictionary comprehension expressions take the form k:v while sets use v.\nContext defines which list elements to select. The context always consists of an arbitrary number of for and if statements.\nDictionary comprehensions provide a concise method for iterating over a dictionary to create a new dictionary.\nThis is common when data is structured as key-value pairs, and we’d like to filter the dict.\nWe build the key-value pairs using key:model_arch[key], where the key indexes into the dict model_arch"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "title": "NB: Comprehensions",
    "section": "Check if Odd",
    "text": "Check if Odd\n\nvals = [1,5,6,8,12,15]\nis_odd = []\n\nfor val in vals:   \n    if val % 2: # if remainder is one, val is odd\n        is_odd.append(True)\n    else:       # else it's not odd\n        is_odd.append(False)\n\nis_odd\n\n[True, True, False, False, False, True]\n\n\nThe code loops over each value in the list, checks the condition, and appends to a new list.\nThe code works, but it’s lengthy compared to a list comprehension.\nThe approach takes extra time to write and understand.\nLet’s solve with a list comprehension:\n\nis_odd = [val % 2 == 1 for val in vals]\nis_odd\n\n[True, True, False, False, False, True]\n\n\nMuch shorter, and if you understand the syntax, quicker to interpet.\nNote the in-place use of an expression.\nNow let’s discuss the syntax."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "title": "NB: Comprehensions",
    "section": "Stop Word Remover",
    "text": "Stop Word Remover\nCreate list of words, and list of stop words.\nFilter out the stop words (considered not important).\n\nstop_words = ['a','am','an','i','the','of']\nwords      = ['i','am','not','a','fan','of','the','film']\n\nclean_words = [wd for wd in words if wd not in stop_words]\nclean_words\n\n['not', 'fan', 'film']\n\n\nplacing the color-coding on the list comprehension:\n[ wd   for wd in words  if wd not in stop_words]\n\nthe expression is very simple: wd. keep the word if meets condition\nthe condition does the work: if the word isn’t in list of stop words, keep it\n\nSide note: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\ns1 = set(stop_words)\ns2 = set(words)\ns3 = s2 - s1\n\n\ns3\n\n{'fan', 'film', 'not'}"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "title": "NB: Comprehensions",
    "section": "Select Tokens Containing Units",
    "text": "Select Tokens Containing Units\nGiven a list of measurements, retain elements containing mmHg (millimeters of mercury)\n\nunits = 'mmHg'\nmeasures = ['20', '115mmHg', '5mg', '10 mg', '7.5dl', '120 mmHg']\nmeas_mmhg = [meas for meas in measures if units in meas]\n\n\nmeas_mmhg   \n\n['115mmHg', '120 mmHg']\n\n\nFiltering on two conditions\n\nunits1 = 'mmHg'\nunits2 = 'dl'\nmeas_mmhg_dl = [meas for meas in measures if units1 in meas or units2 in meas]\n\n\nmeas_mmhg_dl\n\n['115mmHg', '7.5dl', '120 mmHg']\n\n\nThis can be written differently for clarity:\n\n[meas \n for meas in measures \n if units1 in meas \n or units2 in meas]\n\n['115mmHg', '7.5dl', '120 mmHg']"
  },
  {
    "objectID": "modules/m04/m04-intro.html#topics",
    "href": "modules/m04/m04-intro.html#topics",
    "title": "M04 Functions",
    "section": "Topics",
    "text": "Topics\n\nBuilt-in functions\nUser-defined functions\nVariable scope\nLambda functions\nDesign of functions\nRecursion"
  },
  {
    "objectID": "modules/m04/m04-intro.html#readings",
    "href": "modules/m04/m04-intro.html#readings",
    "title": "M04 Functions",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2019, Part IV, Chapter 16: Function Basics\n\n\nLutz 2019, Part IV, Chapter 17: Scopes Non-local is for advanced users\n\n\nLutz 2019, Part IV, Chapter 18. Arguments\n\n\nLutz 2019, Part IV, Chapter 19: Advanced Function Topics\n\n\n\n\nOptional\n\n\nMcKinney, Python for Data Analysis, Appendix A: Python Language Essentials\n\n\nRead section on Functions\n\n\nFunctions (W3S)\n\n\nGlobal and Local Variables (GFG)\n\n\nLambda Functions (Real Python)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "title": "NB: Introduction to Functions",
    "section": "Introduction",
    "text": "Introduction\nA function is piece of source code, separate fom the larger program, that performs a specific task.\nThis section of code is given a name and can be called from the main program. It is called by using its given name.\nFunctions are the verbs of a programming language. They signify action, and take subjects and objects (as it were).\nFunctions take input and produce output.\n\nFunction inputs are called both parameters and arguments.\nOutputs are called return values\n\nFunctions are always written with parentheses at the end of their names, e.g.\nlen(some_list)\nInternally, they contain a block of code to do their work.\nOften the producte a transformation … from simple to complex.\nWhen you use a function, we say you call a function. Programmers speak of “function calls” and “callbacks”."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "title": "NB: Introduction to Functions",
    "section": "Benefits",
    "text": "Benefits\nReduce complex tasks into simpler tasks.\nEliminate duplicate code – no need to re-write, reuse function as needed.\nCode reuse. Once function is written, you can reuse it in any other program.\nDistribute tasks to multiple programmers. For example, each function can be written by someone.\nHide implementation details, i.e. abstraction.\nIncrease code readability.\nImprove debugging by improving traceability. Things are easier to follow; you can jump from function to function."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "title": "NB: Introduction to Functions",
    "section": "Built-in Functions",
    "text": "Built-in Functions\nPython provides many built-in functions. See Python built-in functions.\nWe’ve looked at many of these already.\nThese are functions that are available to use any time your are running Python.\nTo take one simple example, this is a built-in function: bool().\nTakes an argument \\(x\\) and returns a boolean value, i.e. True or False.\n\nbool(0), bool(500)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "title": "NB: Introduction to Functions",
    "section": "Imported Functions",
    "text": "Imported Functions\nPython is meant to be a highly modular language.\nIt is not designed to have a lot of special purpose functions built into it.\nThese keeps it light and highly customizable.\nMany functions (and other stuff) can be imported into a program to add to the functions that you can call in a script.\nThere are also many packages to bring in additional functions.\nPackages and Libraries"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "title": "NB: Introduction to Functions",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\nPython makes it easy for you to write your own functions. These are called user-defined functions.\nLet’s write a function to compare the list against a threshold.\n\ndef vals_greater_than_or_equal_to_threshold(vals, thresh):\n    '''\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    '''\n    \n    bools = [val >= thresh for val in vals]\n    \n    return bools\n\nLet’s break down the components\nThe function definition starts with def, followed by name, one or more arguments in parenthesis, and then a colon.\nNext comes a docstring to provide information to users about how and why to use the function.\nThe function body follows.\n:astly is a return statement\nThe function call allows for the function to be used.\nIt consists of function name and required arguments:\nvals_greater_than_or_equal_to_threshold(arg1, arg2) where arg1, arg2 are arbitrary names.\n\nAbout the docstring\nA docstring m occurs as first statement in module, function, class, or method definition\nInternally, it is saved in __doc__ attribute of the function object.\nIt needs to be indented.\nIt can be a single line or a multi-line string.\n\n\nLet’s test our function\nThe function body used a list comprehension for the compare:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n[False, True]\n\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## vals_greater_than_or_equal_to_threshold(\"foo\", \"bar\")\n\nThis gives correct results and does exactly what we want.\n\n\nUsers can print the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nprint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\n\n?vals_greater_than_or_equal_to_threshold\n\nLet’s test our function\nThe function body used a list comprehension for the comparison:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\nThis gives correct results and does exactly what we want.\nPrint the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nPrint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\nUse the ? prefix …\n\n?vals_greater_than_or_equal_to_threshold"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Passing Parameters",
    "text": "Passing Parameters\nFunctions need to be called with correct number of parameters.\nThis function requires two params, but the function call includes only one param.\n\ndef fcn_bad_args(x, y):\n    return x + y\n\n\nfcn_bad_args(10)\n\nTypeError: fcn_bad_args() missing 1 required positional argument: 'y'\n\n\n\nParameter Order\nWhen calling a function, parameter order matters.\n\ndef fcn_swapped_args(x, y):\n    out = 5 * x + y\n    return out\n\n\nx = 1\ny = 2\n\n\nfcn_swapped_args(x, y)\n\n7\n\n\n\nfcn_swapped_args(y, x)\n\n11\n\n\nGenerally it’s best to keep parameters in order.\nYou can swap the order by putting the parameter names in the function call.\n\nfcn_swapped_args(y=y, x=x)\n\n\n\nWeirdness Alert\nNote that the same name can be used for the parameter names and the variables passed to them.\nThe names themselves have nothng to do with each other!\nIn other words, just because a function names an argument foo,\nthe variables passed to it don’t have to name foo or anything like it.\nThey can even be named the same thing – it does not matter."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "title": "NB: Introduction to Functions",
    "section": "Unpacking List-likes with *args",
    "text": "Unpacking List-likes with *args\nThe * prefix operator can be passed to avoid specifying the arguments individually.\n\ndef show_arg_expansion(*models):\n    \n    print(\"models          :\", models)\n    print(\"input arg type  :\",  type(models))\n    print(\"input arg length:\", len(models))\n    print(\"-----------------------------\")\n    \n    for mod in models:\n        print(mod)    \n\nWe can pass a tuple of values to the function …\n\nshow_arg_expansion(\"logreg\", \"naive_bayes\", \"gbm\")\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nYou can also pass a list to the function.\nIf you want the elements unpacked, put * before the list.\n\nmodels = [\"logreg\", \"naive_bayes\", \"gbm\"]\nshow_arg_expansion(*models)\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nThis approach allows your function to accept an arbitrary number of arguments.\n\nshow_arg_expansion('a b c d e f g'.split())\n\nThe reverse is true, too.\nYou can use the * prefix to pass list-like objects to a function that specifies its arguments.\n\ndef arg_expansion_example(x, y):\n    return x**y\n\n\nmy_args = [2, 8]\narg_expansion_example(*my_args)\n\nBut, the passed object must be the right length.\n\nmy_args2 = [2, 8, 5]\narg_expansion_example(*my_args2)\n\n\n## **my_dict"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "title": "NB: Introduction to Functions",
    "section": "Default Arguments",
    "text": "Default Arguments\nUse default arguments to set the value of arguments when left unspecified.\n\ndef show_results(precision, printing=True):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\n\npr = 0.912\nres = show_results(pr)\n\nprecision = 0.91\n\n\nThe function call didn’t specify printing, so it defaulted to True.\nNOTE: Default arguments must follow non-default arguments. This causes trouble:\n\ndef show_results(precision, printing=True, uhoh):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\nSyntaxError: non-default argument follows default argument (<ipython-input-19-29f5905a75a5>, line 1)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "title": "NB: Introduction to Functions",
    "section": "Returning Values",
    "text": "Returning Values\nFunctions are not required to have return statement.\nIf there is no return statement, a function returns None.\nFunctions can return no value (None), one value, or many.\nMany values are returned as a tuple.\nAny Python object can be returned.\n\n## returns None, and prints.\n\ndef fcn_nothing_to_return(x, y):\n    out = 'nothing to see here!'\n    print(out)\n\n\nfcn_nothing_to_return(x, y)\n\nnothing to see here!\n\n\n\nr = fcn_nothing_to_return(1, 1)\nprint(r)\n\nnothing to see here!\nNone\n\n\n\n## returns three values\n\ndef negate_coords(x, y, z):\n    return -x, -y, -z \n\n\na, b, c = negate_coords(10, 20, 30)\nprint('a =', a)\nprint('b =', b)\nprint('c =', c)\n\na = -10\nb = -20\nc = -30\n\n\n\nfoo = negate_coords(10, 20, 30)\n\n\nfoo, len(foo)\n\n((-10, -20, -30), 3)\n\n\nIf you don’t need an output, use the dummy variable _\n\nd, e, _ = negate_coords(10,20,30)\nprint('d =', d)\nprint('e =', e)\n\nNote: It’s generally a good idea to include return statements, even if not returning a value.\nThis shows that you did not forget to consider the return value.\nYou can use return or return None.\nFunctions can contain multiple return statements.\nThese may be used under different logical conditions.\n\ndef absolute_value(num):\n    if num >= 0:\n        return num\n    return -num\n\n\nabsolute_value(-4)\n\n\nabsolute_value(4)\n\nFor non-negative values, the first return is reached.\nFor negative values, the second return is reached."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "title": "NB: Introduction to Functions",
    "section": "Function Design",
    "text": "Function Design\nA function is not just a bag of code!\nSome good practices for creating and using functions:\n\ndesign a function to do one thing\n\nMake them as simple as possible, which makes them:\n\nmore comprehensible\neasier to maintain\nreusable\n\nThis helps avoid situations where a team has 20 variations of similar functions.\nGive your function a good name.\n\nIt should reflect the action it performs.\nBe consistent in your naming conventions.\nA name like compute_variances_sort_save_print suggests the function is overworked!\n\nIf the function compute_variances also produces plots and updates variables, it will cause confusion.\nAlways give your function a docstring - Particularly important since indicating data types is not required.\n- As a side note, you can include this information by using type annotation.\nFinally, at some point you may be interested to learn some of the formatting languages that have been developed to write docstrings. See Lutz 2019 and this web page about Documenting Python Code for more info."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html",
    "title": "NB: Importing Functions",
    "section": "",
    "text": "Extra"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "title": "NB: Importing Functions",
    "section": "Importing",
    "text": "Importing\nCalling a function from the math library is straightforward:\n\nImport Python’s Math library with the command import math\nCall methods from the imported math object using “dot” notation, that is, .(any parameters).\n\nFor example:\nmath.sqrt(12)\nPut all of your import statements at the very top of your code, before anything else, other than any header comments (which you should have).\nHere are some example math functions:\n\nimport math # Typically best to put this line of code at the TOP of the file\n\n\nmath.sqrt(12)\n\n3.4641016151377544\n\n\n\nmath.floor(2.5) # returns largest whole number less than the argument\n\n2\n\n\nHere’s an example using the random library (a class).\n\nimport random # Typically best to put this line of code at the TOP of the file\n\n\nrandom.random()# will return a number between 0 and 1 \n\n0.3599068479674543\n\n\n\nrandom.randint(1, 100) # this will return a random integer in the range 1-100\n\n18"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "title": "NB: Importing Functions",
    "section": "Importing Specific Functions",
    "text": "Importing Specific Functions\nIf you know what specifics function you are going to use from a library, you can import them directly, like so:\nfrom math import sqrt\nThis has two effects: 1. It reduces the memory used by the library in your program. 2. It allows you to call the function directly, with the object dot notation.\n\nfrom math import sqrt\n\n\nsqrt(99)\n\n9.9498743710662"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "title": "NB: Importing Functions",
    "section": "Aliasing",
    "text": "Aliasing\nTo avoid having the function name conflict with an existing function in your program,\nyou can alias the imported function like so:\n\nfrom math import sqrt as SquareRoot\n\n\nSquareRoot(65000)\n\n254.95097567963924"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "title": "NB: Lambda Functions",
    "section": "Introduction",
    "text": "Introduction\nPython lambda functions are small, informal functions. They don’t get a name.\nThe are “anonymous.”\nFrom Lutz 2019:\n\nBesides the def statement, Python also provides an expression form that generates function objects. Because of its similarity to a tool in the Lisp language, it’s called lambda. Like def, this expression creates a function to be called later, but it returns the function instead of assigning it to a name. This is why lambdas are sometimes known as anonymous (i.e., unnamed) functions. In practice, they are often used as a way to inline a function definition, or to defer execution of a piece of code.\n\nThe general form of a lambda function is:\n\nlambda x: x\n\n<function __main__.<lambda>(x)>\n\n\nYou can call the function like this:\n\n(lambda x: x)(2)\n\n2\n\n\nincrement x\n\n(lambda x: x+1)(5)\n\n6\n\n\nsum two variables\n\nlambda x, y: x + y\n\n<function __main__.<lambda>(x, y)>"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "title": "NB: Lambda Functions",
    "section": "Assigned to a Variable",
    "text": "Assigned to a Variable\nEven though they don’t get a name, they can be assigned to variables.\nHere, a lambda function gets assigned to sum_two_vars.\n\nsum_two_vars = lambda x, y: x + y\n\n\nsum_two_vars(2,4)\n\n6\n\n\nCheck if a value is non-negative\n\nis_non_negative = lambda x: x >= 0\n\n\nis_non_negative(-9)\n\nFalse\n\n\n\nis_non_negative(0)\n\nTrue\n\n\nPackage first element and all data into tuple\n\npack_first_all = lambda x: (x[0], x)\n\n\ncasado = ('rice','beans','salad','plaintain','chicken') # a typical Costa Rican dish\n\npack_first_all(casado)\n\n('rice', ('rice', 'beans', 'salad', 'plaintain', 'chicken'))\n\n\nCheck for keyword “dirty”\n\nis_dirty = lambda txt: 'dirty' in txt\n\n\nkitchen_inspection = 'dirty dishes'\nis_dirty(kitchen_inspection)\n\nTrue\n\n\n\nkitchen_inspection = 'pretty clean!'\nis_dirty(kitchen_inspection)\n\nFalse\n\n\n**pass *args for unspecified number of arguments**\n\n(lambda *args: sum(args))(1,2,3)\n\n6"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "title": "NB: Lambda Functions",
    "section": "Using Lambda",
    "text": "Using Lambda\nLambda functions are often used in Pandas. We will discuss there use in more detail when we get to that topic."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "title": "NB: Recursion",
    "section": "Introduction",
    "text": "Introduction\nA recursive function is a function that calls itself.\nThis is weird, since it does not seem possible. How can a definition refer to itself?\nIn philosophy, this is expressed in the Barber’s Paradox:\n\nThe barber is the one who shaves all those, and those only, who do not shave themselves. Does the barber shave himself?\n\nFormally, it is a type of self-reference, like This sentence is false.\nA Cute Definition\nrecursion - the art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).\nSource: PerlDoc\n\nA Formal Definition\nIn mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:\nA simple base case (or cases): a terminating scenario that does not use recursion to produce an answer.\nA recursive step: a set of rules that reduces all successive cases toward the base case.\n\n\nAs Seen in Nature\nRecursion occurs naturally when a process applies a rule to itself successively.\nWe see this in fractals.\n\n\nInfinite Loops and Stack Overflows\nEvery recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.\nThe Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.\nThe call stack is where information is stored relating to the active subroutines in a program.\nThe call stack has a limited amount of available memory. When excessive memory consumption occurs on the call stack, it results in a stack overflow error.\n\n\nA Note of Caution\nSo, Recursion is cool, but is expensive and complicated.\nRecursive functions can usually be implemented by traditional loops."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "title": "NB: Recursion",
    "section": "Example: Computing Factorials",
    "text": "Example: Computing Factorials\nSource\nThe factorial of a number \\(n\\) is the product of all the integers from \\(1\\) to \\(n\\).\nFor example, the factorial of \\(5\\) (denoted as \\(5!\\)) is \\(1\\times2\\times3\\times4\\times5 = 120\\).\nLet’s implement this in code using a recursive function.\n\nRecursive Function\n\nn = 5\n\n\n##| tags: []\ndef factorial(x):\n    \"Finds the factorial of an integer using recursion\"\n    if x == 1: # Base condition\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\n##| tags: []\n%time factorial(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 7.87 µs\n\n\n120\n\n\n\n\nAs a while loop\n\ndef factorial_while(x):\n    \"Finds the factorial of an integer using a while loop\"\n    f = x\n    while x > 1:\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_while(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 6.44 µs\n\n\n120\n\n\n\n\nAs a for loop\n\ndef factorial_for(x):\n    \"Finds the factorial of an integer using a for loop\"\n    f = x\n    for i in range(1, x):\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_for(n)\n\nCPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 7.15 µs\n\n\n120\n\n\n\n\nCompare functions as \\(n\\) increases\n\nIncrease n to 50\n\nn = 50\n%time factorial(n)\n\nCPU times: user 30 µs, sys: 0 ns, total: 30 µs\nWall time: 33.4 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n%time factorial_while(n)\n%time factorial_for(n)\n\nCPU times: user 7 µs, sys: 1 µs, total: 8 µs\nWall time: 10.7 µs\nCPU times: user 7 µs, sys: 0 ns, total: 7 µs\nWall time: 9.06 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n\nIncrease n to 500\n\nn = 500\n\n\n%time factorial(n)\n\nCPU times: user 494 µs, sys: 0 ns, total: 494 µs\nWall time: 499 µs\n\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 85 µs, sys: 5 µs, total: 90 µs\nWall time: 93 µs\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 88 µs, sys: 0 ns, total: 88 µs\nWall time: 90.8 µs\n\n\nn\n\n\n\nIncrease n to 5000\n\nn = 5000\n%time factorial(n)\n\nRecursionError: maximum recursion depth exceeded in comparison\n\n\n\nfactorial_while(n)\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 4.93 ms, sys: 0 ns, total: 4.93 ms\nWall time: 4.94 ms\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 4.82 ms, sys: 0 ns, total: 4.82 ms\nWall time: 4.84 ms\n\n\n
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "title": "NB: Recursion",
    "section": "Example: The Fibonacci sequence",
    "text": "Example: The Fibonacci sequence\nFib(0) = 0 (base case 1)\nFib(1) = 1 (base case 2)\nFor all integers n > 1, Fib(n) = Fib(n − 1) + Fib(n − 2)\n\ndef Fibonacci(n):\n    \"Compute a Fibonacci Sequence using recursion\"\n\n    # If n is negative\n    if n < 0:\n        print(\"Incorrect input. Value must be 0 or greater.\")\n\n    # If n is 0\n    elif n == 0:\n        return 0\n\n    # If n is 1 or 2\n    elif n == 1 or n == 2:\n        return 1\n\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n\n\nn = 9\n\n\nFibonacci(9)\n\n34\n\n\n\nfor n in range(100):\n    if n > 0: print(\", \", end=\"\")\n    print(Fibonacci(n), end=\"\")\n\n\nAs a for loop\n\ndef fibber(r:int = 10):\n    \"\"\"\n    Computes a Fibonacci Sequence using a for loop. \n    Parameter r must be in integer > 3. Defaults to 10.\n    Returns a string as a comma-limited series.\n    \"\"\"\n    seq = [1,1,2] \n    kernel = lambda x, i: x[i-1] + x[i-2]\n    for n in range(3, r):\n        seq.append(seq[n-1] + seq[n-2])\n    return ', '.join([str(x) for x in seq])\n\n\nfibber(20)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "title": "NB: Recursion",
    "section": "Aside: A General Sequence Function",
    "text": "Aside: A General Sequence Function\nRecursive functions are often used to produce mathematical sequences, but since they have limits on depth, they are of limited use for this purpose.\nHere is a function that can combine many sequences using two sequence parameters: * The initial state of the sequence, represented as the list seq. * For example, in the Fibonacci sequence, seq is [1, 1, 2] * The function to apply to the sequence at each iteration, represneted as a lambda function with the arguments x and i for the the sequence list seq and the iteration number respectively. * For example, in the Fibonacci sequence the kernel function is lambda x, i: x[i-1] + x[i-2]\n\n##| tags: []\ndef sequencer(n:int = 10, seq=[1, 1, 2], kernel=lambda x, i: x[i-1] + x[i-2]):\n    \"\"\"\n    Computes a Sequence using a for loop. \n    \n    Parameter n in integer which must be > 3. Defaults to 10.\n    Parameter seq is as list in the initial state of the sequence. Must have at least one value. Defaults to Fibonacci [1,1,2]\n    Parameter kernel is the kernel function applied to the series at each iteration. x stands for the seq list, i to the iteration number. Defaults to lambda x, i: x[i-1] + x[i-2]\n    \n    Returns a string as a comma-limited series.\n    \"\"\"\n    \n    for i in range(len(seq), n): seq.append(kernel(seq, i))\n    return ', '.join([str(x) for x in seq])\n\n\nn = 8\n\n\n%time sequencer(n, [0], lambda x, i: i)\n\nThe series of positive integers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 1)\n\nThe series of even numbers\n\nsequencer(n, [2], lambda x, i: x[i-1] + 2)\n\nThe series of odd numbers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 2)\n\nThe series of Fibonacci numbers\n\nsequencer(n, [1,1,2], lambda x, i: x[i-1] + x[i-2])\n\nThe series of Squares\n\nsequencer(n, [2], lambda x, i: x[i-1]**2)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "title": "NB: Variable Scope",
    "section": "Overview",
    "text": "Overview\nA variable’s scope is the part of a program where it is visible.\n\nScope refers to the coding region, such as a function block, from which a particular Python object is accessible.\nVisible means available or usable to the code block in question.\nIf a variable is in scope to a function, it is visible the function.\nIf it is out of scope to a function, it is not visible the function.\n\nWhen a variable is defined inside of a function, it is not visible outside of the function. * We say such variables are local to the function. * They are also removed from memory when the function completes.\nWhen a variable is defined outside of any function in a script, it is visible to any function inside of the script * We say such variables are global to the functions in the file or context in which the variables are defined. * A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\nSometimes variable scope is called lexical scope.\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.\nThe concept is easier than it may look in the abstract. Let’s look at some examples where we vary the use of local and global definitions of x."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "title": "NB: Variable Scope",
    "section": "Lutz on Scoping",
    "text": "Lutz on Scoping\nHere’s an excerpt from Lutz, Chapter 17. Please read the whole thing.\nThe enclosing module is a global scope. Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\nThe global scope spans a single file only. Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. When you hear “global” in Python, think “module.”\nAssigned names are local unless declared global or nonlocal. By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\nAll other names are enclosing function locals, globals, or built-ins. Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\nEach call to a function creates a new local scope. Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\nAnd here is a nice visualization of scopes:\n\n\n\nCar with tinted glass\n\n\nPlease read Lutz, Chapter 17 for a good overview of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "title": "NB: Variable Scope",
    "section": "The Tinted Glass Metaphor",
    "text": "The Tinted Glass Metaphor\n\nSo, code regions within a program are like vehicles with tinted glass: * Passengers can see outside, but outsiders can’t see inside. * Passengers in a vehicle can let outsiders look in by lowering the window.\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "title": "NB: Variable Scope",
    "section": "Example 1",
    "text": "Example 1\nx defined outside a function but used inside of it\nIn the code below: * x is global and seen from inside the function.\n* a is local to the function. trying to print outside function throws error.\nNote that arguments are essentially locally defined variables.\n\nx = 10\n\ndef scope_func1(a):\n    out = x + a\n    return out\n\nThe following works because x is global and functions can access globals so long as they don’t reassign the variable name.\n\ny = scope_func1(6)\nprint(y)\n\nThe following fails because a local and not visible outside the function.\n\nprint(a)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "title": "NB: Variable Scope",
    "section": "Example 2",
    "text": "Example 2\nx defined both outside and inside function, and used inside the function\nThis function reassigns x, so it becomes local.\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\nx = 10 # Global\n\ndef scope_func2(a):\n\n    x = 20 # Local\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\ny = scope_func2(6)\nprint(y)\nprint('x from outside:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "title": "NB: Variable Scope",
    "section": "Example 2a",
    "text": "Example 2a\nHere we define x as an argument.\nThis has the same effect as defining it in the body of the function.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20): # Argment variables are local\n\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6)\nprint(y)\nprint('x from outside before function:', x)\n\nAs an argument, though, it can be assigned the value of the global.\nNevertheless, only the value is being passed between the global and local versions of x.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20):\n\n    print('x from inside before incremenet:', x)\n    x += 10\n    print('x from inside after incremenet:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6, x)\nprint(y)\nprint('x from outside after function:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "title": "NB: Variable Scope",
    "section": "Example 3",
    "text": "Example 3\nx defined both outside and inside function, and used inside the function in both global and local modes\nThis one is interesting. It fails, but it’s not clear why at first.\n\nx = 10\n\ndef scope_func3(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    x = 20 # Local use of x\n    print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3(6)\nprint('x from outside after local definition:', x)\n\nThe error can be fixed by referencing x as global inside function.\n\nx = 10\n\ndef scope_func4(a):\n    global x\n    \n    print('x from inside, before local definition:', x)\n    x = 20\n    print('x from inside, after local definition:', x)\n    \n    out = x + a\n    return out\n\n\nprint('x from outside, before local definition:', x)\ny = scope_func4(6)\nprint(y)\nprint('x from outside, after local definition:', x)\n\nNote that the two instances of the variable z coexist in the same script because of the rules of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "title": "NB: Variable Scope",
    "section": "Local / global conflicts",
    "text": "Local / global conflicts\nWhat will calling guess() do?\nHint: “If you assign a name in any way within a def, it will become a local to that function by default.” (Lutz)\n\nx = 10\n\ndef guess():\n    x += 10 \n    print(x)\n\n\nguess()\n\nConsider the following expression, which is the same as the unary operation inside of the function guess().\n\nx = x + 10\n\nThe x on the left is local, since it is being defined inside the function.\nHowever, the x on the right is assumed to already be defined, and so is global.\nIn effect, Python is presented with a contradiction and so throws an error.\nWe will see that R does not do this; it just goes with the global."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "title": "NB: Variable Scope",
    "section": "Nonlocal",
    "text": "Nonlocal\nIf a variable is assigned in an enclosing def, it is nonlocal to nested functions.\nThe nonlocal keyword is similar to global, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\nx = 10 # Global\ndef func1(): # Enclosing function\n    x = 20 # Local to function; \"Nonlocal\" to nested function\n    def func1a():\n        x = 30 # Local to nested function\n        print(x)\n    func1a()\n    print(x)\n\n\nprint(x)\nfunc1()\nprint(x)\n\n\nx = 10\ndef func2():\n    x = 20\n    def func2a():\n        nonlocal x\n        x = 30\n        print(x)\n    func2a()\n    print(x)\n\n\nprint(x) # 1\nfunc2()\nprint(x) # 4\n\n\nx = 10\ndef func3():\n    x = 20\n    def func3a():\n        global x\n        x = 30\n        print(x)\n    func3a()\n    print(x)\n\n\nprint(x)\nfunc3()\nprint(x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "title": "NB: Variable Scope",
    "section": "Namespaces",
    "text": "Namespaces\nDefinitions of scope make reference to namespaces. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means.\nIf you’ve never heard of namespaces, or are unsure of what they are, here’s a brief explanation.\nA namespace is a system that allows for a unique name to associated with each and every object in a Python program. * Remember that an object can be anything in Python, not just variable, e.g. a function or a class. * Python maintains namespaces internally as dictionaries.\nA good analogy to a namespace system is the file system on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\nAnother anology is in human names – personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\nFinally, another analogy is home addresses – house numbers and street names can be reused based on their “path” in the tree of geographic entities that include cities, states, nations, etc.\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace.\nNote that in each of these cases, the data structure is a directed acyclic graph (DAG), which is universal structure for organizing unique names."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "title": "NB: Variable Scope",
    "section": "Some Visualizations",
    "text": "Some Visualizations\n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\nSource: “Namespaces and Scope in Python” (GFG)."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "title": "NB: Functions Calling Functions",
    "section": "Basic Insight",
    "text": "Basic Insight\nFunctions contain any code, so they can contain functions. * Functions can call other functions * Functions can define new functions\nWe create functions that call functions in order to break a complex process into components. * Some functions focus on simple component processes * Other functions combine these into higher order processes * Some functions may be focused on computation, while others may be focused on interacting with users or data sources * We can think of this a division of labor, or “separation of concerns,” among functions\nWhen you create groups of functions, they often form natural groups that associated with a common process or task. * These function groups often share variables in addition to calling each ohter\nLet’s look at some examples to illustrate these points."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "title": "NB: Functions Calling Functions",
    "section": "Example 1: Converting Temperatures",
    "text": "Example 1: Converting Temperatures\nHere are three functions that work together to make a temperature converter.\nNotice how the last function integrates the first two.\n\ndef f_to_c(temp):  \n    \"\"\"\n    Converts F to C and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round((temp - 32) * (5/9))\n    \ndef c_to_f(temp):  \n    \"\"\"\n    Converts C to F and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round(temp * (9/5) + 32)\n    \ndef convert(temp, scale): \n    \"\"\"\n    Combines conversion functions into a two-way converter.\n    Expects a souce temp (int) and a target scale ('f' or 'c').\n    \"\"\"\n    if scale.lower() == \"c\":\n        return f_to_c(temp)  # function call to f_to_c\n    else:\n        return c_to_f(temp)  # function call to c_to_f\n\nNow, here is function that combines the above functions into a user-facing interface to the other functions.\n\n##| tags: []\ndef convert_app():\n    \"\"\"\n    Provides a user-interface to the the conversion functions.\n    \"\"\"\n    \n    # Get user input\n    temp = int(input(\"Enter a temperature: \"))                \n    scale = input(\"Enter the scale to convert to: (c or f) \")[0].lower()\n    \n    # Infer source scale, to be used in the output message\n    if scale == 'c':\n        current_scale = 'f'\n    else:\n        current_scale = 'c'\n    \n    # Do the conversion\n    converted = convert(temp, scale)\n    \n    # Print results for user\n    print(f\"{temp}{current_scale.upper()} is equal to {converted}{scale.upper()}.\")\n\n\nconvert_app()\n\nEnter a temperature:  45\nEnter the scale to convert to: (c or f)  f\n\n\n45C is equal to 113F.\n\n\n\nA More Pythonic Solution\nWe replace if/then statements with dictionary logic.\n\n## Put your logic in the data structure\nconverters = {\n    'c': lambda t: (t - 32) * (5/9),\n    'f': lambda t: t * (9/5) + 32\n}\n\n\ndef convert_app2():\n    \n    # Input from user\n    source_temp  = int(input(\"Enter a temperature: \"))                \n    target_scale = input(\"Enter the scale to convert to: (c or f) \")\n    \n    # Internal computations\n    target_temp  = converters[target_scale](source_temp)\n    # source_scale = list(set(converters.keys()) - set(target_scale))[0]\n    source_scale = (set(converters.keys()) - set(target_scale)).pop()\n    \n    # Output to user\n    print(source_temp, source_scale, \"converted becomes:\" , round(target_temp), target_scale)\n\n\nconvert_app2()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "title": "NB: Functions Calling Functions",
    "section": "Example 2: Counting Vowels",
    "text": "Example 2: Counting Vowels\n\n## Predicate functions - often used as helper functions that return True or False\n\ndef is_vowel(l):\n    if l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\":\n        return True  # if the letter is a vowel, return True\n    else:\n        return False # else, return False\n        \ndef num_vowels(my_string):\n    my_string = my_string.lower()\n    count = 0\n    for i in range(len(my_string)): # for each character\n        if is_vowel(my_string[i]):  # call function above\n            count += 1              # increment count if true\n    return count\n    \ndef vcounter():\n    my_str = input(\"Enter a string: \")\n    vcount = num_vowels(my_str)\n    print(f\"There are {vcount} vowels in the string.\")\n\n\nvcounter()\n\n\nA More Pythonic Solution\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\nvowel_count = lambda x: len([char for char in x.lower() if char in \"aeiou\"])\n\n\ntest_str = \"Whatever it is, it is what it is.\"\n\n\nvowel_count(test_str)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "title": "NB: Functions Calling Functions",
    "section": "Example 3: Calculating Tax",
    "text": "Example 3: Calculating Tax\nWe write two related functions: * One to compute the tax based on a gross pay and a tax rate. * One to compute the net pay using the previous function.\nIn addition, we want to write some functions that use these functions to interact with a user. * One to get the input value of the gross pay and print the tax. * One to print the net pay based on the previous function.\nNote the division of labor, or “separation of concerns”, in these functions: * Some do calculative work * Some do interactive work\nTo compute tax, we have these data:\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n\n\n\n\n\n\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\n\nIn the code below, we globalize any variables that are assigned in our functions.\n\n\nThis allows them to be shared by all the other functions.\n\n\nNote that this is effective when our global environment – the containing script – contains only these functions.\n\n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n\n\n\ndef compute_tax():\n    \"\"\"\n    Computes tax rate and applies to gross pay to get tax.\n    Expects gross_apy to be defined globally.\n    Adds tax_rate and tax to globals for use by other functins.\n    \"\"\"\n\n    global tax_rate, tax\n\n    # Get rate by lower bound\n    if gross_pay > 480:\n        tax_rate = .28\n    elif gross_pay > 240:\n        tax_rate = .15\n    else:\n        tax_rate = 0\n        \n    tax = gross_pay * tax_rate\n            \ndef compute_net_pay():\n    \"\"\"\n    Computes net pay based on globals produced by compute_tax().\n    Expects gross_pay and tax to be defined globally.\n    Adds net_pay to to globals.\n    \"\"\"\n    \n    global net_pay\n    \n    net_pay = gross_pay - tax\n\ndef get_tax():   \n    \"\"\"\n    Computes and prints tax based on user input.\n    Essentially a wrapper around compute_tax().\n    Adds gross_pay to globals.\n    \"\"\"\n    \n    global gross_pay\n    \n    gross_pay = int(input(\"Enter your gross pay in dollars: \"))                            \n    \n    compute_tax()\n    \n    print(f\"Based on a tax rate of {round(tax_rate * 100)}%, the tax you owe on ${gross_pay} is ${round(tax)}.\")\n    \ndef get_net_pay():\n    \"\"\"\n    Computes and prints net pay based on globals.\n    \"\"\"\n    \n    compute_net_pay()\n    \n    print(f\"Your take home (net) pay is ${round(net_pay)}.\")\n    \ndef do_all():\n    \"Runs both user-facing functions.\"\n    get_tax()\n    get_net_pay()\n\n\nget_tax()\n\n\nget_net_pay()\n\n\ndo_all()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "title": "NB: Functions Calling Functions",
    "section": "Concluding Observations",
    "text": "Concluding Observations\n\nNotice how each example has functions that build on each other.\nThese functions share both data and a general goal.\nThe fact that data and functions go together is the motivation for creating classes."
  },
  {
    "objectID": "modules/m05/m05-intro.html#topics",
    "href": "modules/m05/m05-intro.html#topics",
    "title": "M05 NumPy",
    "section": "Topics",
    "text": "Topics\n\nNumpy and its role in the Python data science ecosystem\nNumpy Arrays\nArray indexing, slicing, and broadcasting\nAggregation\nTiming the difference between NumPy and plain old Python"
  },
  {
    "objectID": "modules/m05/m05-intro.html#readings",
    "href": "modules/m05/m05-intro.html#readings",
    "title": "M05 NumPy",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nMcKinney 2017, Chapter 4: Numpy Basics\n\n\n\n\nOptional\n\n\nMcKinney 2017, Appendix A. Advanced NumPy: A.4 Broadcasting\n\n\nNumPy for Beginners (Official)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#numpy",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#numpy",
    "title": "NB: NumPy First Steps",
    "section": "NumPy",
    "text": "NumPy\n\nA new data structure\nEssentially, NumPy introduces a new data structure to Python — the n-dimensional array.\nAlong with it, it introduces a collection of functions and methods that take advantage of this data structure.\nThe data structure is designed to support the use of numerical methods: algorithmic approximations to the problems of mathematical analysis.\nNew Functions\nIt also provides a new way of applying functions to data made possible by the data structure – vectorized functions.\nVectorized functions replace the use of loops and comprehensions to apply a function to a set of data.\nIn addition, given the data structure, it provides a library of linear algebra functions.\nNew Data Types\nNumPy also introduces a bunch of new data types.\nPython for Science\nNumPy stands for “Numerical Python”.\nBecause numerical methods are so important to so many sciences, NumPy is the basis of what is called the scientific “stack” in Python, which consists of SciPy, Matplotlib, SciKitLearn, and Pandas.\nAll of these assume that you have some knowledge of NumPy.\nLet’s take a look at it."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "title": "NB: NumPy First Steps",
    "section": "Importing the Library",
    "text": "Importing the Library\n\nimport numpy as np\n\nNumPy is by widespread convention aliased as np."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "title": "NB: NumPy First Steps",
    "section": "The ndarray",
    "text": "The ndarray\nThe ndarray is a multidimensional array object.\nLet’s explore it some.\nFirst, let’s generate some fake data using NumPy’s built-a random number generator.\nNote that np.random.randn() samples from the “standard normal” distribution.\n\n# np.random.randn?\n\n\ndata = np.random.randn(2, 3)\n\n\ndata\n\narray([[ 0.72834379,  0.5874105 , -0.32733983],\n       [-0.57066835,  1.08009114, -1.56702285]])\n\n\n\ndata * 10\n\narray([[  7.2834379 ,   5.87410495,  -3.27339826],\n       [ -5.7066835 ,  10.80091141, -15.67022852]])\n\n\n\ndata + data\n\narray([[ 1.45668758,  1.17482099, -0.65467965],\n       [-1.1413367 ,  2.16018228, -3.1340457 ]])\n\n\n\ndata.shape\n\n(2, 3)\n\n\n\ndata.dtype\n\ndtype('float64')"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "title": "NB: NumPy First Steps",
    "section": "About Dimensions",
    "text": "About Dimensions\nThe term “dimension” is ambiguous. * Sometimes refers to the dimensions of things in the world, such as space and time. * Sometimes refers to the dimensions of a data structure, independent of what it represents in the world.\nNumPy dimensions are the latter, although they can be used to represent the former, as physicists do.\nThe dimensions of data structures are sometimes called axes.\nConsider this: Three-dimensional space can be represented as three columns in a two-dimensional table OR as three axes in a data cube."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Creating ndarrays",
    "text": "Creating ndarrays\nFrom a list:\n\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\narr1\n\narray([6. , 7.5, 8. , 0. , 1. ])\n\n\nFrom a list of lists:\n\ndata2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\narr2 = np.array(data2)\narr2\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\narr2.ndim\n\n2\n\n\n\narr2.shape\n\n(2, 4)\n\n\n\narr1.dtype\n\ndtype('float64')\n\n\n\narr2.dtype\n\ndtype('int64')\n\n\nInitializing with \\(0\\)s using a convenience function:\n\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nnp.zeros((3, 6))\n\narray([[0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.]])\n\n\n\nnp.empty((2, 3, 2))\n\narray([[[0., 0.],\n        [0., 0.],\n        [0., 0.]],\n\n       [[0., 0.],\n        [0., 0.],\n        [0., 0.]]])\n\n\nUsing .arange() (instead of range())\n\nnp.arange(15)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Data Types for ndarrays",
    "text": "Data Types for ndarrays\nUnlike any of the previous data structures we have seen in Python, ndarrays must have a single data type associated with them.\nHere we initialize a series of arrays as different data types (aka dtypes).\n\narr1 = np.array([1, 2, 3], dtype=np.float64)\narr1.dtype\n\ndtype('float64')\n\n\nNote that dtypes are defined by some constants attached to the NumPy object.\nWe can also refer to them as strings in some contexts.\nIn other words, in the context of the dtype argument, 'float64' can substitute for np.float64.\n\nnp.array([1, 2, 3], dtype='float64')\n\narray([1., 2., 3.])\n\n\n\narr2 = np.array([1, 2, 3], dtype=np.int32)\narr2.dtype\n\ndtype('int32')\n\n\nInteger arrays default to int64:\n\narr = np.array([1, 2, 3, 4, 5])\narr.dtype\n\ndtype('int64')\n\n\nSo you may want in use a more capacious type:\n\nfloat_arr = arr.astype(np.float64)\nfloat_arr.dtype\n\ndtype('float64')\n\n\nArrays can be cast:\n\narr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\narr\n\narray([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\n\n\nFrom floats to ints:\n\narr.astype(np.int32)\n\narray([ 3, -1, -2,  0, 12, 10], dtype=int32)\n\n\nFrom strings to floats:\n\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\nnumeric_strings.astype(float)\n\narray([ 1.25, -9.6 , 42.  ])\n\n\nNote that NumPy converts data types to make the array uniform:\n\nnon_uniform = np.array([1.25, -9.6, 42])\nnon_uniform, non_uniform.dtype\n\n(array([ 1.25, -9.6 , 42.  ]), dtype('float64'))\n\n\nRanges default to integers:\n\nint_array = np.arange(10)\n\n\nint_array\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nWe can use the dtype on one array to cast another:\n\ncalibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\nint_array.astype(calibers.dtype)\n\narray([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\n\n\nAnd here is an empty array of unsigned integers:\n\nempty_uint32 = np.empty(8, dtype='u4')\nempty_uint32\n\narray([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint32)\n\n\nNumPy Data Types\ni - integer\nb - boolean\nu - unsigned integer\nf - float\nc - complex float\nm - timedelta\nM - datetime\nO - object\nS - string\nU - unicode string\nV - fixed chunk of memory for other type ( void )\nData Type Hierarchy\nNumPy introduces 24 new fundamental Python types to describe different types of scalars.\nThese derive from the C programming language with which NumPy is built.\n\nSee the NumPy docs."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "title": "NB: NumPy First Steps",
    "section": "Element-wise Arithmetic",
    "text": "Element-wise Arithmetic\nNumPy arrays can be transformed with with arithmetic operations.\nThese are all element-wise operations.\nLet’s start with a 2D array.\n\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\narr\n\narray([[1., 2., 3.],\n       [4., 5., 6.]])\n\n\n\narr.shape\n\n(2, 3)\n\n\n\narr * arr\n\narray([[ 1.,  4.,  9.],\n       [16., 25., 36.]])\n\n\n\narr - arr\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\n1 / arr\n\narray([[1.        , 0.5       , 0.33333333],\n       [0.25      , 0.2       , 0.16666667]])\n\n\n\narr ** 0.5\n\narray([[1.        , 1.41421356, 1.73205081],\n       [2.        , 2.23606798, 2.44948974]])\n\n\nNow let’s compare two arrays.\n\narr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2\n\narray([[ 0.,  4.,  1.],\n       [ 7.,  2., 12.]])\n\n\n\narr2 > arr\n\narray([[False,  True, False],\n       [ True, False,  True]])\n\n\nBoolean arrays will prove to be very useful …"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "title": "NB: NumPy First Steps",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\nExample 1\n→ Editor’s Note, this jumps ahead to multi-dimensional indexing.\n\nfoo = np.random.randn(3,5)\n\n\nfoo\n\narray([[ 0.65002831,  0.46012775,  0.83902353, -0.57930057, -0.78375454],\n       [ 1.29259796, -1.16119504, -0.75869717, -0.39494693,  1.23975995],\n       [-0.35519155, -0.10677321, -0.16011541, -0.44558271, -2.14194658]])\n\n\n\nfoo.shape\n\n(3, 5)\n\n\n\nfoo[1:, :2]\n\narray([[ 1.29259796, -1.16119504],\n       [-0.35519155, -0.10677321]])\n\n\n\nfoo[1:, :2].shape\n\n(2, 2)\n\n\nWhy is this different?\n\nfoo[1:][:2]\n\narray([[ 1.29259796, -1.16119504, -0.75869717, -0.39494693,  1.23975995],\n       [-0.35519155, -0.10677321, -0.16011541, -0.44558271, -2.14194658]])\n\n\nBecause it operations in sequence, not simultaneously.\n\na = foo[1:]\na\n\narray([[ 1.29259796, -1.16119504, -0.75869717, -0.39494693,  1.23975995],\n       [-0.35519155, -0.10677321, -0.16011541, -0.44558271, -2.14194658]])\n\n\n\na[:2]\n\narray([[ 1.29259796, -1.16119504, -0.75869717, -0.39494693,  1.23975995],\n       [-0.35519155, -0.10677321, -0.16011541, -0.44558271, -2.14194658]])\n\n\nExample 2\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\narr[5]\n\n5\n\n\n\narr[5:8]\n\narray([5, 6, 7])\n\n\nSlices can be used to set values as well.\n\narr[5:8] = 12\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "title": "NB: NumPy First Steps",
    "section": "Views and Copies",
    "text": "Views and Copies\nNotice that if we assign a scalar to a slice, all of the elements of the slice get that value.\nThis is called broadcasting. We’ll look at this more later.\nAlso, notice that changes to slices are changes to the arrays they are slices of.\nThey are views, not copies. This is crucial.\nSee what happens when we change a view:\n\narr_slice = arr[5:8]\narr_slice\n\narray([12, 12, 12])\n\n\n\narr_slice[1] = 12345\narr\n\narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n           9])\n\n\n\narr_slice[:] = 64\n\n\narr_slice\n\narray([64, 64, 64])\n\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\nNumPy defaults to views rather than copies because copies are expensive and NumPy is designed with large data use cases in mind.\nIf you want a copy of a slice of an ndarray instead of a view, use .copy().\nHere’s an example:\n\narr_slice_copy = arr[5:8].copy()\n\n\narr_slice_copy\n\narray([64, 64, 64])\n\n\n\narr_slice_copy[:] = 99\n\n\narr_slice_copy\n\narray([99, 99, 99])\n\n\nNote how the original array is unchanged:\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "title": "NB: NumPy First Steps",
    "section": "Higher Dimensional Arrays",
    "text": "Higher Dimensional Arrays\nNumPy can create arrays in N dimensions.\nHere is a 2D array initialized from a list of lists.\n\narr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nIndexing into a dimension produces lower-order arrays.\n\narr2d[2]\n\narray([7, 8, 9])\n\n\n\narr2d[0][2]\n\n3\n\n\nSimplified notation: NumPy offers an elegant way to specify multidimensional indices and slices.\nInstead of x[a][b][c] you can write x[a,b,c].\n\narr2d[0, 2]\n\n3\n\n\nA nice visual of a 2D array\n\nTwo-Demensional Array Slicing\n\n3D arrays\n\narr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\n\narr3d.shape\n\n(2, 2, 3)\n\n\n\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nI find NumPy’s way of show the data a bit difficult to parse visually.\nHere is a way to visualize 3 and higher dimensional data:\n[ # AXIS 0                     AXIS 1 CONTAINS 2 ELEMENTS (arrays)\n    [ # AXIS 1                 EACH MEMBER OF AXIS 2 CONTAINS 2 ELEMENTS (arrays)\n        [1, 2, 3], # AXIS 2    EACH MEMBER OF AXIS 3 CONTAINS 3 ELEMENTS (integers)\n        [4, 5, 6]  # AXIS 2\n    ],  \n    [ # AXIS 1\n        [7, 8, 9], \n        [10, 11, 12]\n    ]\n]\nEach axis is a level in the nested hierarchy, i.e. a tree or DAG (directed-acyclic graph).\n\nEach axis is a container.\nThere is only one top container.\nOnly the bottom containers have data.\n\nOmit lower indices\nIn multidimensional arrays, if you omit later indices, the returned object will be a lower-dimensional ndarray consisting of all the data contained by the higher indexed dimension.\nSo in the 2 × 2 × 3 array arr3d:\n\narr3d[0] # The elements contained by the first row\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\nSaving data before modifying an array.\nYou can work with these lower dimensional arrays using views and copies.\n\nold_values = arr3d[0].copy() # Make a copy\narr3d[0] = 42                # Use a view to alter the original\narr3d                        # See result\n\narray([[[42, 42, 42],\n        [42, 42, 42]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nPutting the data back.\n\narr3d[0] = old_values\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nSimilarly, arr3d[1, 0] gives you all of the values whose indices start with (1, 0), forming a 1-dimensional array:\n\narr3d[1, 0]\n\narray([7, 8, 9])\n\n\n\nx = arr3d[1]\nx\n\narray([[ 7,  8,  9],\n       [10, 11, 12]])\n\n\n\nx[0]\n\narray([7, 8, 9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "title": "NB: NumPy First Steps",
    "section": "Indexing 2D arrays with slices",
    "text": "Indexing 2D arrays with slices\nWe demonstrate indexing in 2D arrays.\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\n\narr[1:6]\n\narray([ 1,  2,  3,  4, 64])\n\n\n\narr2d\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\narr2d[:2]\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\narr2d[:2, 1:]\n\narray([[2, 3],\n       [5, 6]])\n\n\n\narr2d[1, :2]\n\narray([4, 5])\n\n\n\narr2d[:2, 2]\n\narray([3, 6])\n\n\n\narr2d[:, :1]\n\narray([[1],\n       [4],\n       [7]])\n\n\n\narr2d[:2, 1:] = 0\narr2d\n\narray([[1, 0, 0],\n       [4, 0, 0],\n       [7, 8, 9]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Boolean Indexing",
    "text": "Boolean Indexing\nThis a crucial topic – it applies to Pandas and R.\nYou can pass a boolean representation of an array to the array indexer (i.e. the [] suffix) and it will return only those cells that are True.\nLet’s assume that we have two related arrays: * names which holds the names associated with the data in each row, or observations, of a table. * data which holds the data associated with each feature of a table.\nThere are \\(7\\) observations and \\(4\\) features.\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnames\n\narray(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')\n\n\n\ndata = np.random.randn(7, 4)\ndata\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\n\nnames.shape, data.shape\n\n((7,), (7, 4))\n\n\nA comparison operation for an array returns an array of booleans.\nLet’s see which names are 'Bob':\n\nnames == 'Bob'\n\narray([ True, False, False,  True, False, False, False])\n\n\nNow, this boolean expression can be passed to an array indexer to the data:\n\ndata[names == 'Bob']\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674]])\n\n\nAlong the second axis, we can use a slice to select data.\n\ndata[names == 'Bob', 2:]\n\narray([[-0.91994934, -0.03050469],\n       [ 0.03409116, -2.25227674]])\n\n\n\ndata[names == 'Bob', 3]\n\narray([-0.03050469, -2.25227674])\n\n\nIf you know SQL, this is like the query:\nSELECT col3, col4 FROM data WHERE name = 'Bob'"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "title": "NB: NumPy First Steps",
    "section": "Negation",
    "text": "Negation\nHere are some examples of negated boolean operations being applied.\n\nbix = names != 'Bob'\nbix\n\narray([False,  True,  True, False,  True,  True,  True])\n\n\n\ndata[bix]\n\narray([[-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\n\ndata[~bix] # Back to Bob\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674]])\n\n\n\ndata[~(names == 'Bob')]\n\narray([[-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\nNote that we don’t use not but instead the tilde ~ sign to negate (flip) a value.\nNor do we use and and or; instead we use & and |.\nAlso, expressions join by these operators need to be in parentheses.\n\nmask = (names == 'Bob') | (names == 'Will')\nmask\ndata[mask]\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136]])\n\n\n\ndata[data < 0] = 0\ndata\n\narray([[0.        , 0.        , 0.        , 0.        ],\n       [0.        , 0.92567072, 0.        , 0.        ],\n       [1.77215664, 0.        , 1.95592254, 1.29936488],\n       [2.1290257 , 0.8816478 , 0.03409116, 0.        ],\n       [0.49113167, 0.        , 0.32058921, 1.04615136],\n       [0.81208885, 1.62150232, 0.        , 0.67404131],\n       [0.        , 0.        , 1.32144434, 1.56994506]])\n\n\n\ndata[names != 'Joe'] = 7\ndata\n\narray([[7.        , 7.        , 7.        , 7.        ],\n       [0.        , 0.92567072, 0.        , 0.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [0.81208885, 1.62150232, 0.        , 0.67404131],\n       [0.        , 0.        , 1.32144434, 1.56994506]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Fancy Indexing",
    "text": "Fancy Indexing\nIn so-call fancy indexing, we use array index numbers to access data.\nThis can be used to sub-select and re-order data from an array.\nWe pass a list of item numbers, instead of an integer or integer range with :, to the indexer.\n\narr = np.empty((8, 4))\nfor i in range(8):\n    arr[i] = i\narr\n\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\n\n\nThe following says Select rows 4, 3, 0, and 6, in that order.\n\narr[[4, 3, 0, 6]]\n\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [0., 0., 0., 0.],\n       [6., 6., 6., 6.]])\n\n\nAnd we can go backwards.\n\narr[[-3, -5, -7]]\n\narray([[5., 5., 5., 5.],\n       [3., 3., 3., 3.],\n       [1., 1., 1., 1.]])\n\n\nWe can use lists to perform some complex indexing.\n\narr = np.arange(32).reshape((8, 4))\narr\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\n\n\n\narr[[1, 5, 7, 2], [0, 3, 1, 2]]  # Grab rows, then select columns from each row\n\narray([ 4, 23, 29, 10])\n\n\n\narr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] # Grab rows, then reorder columns \n\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "title": "NB: NumPy First Steps",
    "section": "Transposing Arrays and Swapping Axes",
    "text": "Transposing Arrays and Swapping Axes\nTransposing is a special form of reshaping which similarly returns a view on the underlying data without copying anything.\nArrays have the transpose method and also the special T attribute:\n\narr = np.arange(15).reshape((3, 5))\narr\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n\n\narr.T\n\narray([[ 0,  5, 10],\n       [ 1,  6, 11],\n       [ 2,  7, 12],\n       [ 3,  8, 13],\n       [ 4,  9, 14]])\n\n\nTransposing is often used when computing the dot product between two arrays.\nHere’s an example.\n\narr = np.random.randn(6, 3)\narr\n\narray([[-0.71192017,  1.12793945,  0.00398408],\n       [-0.33313537, -0.05308562,  0.73532491],\n       [-1.34038679, -0.6211279 , -1.72999099],\n       [ 0.41464889,  0.31148611, -1.61275124],\n       [ 0.34175606, -0.23790281, -0.37332351],\n       [ 1.01792075, -0.5389869 ,  1.46791149]])\n\n\n\nnp.dot(arr.T, arr)\n\narray([[ 3.73933981, -0.45355983,  2.76896447],\n       [-0.45355983,  2.10499356, -0.16471567],\n       [ 2.76896447, -0.16471567,  8.42868857]])\n\n\nFor higher dimensional arrays, transpose will accept a tuple of axis numbers to permute the axes.\nWarning – this can get confusing to conceptualize and visualize!\n\narr = np.arange(16).reshape((2, 2, 4))\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.transpose((1, 0, 2))\n\narray([[[ 0,  1,  2,  3],\n        [ 8,  9, 10, 11]],\n\n       [[ 4,  5,  6,  7],\n        [12, 13, 14, 15]]])\n\n\nSimple transposing with .T is just a special case of swapping axes. ndarray has the method swapaxes which takes a pair of axis numbers:\n\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.swapaxes(1, 2)\n\narray([[[ 0,  4],\n        [ 1,  5],\n        [ 2,  6],\n        [ 3,  7]],\n\n       [[ 8, 12],\n        [ 9, 13],\n        [10, 14],\n        [11, 15]]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "title": "NB: NumPy First Steps",
    "section": "Universal Functions",
    "text": "Universal Functions\nA universal function, or ufunc, is a function that performs elementwise operations on data in ndarrays. You can think of them as fast vectorized wrappers for simple functions that take one or more scalar values and produce one or more scalar results.\nMany ufuncs are simple elementwise transformations, like sqrt or exp:\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.sqrt(arr)\n\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\n\n\nnp.exp(arr)\n\narray([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03])\n\n\n\nx = np.random.randn(8)\nx\n\narray([-0.81849005, -0.03252903, -0.78588415, -0.75569246,  0.28011989,\n       -0.07210453, -1.33721432,  0.57725791])\n\n\n\ny = np.random.randn(8)\ny\n\narray([ 0.45964976,  0.2479025 ,  0.655078  , -0.16776598,  1.81773551,\n       -0.568098  ,  0.01841105,  0.64186879])\n\n\n\nnp.maximum(x, y)\n\narray([ 0.45964976,  0.2479025 ,  0.655078  , -0.16776598,  1.81773551,\n       -0.07210453,  0.01841105,  0.64186879])\n\n\n\narr = np.random.randn(7) * 5\narr\n\narray([-1.07243891,  0.06744552, -5.00862819, -2.07837886,  3.17212965,\n        5.69620434, -1.53635927])\n\n\n\nremainder, whole_part = np.modf(arr)\nremainder\n\narray([-0.07243891,  0.06744552, -0.00862819, -0.07837886,  0.17212965,\n        0.69620434, -0.53635927])\n\n\n\nwhole_part\n\narray([-1.,  0., -5., -2.,  3.,  5., -1.])\n\n\n\narr\n\narray([-1.07243891,  0.06744552, -5.00862819, -2.07837886,  3.17212965,\n        5.69620434, -1.53635927])\n\n\n\nnp.sqrt(arr)\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_25317/983116409.py:2: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr)\n\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\n\nnp.sqrt(arr, arr)\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_25317/1230165595.py:2: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr, arr)\n\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\n\narr\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\nnan is a special value in NumPy."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "title": "NB: NumPy Continued",
    "section": "Quick Refresher on Shape",
    "text": "Quick Refresher on Shape\nThe shape of an array is represented a tuple, e.g. (n, m) for a 2D array.\n\nThe length of the tuple is number of dimensions (i.e. axes).\nThe values of the tuple are the number of elements in each dimension (axis).\n\nConsider the array foo:\n\nimport numpy as np\n\n\nfoo = np.ones((6,4))\n\n\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nIt was created with the \\(2\\) dimensions. * The first dimension, axis 0, has \\(6\\) elements. In this case, these elements are arrays. * The second dimension, axis 1, has \\(4\\) elements. Its elements are scalars (numbers in this case).\nThe shape of foo[0] is \\(4\\). It contains \\(1\\) axis with \\(4\\) elements.\n\nfoo[0], foo[0].shape\n\n(array([1., 1., 1., 1.]), (4,))\n\n\nIt has a shape of \\(1\\) and not \\(4 \\times 1\\) because it is a vector, not a matrix.\nSO, there is a difference between a vector and a 1-column matrix.\n\nReshaping\nIf we want to make it into a 1-column matrix, we need to reshape it using np.reshape().\nNote that the first value of the shape argument is \\(-1\\). This means use the length of the vector that is passed to it.\n\n## np.reshape?\n\n\nfoo2 = np.reshape(foo[0], (-1, 1))\n\n\nfoo2, foo2.shape\n\n(array([[1.],\n        [1.],\n        [1.],\n        [1.]]),\n (4, 1))\n\n\nWhen indexing an array, think of the positions of the comma-delimitted tuple as the axis.\nThe values are the element offsets in the containing array. The\n\nfoo[2:, 2:]\n##   ^   ^ \n##   0   1  <- AXIS NUMBER\n\narray([[1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.]])\n\n\n\n\nExample: The Normal Equation\nSometimes, you need to convert vectors into 1-column matrices to make certain linear algebraic functions work.\nConsider two random variables, \\(x\\) and \\(y\\).\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nWe can fit a regression line using the normal equation, which appears in this week’s homework.\n\\(\\begin{aligned} \\hat\\beta_i=(x^Tx)^{−1}x^Ty \\end{aligned}\\)\nHere is a standward way of expressing it in NumPy:\n\nget_beta1 = lambda x, y: (np.linalg.inv(x.T.dot(x))) * (x.T.dot(y))\n\nHowever, it will fail if we pass it our two variables, x and y.\nThe reason is that it expects x to be a matrix, since it is designed to handle n-dimension predictor variables, usually represented as \\(\\textbf{X}\\).\n\nget_beta1(x, y)\n\nLinAlgError: 0-dimensional array given. Array must be at least two-dimensional\n\n\nThe revised function will work with a vector as x:\n\\(\\hat\\beta_i = \\large\\frac{1}{x^Tx} \\small(x^Ty)\\)\n\nget_beta2 = lambda x, y: (1 / x.T.dot(x)) * (x.T.dot(y))\n\n\nget_beta2(x, y)\n\n0.025226057106433126\n\n\nWe can fix the problem in the general case by converting our vector into a matrix using np.reshape().\n\nx_as_matrix = np.reshape(x, (-1, 1))\n\n\nget_beta1(x_as_matrix, y)\n\narray([[0.02522606]])\n\n\n\nget_beta1(x_as_matrix, y)[0][0]\n\n0.025226057106433126\n\n\n\nget_beta1(x_as_matrix, y)[0][0] == get_beta2(x, y)\n\nTrue\n\n\nOne take-away here is that there is a difference betweek a scalar value and a 1 x 1 array."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "title": "NB: NumPy Continued",
    "section": "Broadcasting",
    "text": "Broadcasting\nWhat happens when you try to perform an element-wise operation on two arrays of different shape?\nNumPy will convert a low-dimensional array into a high-dimensional array to allow the operation to take place.\nThis is called broadcasting.\nLet’s look at at our array foo:\n\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nIf we multiply it by 5, the scalar is converted into an array of the same shape as foo with the value 5 broadcast to populate the entire array.\n\nfoo * 5\n\narray([[5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.]])\n\n\nIf we want to multiply an array by a vector, the vector is broadcast to become a 2D array.\n\nfoo * np.array([5, 10, 6, 8])\n\narray([[ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.]])\n\n\nNote that NumPy can’t always make the adjustment:\n\nfoo * np.array([5, 10])\n\nValueError: operands could not be broadcast together with shapes (6,4) (2,)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "title": "NB: NumPy Continued",
    "section": "Array-Oriented Programming",
    "text": "Array-Oriented Programming\nUsing NumPy arrays enables you to express many kinds of data processing tasks as concise array expressions without writing loops.\nThis practice of replacing explicit loops with array expressions is referred to by some people as vectorization.\nVectorized array operations are often significantly faster than their pure Python equivalents.\nThey are also visually concise and elegant, although loops have the virtue of visualizing what’s under the hood in an algorithm."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "title": "NB: NumPy Continued",
    "section": "Expressing Conditional Logic as Array Operations",
    "text": "Expressing Conditional Logic as Array Operations\n\nnp.where()\nThe np.where function is a vectorized version of the ternary expression x if condition else y.\nSuppose we had a boolean array and two arrays of values:\n\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\n\nresult = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]\n\n\nresult\n\n[1.1, 2.2, 1.3, 1.4, 2.5]\n\n\nHere is the vectorized version:\n\nresult = np.where(cond, xarr, yarr)\n\n\nresult\n\narray([1.1, 2.2, 1.3, 1.4, 2.5])\n\n\n\narr = np.random.randn(4, 4)\n\n\narr\n\narray([[-0.07558452,  0.06060905,  0.08395713, -0.50584862],\n       [-1.02703874, -2.08227842, -0.70058386,  0.42922211],\n       [ 1.65264793, -0.0081504 , -0.88014697,  0.53720441],\n       [ 0.98719467, -2.26285173,  0.51148161, -0.1798714 ]])\n\n\n\narr > 0\n\narray([[False,  True,  True, False],\n       [False, False, False,  True],\n       [ True, False, False,  True],\n       [ True, False,  True, False]])\n\n\n\nnp.where(arr > 0, 2, -2)\n\narray([[-2,  2,  2, -2],\n       [-2, -2, -2,  2],\n       [ 2, -2, -2,  2],\n       [ 2, -2,  2, -2]])\n\n\n\nnp.where(arr > 0, 2, arr) # set only positive values to 2\n\narray([[-0.07558452,  2.        ,  2.        , -0.50584862],\n       [-1.02703874, -2.08227842, -0.70058386,  2.        ],\n       [ 2.        , -0.0081504 , -0.88014697,  2.        ],\n       [ 2.        , -2.26285173,  2.        , -0.1798714 ]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "title": "NB: NumPy Continued",
    "section": "Mathematical and Statistical Methods",
    "text": "Mathematical and Statistical Methods\nStatistical computations are aggregate functions apply to vectors within an array.\nIn a 2D array, they can be applied to rows or columns, i.e. axis \\(0\\) or axis \\(1\\).\nLet’s create an array of random values. We can think of it is a table of observations and random variables.\n\narr = np.random.randn(5, 4)\n\n\narr\n\n\n.mean()\n\narr.mean()\n\n\nnp.mean(arr)\n\n\narr.mean(axis=1)\n\n\narr.mean(axis=0)\n\n\n\n.sum()\n\narr.sum()\n\nRow wise aggregration\n\narr.sum(axis=0)\n\n\narr.mean(axis=1)\n\nColumn-wise aggregration\n\n\n.cumsum()\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n\n\narr.cumsum()\n\n\narr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n\n\narr\n\n\narr.cumsum(axis=0)\n\n\narr.cumprod(axis=1)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "title": "NB: NumPy Continued",
    "section": "Methods for Boolean Arrays",
    "text": "Methods for Boolean Arrays\n\n.sum()\nSince booleans are \\(0\\)s and \\(1\\), we can sum them to get a total truth count.\n\narr = np.random.randn(100)\n(arr > 0).sum() # Number of positive values\n\n\nbools = np.array([False, False, True, False])\n\n\n\n.any()\n\nbools.any()\n\n\n\n.all()\n\nbools.all()"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "title": "NB: NumPy Continued",
    "section": "Sorting",
    "text": "Sorting\n\n.sort()\n\narr = np.random.randn(6)\n\n\narr\n\n\narr.sort()\n\n\narr\n\n\narr = np.random.randn(5, 3)\n\n\narr\n\n\narr.sort(1)\n\n\narr\n\n\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))] # 5% quantile\n\n\n0.05 * len(large_arr)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "title": "NB: NumPy Continued",
    "section": "Unique and Other Set Logic",
    "text": "Unique and Other Set Logic\n\nnp.unique()\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnp.unique(names)\n\n\nsorted(set(names))\n\n\nints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\nnp.unique(ints)\n\n\n\nnp.in1d()\nTests whether each element of a 1-D array is also present in a second array.\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])\nnp.in1d(values, [2, 3, 6])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "title": "NB: NumPy Continued",
    "section": "File Input and Output with Arrays",
    "text": "File Input and Output with Arrays\n\nnp.save()\nSave an array to a binary file in NumPy .npy format.\nAutomatically adds the .npy file extension.\n\narr = np.arange(10)\nnp.save('some_array', arr)\n\n\n\nnp.load()\n\nnp.load('some_array.npy')\n\n\n\nnp.savetxt()\nSave an array to a text file.\n\n## np.savetxt?\n\n\nnp.savetxt('some_array.txt', arr)\n\n\n## !more some_array.txt\n\n\n\nnp.savez()\nSave several arrays into a single file in uncompressed .npz format.\n\nnp.savez('array_archive.npz', a=arr, b=arr)\n\n\narch = np.load('array_archive.npz')\narch['b']\n\n\nnp.savez_compressed('arrays_compressed.npz', a=arr, b=arr)\n\nClean up …\n\n!rm some_array.npy\n!rm some_array.txt\n!rm array_archive.npz\n!rm arrays_compressed.npz"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "title": "NB: NumPy Continued",
    "section": "Linear Algebra",
    "text": "Linear Algebra\n\n.dot()\nDot product of two arrays. Specifically, - If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation). - If both a and b are 2-D arrays, it is matrix multiplication, but using matmul() or a @ b is preferred. - If either a or b is 0-D (scalar), it is equivalent to multiply() and using numpy.multiply(a, b) or a * b is preferred. - If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b. - If a is an N-D array and b is an M-D array (where M>=2), it is a sum product over the last axis of a and the second-to-last axis of b:\n    dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])\n\nx = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])\n\n\nx, y\n\n\ny\n\n\nx.dot(y)\n\n\nnp.dot(x, y)\n\n\nnp.dot(x, np.ones(3))\n\nIn NumPy, the @ operator means matrix multiplication.\n\nx @ np.ones(3)\n\n\n\nnp.linalg.inv()\n\nfrom numpy.linalg import inv, qr\nX = np.random.randn(5, 5)\nmat = X.T.dot(X)\ninv(mat)\n\n\nmat.dot(inv(mat))\nq, r = qr(mat)\n\n\nr"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "title": "NB: NumPy Continued",
    "section": "Pseudorandom Number Generation",
    "text": "Pseudorandom Number Generation\n\nnp.random.normal()\n\nsamples = np.random.normal(size=(4, 4))\nsamples\n\n\n\n\nfrom random import normalvariate\nN = 1000000\n%timeit samples = [normalvariate(0, 1) for _ in range(N)]\n%timeit np.random.normal(size=N)\n\n\nnp.random.seed(1234)\n\n\nrng = np.random.RandomState(1234)\n\n\nrng.randn(10)\n\n\n\nExample: Random Walks\nLet simulate a random walk. The walk will be represented as a vector.\nWe’ll do it first as loop, then with vectorization.\nLoops\n\nimport random\nposition = 0\nwalk = [position] # initialize the walk\nsteps = 1000\nfor i in range(steps):\n    step = 1 if random.randint(0, 1) else -1  # Coin toss\n    position += step\n    walk.append(position)\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.figure()\nplt.plot(walk[:100]);\n\nVectors\n\nnp.random.seed(12345)\n\n\nnsteps = 1000\ndraws = np.random.randint(0, 2, size=nsteps)\nsteps = np.where(draws > 0, 1, -1)\nwalk2 = steps.cumsum()\n\n\nplt.plot(walk[:100]);\n\n\nwalk2.min(), walk2.max()\n\n\n\nSimulating Many Random Walks at Once\n\nnwalks = 5000\nnsteps = 1000\n\n\ndraws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1\nsteps = np.where(draws > 0, 1, -1)\nwalks = steps.cumsum(1)\n\n\ndraws\n\n\nwalks\n\n\nwalks.max(), walks.min()\n\n\nhits30 = (np.abs(walks) >= 30).any(1)\nhits30\n\n\nhits30.sum() # Number that hit 30 or -30\n\n\ncrossing_times = (np.abs(walks[hits30]) >= 30).argmax(1)\ncrossing_times.mean()\n\n\nsteps = np.random.normal(loc=0, scale=0.25, size=(nwalks, nsteps))\n\nFeel free to experiment with other distributions for the steps other than equal-sized coin flips. You need only use a different random generator method, like standard_normal to generate normally distributed steps with some mean and standard deviation:\n\ndraws = 0.25 * rng.standard_normal((nwalks, nsteps)) # Walks: observations, Steps: features\n\n\nsample_walk = np.random.choice(len(draws))\nplt.plot(draws[sample_walk])\nplt.title(f\"Walk #{sample_walk}\");"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-time",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-time",
    "title": "NB: Python Timing Experiment",
    "section": "Using time",
    "text": "Using time\nOne way to get the runtime of a code block is to use the time module.\nAbout time\nThe time module provides a number of functions to get and compute time.\nThe simplest function is time(), which just returns the number of seconds elapsed since the Epoch.\nThe Epoch is 00:00:00 UTC on 1 January 1970, excluding leapseconds.\nIt corresponds roughly to when Unix was invented.\n\nfrom time import time\n\n\nt0 = time()\n\nfor i in range(10):\n    print(i, end=' ')\n\nt1 = time()\n\ndelta_t = t1 - t0\n\n0 1 2 3 4 5 6 7 8 9 \n\n\n\nprint('t0 =', t0)\nprint('t1 =', t1)\nprint('runtime:', delta_t)\n\nt0 = 1663428793.540521\nt1 = 1663428793.541329\nruntime: 0.0008080005645751953"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "title": "NB: Python Timing Experiment",
    "section": "Using timeit",
    "text": "Using timeit\nTo get a better measure of runtime, we can use timeit, which measures timing across many runs.\nNote that timeit() will return the runtime across ALL runs. To get the mean runtime, you need to divide by the number of runs.\ntimeit() works by evaluating code blocks written as strings.\n\nfrom timeit import timeit\n  \nNUM_RUNS = 100\n\nDefine code blocks to compare.\n\nloop_code = ''' \nvals = []\nfor i in range(1, 100001):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n'''\n\nlistcomp_code = ''' \nvals = [i*-1 for i in range(1,100001) if i % 2 == 1 ]\n'''\n\nPass code block strings to timeit functions.\n\nloop_mean_time = timeit(stmt = loop_code, number = NUM_RUNS) / NUM_RUNS\nlistcomp_mean_time = timeit(stmt = listcomp_code, number = NUM_RUNS) / NUM_RUNS\n\nPrint the results\n\nt_diff = loop_mean_time / listcomp_mean_time\nprint('loop =', loop_mean_time)\nprint('comp =', listcomp_mean_time)\nprint('loop/list =', t_diff)\nprint('list/loop =', 1/t_diff)\n\nloop = 0.011182495189999885\ncomp = 0.00927148506000009\nloop/list = 1.2061169400190757\nlist/loop = 0.8291070018336566"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "title": "NB: Python Timing Experiment",
    "section": "Using Magic",
    "text": "Using Magic\nInstead of calling time and timeit directly, we can use the so-called magic commands.\nMagic commands are % or %% prefixed commands that work in Jupyter notebooks and other IPython environments.\n% commands apply to single lines; they go at the beginning of the line.\n%% commands apply to cell blocks; they go at the top of the cell.\nMagic commands can take arguments. For more info, see * Chapter 3 in Wes McKinney’s Python for Data Analysis. * The official documentation\nPlacing %%timeit or %%time at the top of a cell will appy these functions to the cell block.\nPlacing %timeit or %time as the first item on a line of code will apply the to a single line.\nTypes of Time\n\nWall clock time measures how much time has passed, as if you were looking at the clock on your wall.\nCPU time refers to how many seconds the CPU was actually busy.\n\n\nimax = 10000\n\nUsing time to compare loop and comprehension\n\n%%time\n\nvals = []\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\nCPU times: user 1.69 ms, sys: 35 µs, total: 1.72 ms\nWall time: 1.73 ms\n\n\n\n%time vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\nCPU times: user 940 µs, sys: 32 µs, total: 972 µs\nWall time: 975 µs\n\n\nUsing timeit to compare loop and comprehension\n\n%%timeit\n\nvals = []\nimax = 10000\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\n1.08 ms ± 88 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\nvals[:10]\n\n[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\n\n\n\n%timeit vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\n749 µs ± 3.32 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "title": "NB: Basic File I/O",
    "section": "Open Files with open()",
    "text": "Open Files with open()\nLet’s open a sample CSV file, biostats.csv.\n\nThis has some biometric statistics for a group of office workers.\nThere are 18 records, recording Name, Sex, Age, Height, Weight\nThere is an initial header line.\nThis file was downloaded from https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html and modified slightly.\n\n\nsrc_file_name = \"./sample_data_files/biostats.csv\"\n\nWe call the open() function and pass it two parameters: * The name of the file we want to open. * The mode in which the file is opened. It defaults to r which means open for reading in text mode. Other common values are: * w for writing (truncating the file if it already exists) * x for creating and writing to a new file * a for appending\nThe returns a file object whose type depends on the mode and through which the standard file operations such as reading and writing are performed. So, to read from the file, you need to have specified type r and to write you need to have specified w.\nThe file object is an iterator.\nFor more info, check out the Python docs or run open? from a code cell.\nNote, we sometimes call the file object a file “handle.”\n\n## open?\n\n\nfile_handle = open(src_file_name, 'r')\n\n.read() reads in the file as one long string.\n\nfile_as_big_string = file_handle.read()\n\n\nfile_as_big_string[:1000]\n\nSince the file object is an iterator, we can’t get the string again from the object.\n\nfile_as_big_string = file_handle.read() # Try reading from the handle again\nfile_as_big_string[:1000] # Nothing there since the iterator is exhausted\n\nSo, let’s create a new handle, read in the contents again, and then parse our string by newlines using .split(\"\\n\").\n\nfile_handle = open(\"./sample_data_files/biostats.csv\", 'r')\nfile_as_big_string = file_handle.read()\nfile_as_big_string.split(\"\\n\")\n\nA short-cut to this process is to call the .readlines() method, which returns a pre-made list of lines.\nNote that the newlines are preserved in this case.\n\nfile_handle = open(src_file_name, 'r')\nfile_as_list_of_strings = file_handle.readlines()\n\n\nfile_as_list_of_strings\n\nFile objects should be closed when you are done with them.\n\nfile_handle.close()"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "title": "NB: Basic File I/O",
    "section": "Use a with block",
    "text": "Use a with block\n… to automatically open and close the file i/o object\nThere is a better way to handle objects that need to be closed.\nOther examples of such objects are database handles.\nwith will automatically open and close the file handle.\n\nwith open(src_file_name, 'r') as infile:\n    file_as_list = infile.readlines()\n\n\nfile_as_list"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "title": "NB: Basic File I/O",
    "section": "Convert into a 2D list",
    "text": "Convert into a 2D list\nLet’s covert our list of strings to a list of lists, the former being the rows of data table and the latter the cells.\n\n## %%time\nlist_2d = []\nwith open(src_file_name, 'r') as infile:\n    for line in infile.readlines():\n        row = line.rstrip().split(\",\") # Note the use of rstrip()\n        list_2d.append(row)\n\n\nlist_2d\n\nNote that we now have do something with the column names and handle formating and casting each cell."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "title": "NB: Basic File I/O",
    "section": "Using a list comprehension",
    "text": "Using a list comprehension\nWe can replace the entire code block above nested list comprehensions.\nRemember, you can put any expression into the first part of a comprehension, even another comprehension.\n\nlist_2d = [[cell.strip() for cell in line.rstrip().replace('\"', '').split(\",\")] \n        for line in open(src_file_name, 'r').readlines()]\n\n\nlist_2d"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "title": "NB: Basic File I/O",
    "section": "Converting to Numpy",
    "text": "Converting to Numpy\n\nimport numpy as np\n\nNumpy arrays must be of the same data types, and it also has no concept of column names, so we remove this row from our data.\n\ncol_names = list_2d[0]\n\n\ncol_names\n\n\nnp_matrix = np.array(list_2d[1:])\n\n\nnp_matrix\n\nHere we demonstrate slicing along both dimensions."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "title": "NB: Basic File I/O",
    "section": "Array Slices",
    "text": "Array Slices\n\nnp_matrix[:2, :2]"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "title": "NB: Basic File I/O",
    "section": "Converting Data Types",
    "text": "Converting Data Types\nLet’s try to convert the data types of the numeric columns from strings to integers. One thing we might do is the following:\n\nnp_matrix[:, 2:5].astype(int)\n\nWe see that the strings are converted to integers.\nSo, let’s try to save the conversion results to the original array:\n\nnp_matrix[:, 2:5] = np_matrix[:, 2:5].astype(int)\n\n\nnp_matrix\n\nWhat happened?"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "title": "NB: Basic File I/O",
    "section": "Some Difficulties",
    "text": "Some Difficulties\nIt is pretty easy to import CSV files this way, but there are many difficulties you are likely to encounter if you use this as your default pattern for importing data. Here are just a few: - Not all sources are well-formed. They may have delimitters that are complex to parse, and the the data themselve may be hard to parse. - You have to keep the column names in a separate list or vector and then associate them with the data if and when necessary. - You have to convert each column vector into its appropriate data type yourself. Or, you have to create separate 2D arrays for each collection of columns with a common data type. This process also invovles human inspection of the file, as opposed to have a program try to figure it out for you.\nFor these reasons, other tools such as Pandas were created to make the work of a data scientist a bit easier and more productive."
  },
  {
    "objectID": "modules/m06/m06-intro.html#topics",
    "href": "modules/m06/m06-intro.html#topics",
    "title": "M06 Pandas",
    "section": "Topics",
    "text": "Topics\n\nIntroduce Pandas and its relationship to NumPy\nUnderstand difference between Series and DataFrames\nUnderstand role of indexes in Pandas\nReview fundamental methods in Pandas"
  },
  {
    "objectID": "modules/m06/m06-intro.html#readings",
    "href": "modules/m06/m06-intro.html#readings",
    "title": "M06 Pandas",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nMcKinney 2017, Chapter 5: Getting Started with Pandas\nGetting Started in Pandas (Official)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#what-is-pandas",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#what-is-pandas",
    "title": "NB: Introducting Pandas",
    "section": "What is Pandas?",
    "text": "What is Pandas?\nPandas is a Python library design to work with dataframes.\nEssentially, it adds a ton of usability features to NumPy.\nIt has become a standard library in data science."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-data-frames",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-data-frames",
    "title": "NB: Introducting Pandas",
    "section": "Pandas Data Frames",
    "text": "Pandas Data Frames\nJust as NumPy introduces the n-dimensional array as a new data structure to Python, so Pandas introduces two:\nThe Series: a 1-dimensional labeled array capable of holding any data type.\nThe DataFrame: a 2-dimensional labeled array with columns of potentially different types.\n\n\n\n\n\n\nNote: Pandas used to have a 3-dimensional structure called a panel, but it has been removed from the library.\nIronically, the name “pandas” was partly derived the word “panel”: \\(pan(el)-da(ta)-s\\).\nTo handle higher dimensional data, the Pandas team suggests using XArray, which also build on NumPy arrays.\n\n\n\nBy far, the most important data structure in Pandas is the dataframe (sometimes spelled “data frame”), with the series playing a supporting – but crucial – role.\nIn fact, dataframe objects are built out of series objects.\nSo, to understand what a dataframe is and how it behaves, you need to understand what is series is and how it is constructed.\nBefore going into that, here are two quick observations about dataframes:\nFirst, dataframes are inspired by the R structure of the same name.\nThey have many similarities, but there are fundamental differences between the two that go beyond mere language differences.\nMost important is the Pandas dataframes have indexes, whereas R dataframes do not.\nSecond, it is helpful to think of Pandas as wrapper around NumPy and Matplotlib that makes it much easier to perform common operations, like select data by column name or visualizing plots.\nBut this comes at a cost – Pandas is slower than NumPy.\nThis represents the classic trade-off between ease-of-use for humnas and machine performance."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "title": "NB: Introducting Pandas",
    "section": "Series Objects",
    "text": "Series Objects\n\nAxis Labels (Indexes)\nA series is at heart a one-dimensional array with labels along its axis.\n\nLabels are essentially names that, ideally, uniquely identify each row (observation).\nIt’s data must be of a single type, like NumPy arrays (which they are internally).\nThe axis labels are collectively referred to as the index.\n\nThink of the index as a separate data structure that is attached to the array. * The array holds the data. * The index holds the names of the observations or things that the data are about.\nWhy have an index?\n\nIndexes provide a way to access elements of the array by name.\nThey allows series objects that share index labels to be combined.\nMany other things …\n\nIn fact, a dataframe is a collection of series with a common index.\nTo this collection of series, the dataframe also adds a set of labels along the horizontal axis. * The row index is axis 0. * The column index is called axis 1.\n\n\n\n\n\n\nThe row index is usually just called the index, while the column index is call the columns.\n\n\n\nNote that both index and column labels can be multidimensional. * The are called Hierarchical Indexes and go the technical name of MultiIndexes. * As an example, consider that a table of text data might have a two-column index: (book_id, chap_id) * See the Pandas documentation.\nIt is crucial to understand the difference between the index of a dataframe and its data in order to understand how dataframes work.\nMany a headache is caused by not understanding this difference :-)\nIndexes are powerful and controversial. * They allow for all kinds of magic to take place when combining and accessing data. * But they are expensive and sometimes hard to work with (especially multiindexes). * They are especially difficult if you are coming from R and expecting dataframes to behave a certain way.\n\n\nSome visuals to help\n\n\nBut enough introduction.\nLet’s dive into how Pandas objects work in practice."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#importing",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#importing",
    "title": "NB: Introducting Pandas",
    "section": "Importing",
    "text": "Importing\nWe import pandas like this, using the alias pd by convention:\n\nimport pandas as pd\n\nWe almost always import NumPy, too, since we use many of its functions with Pandas.\n\nimport numpy as np"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#data-frame-constructors",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#data-frame-constructors",
    "title": "NB: Introducting Pandas",
    "section": "Data Frame Constructors",
    "text": "Data Frame Constructors\nThere are several ways to create pandas data frames.\nPassing a dictionary of lists:\n\ndf = pd.DataFrame({\n    'x': [0, 2, 1, 5], \n    'y': [1, 1, 0, 0], \n    'z': [True, False, False, False]\n})\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n    \n    \n      1\n      2\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      5\n      0\n      False\n    \n  \n\n\n\n\n\ndf.index\n\nRangeIndex(start=0, stop=4, step=1)\n\n\n\nlist(df.index)\n\n[0, 1, 2, 3]\n\n\n\ndf.columns\n\nIndex(['x', 'y', 'z'], dtype='object')\n\n\n\nlist(df.columns)\n\n['x', 'y', 'z']\n\n\n\ndf.values\n\narray([[0, 1, True],\n       [2, 1, False],\n       [1, 0, False],\n       [5, 0, False]], dtype=object)\n\n\n\ntype(df.values)\n\nnumpy.ndarray\n\n\nPassing the three required pieces: - columns as list - index as list - data as list of lists (2D)\n\ndf2 = pd.DataFrame(\n    columns=['x','y'], \n    index=['row1','row2','row3'], \n    data=[[9,3],[1,2],[4,6]])\n\n\ndf2\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      row1\n      9\n      3\n    \n    \n      row2\n      1\n      2\n    \n    \n      row3\n      4\n      6\n    \n  \n\n\n\n\nPassing a list of tuples (or list-like objects):\n\nmy_data = [\n    ('a', 1, True),\n    ('b', 2, False)\n]\ndf3 = pd.DataFrame(my_data, columns=['f1', 'f2', 'f3'])\n\n\ndf3\n\n\n\n\n\n  \n    \n      \n      f1\n      f2\n      f3\n    \n  \n  \n    \n      0\n      a\n      1\n      True\n    \n    \n      1\n      b\n      2\n      False"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "title": "NB: Introducting Pandas",
    "section": "Naming indexes",
    "text": "Naming indexes\nIt is helpful to name your indexes.\n\ndf3.index.name = 'obs_id'\n\n\ndf3\n\n\n\n\n\n  \n    \n      \n      f1\n      f2\n      f3\n    \n    \n      obs_id\n      \n      \n      \n    \n  \n  \n    \n      0\n      a\n      1\n      True\n    \n    \n      1\n      b\n      2\n      False"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "title": "NB: Introducting Pandas",
    "section": "Copying DataFrames with copy()",
    "text": "Copying DataFrames with copy()\nUse copy() to give the new df a clean break from the original.\nOtherwise, the copied df will point to the same object as the original.\n\ndf = pd.DataFrame(\n    {\n        'x':[0,2,1,5], \n        'y':[1,1,0,0], \n        'z':[True,False,False,False]\n    }\n) \n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n    \n    \n      1\n      2\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      5\n      0\n      False\n    \n  \n\n\n\n\nWe create two copies, one “deep” and one “shallow”.\n\ndf_deep    = df.copy()  # deep copy; changes to df will not pass through\ndf_shallow = df         # shallow copy; changes to df will pass through\n\nIf we alter a value in the original …\n\ndf.x = 1\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      1\n      1\n      True\n    \n    \n      1\n      1\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      1\n      0\n      False\n    \n  \n\n\n\n\n… then the shallow copy is also changed …\n\ndf_shallow\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      1\n      1\n      True\n    \n    \n      1\n      1\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      1\n      0\n      False\n    \n  \n\n\n\n\n… while the deep copy is not.\n\ndf_deep\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n    \n    \n      1\n      2\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      5\n      0\n      False\n    \n  \n\n\n\n\nOf course, the reverse is true too – changes to the shallow copy affect the original:\n\ndf_shallow.y = 99\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      1\n      99\n      True\n    \n    \n      1\n      1\n      99\n      False\n    \n    \n      2\n      1\n      99\n      False\n    \n    \n      3\n      1\n      99\n      False\n    \n  \n\n\n\n\nSo, df_shallow mirrors changes to df, since it references its indices and data.\ndf_deep does not reference df, and so changes to df do not impact df_deep.\nLet’s reset our dataframe.\n\ndf = pd.DataFrame({'x':[0,2,1,5], 'y':[1,1,0,0], 'z':[True,False,False,False]})"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "title": "NB: Introducting Pandas",
    "section": "Column Data Types",
    "text": "Column Data Types\n\nWith .types\n\ndf.dtypes\n\nx    int64\ny    int64\nz     bool\ndtype: object\n\n\n\n\nWith .info()\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4 entries, 0 to 3\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   x       4 non-null      int64\n 1   y       4 non-null      int64\n 2   z       4 non-null      bool \ndtypes: bool(1), int64(2)\nmemory usage: 200.0 bytes"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "title": "NB: Introducting Pandas",
    "section": "Column Renaming",
    "text": "Column Renaming\nCan rename one or more fields at once using a dict.\nRename the field z to is_label:\n\ndf = df.rename(columns={'z': 'is_label'})\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      is_label\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n    \n    \n      1\n      2\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      5\n      0\n      False\n    \n  \n\n\n\n\nYou can also change column names this way:\n\nold_cols = df.columns # Keep a copy so we can revert\ndf.columns = ['X','Y', 'LABEL']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      X\n      Y\n      LABEL\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n    \n    \n      1\n      2\n      1\n      False\n    \n    \n      2\n      1\n      0\n      False\n    \n    \n      3\n      5\n      0\n      False\n    \n  \n\n\n\n\n\ndf.columns = old_cols # Reset things"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "title": "NB: Introducting Pandas",
    "section": "Column Referencing",
    "text": "Column Referencing\nPandas supports both bracket notation and dot notation.\nBracket\n\ndf['y']\n\n0    1\n1    1\n2    0\n3    0\nName: y, dtype: int64\n\n\nDot (i.e. as object attribute)\n\ndf.y\n\n0    1\n1    1\n2    0\n3    0\nName: y, dtype: int64\n\n\nDot notation is very convenient, since as object attributes they can be tab-completed in various editing environments.\nBut: - It only works if the column names are not reserved words. - It can’t be used when creating a new column (see below).\nIt is convenient to names columns with a prefix, e.g. doc_title, doc_year, doc_author, etc. to avoid name collisions.\nColumn attributes and methods work with both:\n\ndf.y.values, df['y'].values\n\n(array([1, 1, 0, 0]), array([1, 1, 0, 0]))\n\n\nshow only the first value, by indexing:\n\ndf.y.values[0]\n\n1"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "title": "NB: Introducting Pandas",
    "section": "Column Selection",
    "text": "Column Selection\nYou select columns from a dataframe by passing a value or list (or any expression that evaluates to a list).\nCalling a columns with a scalar returns a Series:\n\ndf['x']\n\n0    0\n1    2\n2    1\n3    5\nName: x, dtype: int64\n\n\n\ntype(df['x'])\n\npandas.core.series.Series\n\n\nCalling a column with a list returns a dataframe:\n\ndf[['x']]\n\n\n\n\n\n  \n    \n      \n      x\n    \n  \n  \n    \n      0\n      0\n    \n    \n      1\n      2\n    \n    \n      2\n      1\n    \n    \n      3\n      5\n    \n  \n\n\n\n\n\ntype(df[['x']])\n\npandas.core.frame.DataFrame\n\n\nIn Pandas, we can use “fancy indexing” with labels:\n\ndf[['y', 'x']]\n\n\n\n\n\n  \n    \n      \n      y\n      x\n    \n  \n  \n    \n      0\n      1\n      0\n    \n    \n      1\n      1\n      2\n    \n    \n      2\n      0\n      1\n    \n    \n      3\n      0\n      5\n    \n  \n\n\n\n\nWe can put in a list comprehension, too:\n\ndf[[col for col in df.columns if col not in ['x','y']]]\n\n\n\n\n\n  \n    \n      \n      is_label\n    \n  \n  \n    \n      0\n      True\n    \n    \n      1\n      False\n    \n    \n      2\n      False\n    \n    \n      3\n      False"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "title": "NB: Introducting Pandas",
    "section": "Adding New Columns",
    "text": "Adding New Columns\nIt is typical to create a new column from existing columns.\nIn this example, a new column (or field) is created by summing x and y:\n\ndf['x_plus_y'] = df.x + df.y\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      is_label\n      x_plus_y\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n      1\n    \n    \n      1\n      2\n      1\n      False\n      3\n    \n    \n      2\n      1\n      0\n      False\n      1\n    \n    \n      3\n      5\n      0\n      False\n      5\n    \n  \n\n\n\n\nNote the use of bracket notation on the left.\nWhen new columns are created, you must use bracket notation."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "title": "NB: Introducting Pandas",
    "section": "Removing Columns with del and .drop()",
    "text": "Removing Columns with del and .drop()\n\ndel\ndel can drop a DataFrame or single columns from the frame\n\ndf_drop = df.copy()\n\n\ndf_drop.head(2)\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      is_label\n      x_plus_y\n    \n  \n  \n    \n      0\n      0\n      1\n      True\n      1\n    \n    \n      1\n      2\n      1\n      False\n      3\n    \n  \n\n\n\n\n\ndel df_drop['x']\n\n\ndf_drop\n\n\n\n\n\n  \n    \n      \n      y\n      is_label\n      x_plus_y\n    \n  \n  \n    \n      0\n      1\n      True\n      1\n    \n    \n      1\n      1\n      False\n      3\n    \n    \n      2\n      0\n      False\n      1\n    \n    \n      3\n      0\n      False\n      5\n    \n  \n\n\n\n\n\n\n.drop()\nCan drop one or more columns.\ntakes axis parameter: - axis=0 refers to rows\n- axis=1 refers to columns\n\ndf_drop = df_drop.drop(['x_plus_y', 'is_label'], axis=1)\n\n\ndf_drop\n\n\n\n\n\n  \n    \n      \n      y\n    \n  \n  \n    \n      0\n      1\n    \n    \n      1\n      1\n    \n    \n      2\n      0\n    \n    \n      3\n      0"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "title": "NB: Introducting Pandas",
    "section": "Load Iris Dataset",
    "text": "Load Iris Dataset\nLet’s load a bigger data set to explore more functionality.\nThe function load_dataset() in the seaborn package loads the built-in dataset.\n\nimport seaborn as sns\niris = sns.load_dataset('iris')\n\nCheck the data type of iris:\n\ntype(iris)\n\npandas.core.frame.DataFrame\n\n\n\nSee the first and last records with .head() and .tail()\n\niris.head()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\niris.head(10)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      5\n      5.4\n      3.9\n      1.7\n      0.4\n      setosa\n    \n    \n      6\n      4.6\n      3.4\n      1.4\n      0.3\n      setosa\n    \n    \n      7\n      5.0\n      3.4\n      1.5\n      0.2\n      setosa\n    \n    \n      8\n      4.4\n      2.9\n      1.4\n      0.2\n      setosa\n    \n    \n      9\n      4.9\n      3.1\n      1.5\n      0.1\n      setosa\n    \n  \n\n\n\n\n\niris.tail()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n\n\n\n\n\nInspect metadata\n\niris.dtypes\n\nsepal_length    float64\nsepal_width     float64\npetal_length    float64\npetal_width     float64\nspecies          object\ndtype: object\n\n\nshape (rows, columns):\n\niris.shape\n\n(150, 5)\n\n\nAlternatively, len() returns row (record) count:\n\nlen(iris)\n\n150\n\n\nColumn names:\n\niris.columns\n\nIndex(['sepal_length', 'sepal_width', 'petal_length', 'petal_width',\n       'species'],\n      dtype='object')\n\n\n\n\nGet it all with .info()\n\niris.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 150 entries, 0 to 149\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   sepal_length  150 non-null    float64\n 1   sepal_width   150 non-null    float64\n 2   petal_length  150 non-null    float64\n 3   petal_width   150 non-null    float64\n 4   species       150 non-null    object \ndtypes: float64(4), object(1)\nmemory usage: 6.0+ KB"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "title": "NB: Introducting Pandas",
    "section": "The Index",
    "text": "The Index\n\niris.index\n\nRangeIndex(start=0, stop=150, step=1)\n\n\nWe can name indexes, and it is important to do so in many cases.\n\niris.index.name = 'obs_id' # Each observation is a unique plant\n\n\niris\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\nWe can also redefine indexes to reflect the logic of our data.\nIn this data set, the species of the flower is part of its identity, so it can be part of the index.\nThe other features vary by individual.\nNote that species is also a label that can be used for training a model to predict the species of an iris flower. In that use case, the column would be pulled out into a separate vector.\n\niris_w_idx = iris.reset_index().set_index(['species','obs_id'])\n\n\niris_w_idx\n\n\n\n\n\n  \n    \n      \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n    \n      species\n      obs_id\n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      0\n      5.1\n      3.5\n      1.4\n      0.2\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      virginica\n      145\n      6.7\n      3.0\n      5.2\n      2.3\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n    \n  \n\n150 rows × 4 columns"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Row Selection (Filtering)",
    "text": "Row Selection (Filtering)\n\niloc[]\nYou can extract rows using indexes with iloc[].\nThis fetches row 3, and all columns.\n\niris.iloc[2]\n\nsepal_length       4.7\nsepal_width        3.2\npetal_length       1.3\npetal_width        0.2\nspecies         setosa\nName: 2, dtype: object\n\n\nfetch rows with indices 1,2 (the right endpoint is exclusive), and all columns.\n\niris.iloc[1:3]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n  \n\n\n\n\nfetch rows with indices 1,2 and first three columns (positions 0, 1, 2)\n\n\nCombining Filtering and Selecting\nSo, remember the comma notation from NumPy – it is used here.\nThe first element is a row selector, the second a column selector.\nIn database terminology, row selection is called filtering.\n\niris.iloc[1:3, 0:3]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n    \n    \n      obs_id\n      \n      \n      \n    \n  \n  \n    \n      1\n      4.9\n      3.0\n      1.4\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n    \n  \n\n\n\n\nYou can apply slices to column names too. You don’t need .iloc[] here.\n\niris.columns[0:3]\n\nIndex(['sepal_length', 'sepal_width', 'petal_length'], dtype='object')\n\n\n\n\n.loc[]\nFiltering can also be done with .loc[]. This uses the row, column labels (names).\nHere we ask for rows with labels (indexes) 1-3, and it gives exactly that\n.iloc[] returned rows with indices 1,2.\nAuthor note: This is by far the more useful of the two in my experience.\n\niris.loc[1:3]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n  \n\n\n\n\nNote the different behavior of the slice here – with .loc, 1:3 is short-hand for [1,2,3].\n\niris.loc[[1,2,3]]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n  \n\n\n\n\nSo, we are not using normal slicing here:\n\niris.loc[[:-1]]\n\nSyntaxError: invalid syntax (170941475.py, line 1)\n\n\nAlthough this works:\n\niris.loc[:]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\nTake-away: Fancy indexing uses new lists; you can use something like [:-1] because you are not referring to an existing list.\nSubset on columns with column name (as a string) or list of strings\n\niris.loc[1:3, ['sepal_length','petal_width']]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      petal_width\n    \n    \n      obs_id\n      \n      \n    \n  \n  \n    \n      1\n      4.9\n      0.2\n    \n    \n      2\n      4.7\n      0.2\n    \n    \n      3\n      4.6\n      0.2\n    \n  \n\n\n\n\nSelect all rows, specific columns\n\niris.loc[:, ['sepal_length','petal_width']]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      petal_width\n    \n    \n      obs_id\n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      0.2\n    \n    \n      1\n      4.9\n      0.2\n    \n    \n      2\n      4.7\n      0.2\n    \n    \n      3\n      4.6\n      0.2\n    \n    \n      4\n      5.0\n      0.2\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      2.3\n    \n    \n      146\n      6.3\n      1.9\n    \n    \n      147\n      6.5\n      2.0\n    \n    \n      148\n      6.2\n      2.3\n    \n    \n      149\n      5.9\n      1.8\n    \n  \n\n150 rows × 2 columns\n\n\n\n\n\n.loc[] with MultiIndex\nRecall our dataframe with a two element index:\n\niris_w_idx\n\n\n\n\n\n  \n    \n      \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n    \n      species\n      obs_id\n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      0\n      5.1\n      3.5\n      1.4\n      0.2\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      virginica\n      145\n      6.7\n      3.0\n      5.2\n      2.3\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n    \n  \n\n150 rows × 4 columns\n\n\n\nSelecting a single observation by it’s key, i.e. full label:\n\niris_w_idx.loc[('setosa',0)] # df.at[r,c]\n\nsepal_length    5.1\nsepal_width     3.5\npetal_length    1.4\npetal_width     0.2\nName: (setosa, 0), dtype: float64\n\n\nSelecting just the setosas:\n\niris_w_idx.loc['setosa']\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n    \n      obs_id\n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n    \n    \n      5\n      5.4\n      3.9\n      1.7\n      0.4\n    \n    \n      6\n      4.6\n      3.4\n      1.4\n      0.3\n    \n    \n      7\n      5.0\n      3.4\n      1.5\n      0.2\n    \n    \n      8\n      4.4\n      2.9\n      1.4\n      0.2\n    \n    \n      9\n      4.9\n      3.1\n      1.5\n      0.1\n    \n    \n      10\n      5.4\n      3.7\n      1.5\n      0.2\n    \n    \n      11\n      4.8\n      3.4\n      1.6\n      0.2\n    \n    \n      12\n      4.8\n      3.0\n      1.4\n      0.1\n    \n    \n      13\n      4.3\n      3.0\n      1.1\n      0.1\n    \n    \n      14\n      5.8\n      4.0\n      1.2\n      0.2\n    \n    \n      15\n      5.7\n      4.4\n      1.5\n      0.4\n    \n    \n      16\n      5.4\n      3.9\n      1.3\n      0.4\n    \n    \n      17\n      5.1\n      3.5\n      1.4\n      0.3\n    \n    \n      18\n      5.7\n      3.8\n      1.7\n      0.3\n    \n    \n      19\n      5.1\n      3.8\n      1.5\n      0.3\n    \n    \n      20\n      5.4\n      3.4\n      1.7\n      0.2\n    \n    \n      21\n      5.1\n      3.7\n      1.5\n      0.4\n    \n    \n      22\n      4.6\n      3.6\n      1.0\n      0.2\n    \n    \n      23\n      5.1\n      3.3\n      1.7\n      0.5\n    \n    \n      24\n      4.8\n      3.4\n      1.9\n      0.2\n    \n    \n      25\n      5.0\n      3.0\n      1.6\n      0.2\n    \n    \n      26\n      5.0\n      3.4\n      1.6\n      0.4\n    \n    \n      27\n      5.2\n      3.5\n      1.5\n      0.2\n    \n    \n      28\n      5.2\n      3.4\n      1.4\n      0.2\n    \n    \n      29\n      4.7\n      3.2\n      1.6\n      0.2\n    \n    \n      30\n      4.8\n      3.1\n      1.6\n      0.2\n    \n    \n      31\n      5.4\n      3.4\n      1.5\n      0.4\n    \n    \n      32\n      5.2\n      4.1\n      1.5\n      0.1\n    \n    \n      33\n      5.5\n      4.2\n      1.4\n      0.2\n    \n    \n      34\n      4.9\n      3.1\n      1.5\n      0.2\n    \n    \n      35\n      5.0\n      3.2\n      1.2\n      0.2\n    \n    \n      36\n      5.5\n      3.5\n      1.3\n      0.2\n    \n    \n      37\n      4.9\n      3.6\n      1.4\n      0.1\n    \n    \n      38\n      4.4\n      3.0\n      1.3\n      0.2\n    \n    \n      39\n      5.1\n      3.4\n      1.5\n      0.2\n    \n    \n      40\n      5.0\n      3.5\n      1.3\n      0.3\n    \n    \n      41\n      4.5\n      2.3\n      1.3\n      0.3\n    \n    \n      42\n      4.4\n      3.2\n      1.3\n      0.2\n    \n    \n      43\n      5.0\n      3.5\n      1.6\n      0.6\n    \n    \n      44\n      5.1\n      3.8\n      1.9\n      0.4\n    \n    \n      45\n      4.8\n      3.0\n      1.4\n      0.3\n    \n    \n      46\n      5.1\n      3.8\n      1.6\n      0.2\n    \n    \n      47\n      4.6\n      3.2\n      1.4\n      0.2\n    \n    \n      48\n      5.3\n      3.7\n      1.5\n      0.2\n    \n    \n      49\n      5.0\n      3.3\n      1.4\n      0.2\n    \n  \n\n\n\n\nGrabbing one species and one feature:\n\niris_w_idx.loc['setosa', 'sepal_length'].head()\n\nobs_id\n0    5.1\n1    4.9\n2    4.7\n3    4.6\n4    5.0\nName: sepal_length, dtype: float64\n\n\nThis returns a series. If we want a dataframe back, we can use .to_frame():\n\niris_w_idx.loc['setosa', 'sepal_length'].to_frame().head()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n    \n    \n      obs_id\n      \n    \n  \n  \n    \n      0\n      5.1\n    \n    \n      1\n      4.9\n    \n    \n      2\n      4.7\n    \n    \n      3\n      4.6\n    \n    \n      4\n      5.0\n    \n  \n\n\n\n\nWe use a tuple to index multiple index levels.\nNote that you can’t pass slices here – and this where indexing can get sticky.\n\niris_w_idx.loc[('setosa', 5)]\n\nsepal_length    5.4\nsepal_width     3.9\npetal_length    1.7\npetal_width     0.4\nName: (setosa, 5), dtype: float64\n\n\n\n\nAnother Example\n\ndf_cat = pd.DataFrame(\n    index=['burmese', 'persian', 'maine_coone'],\n    columns=['x'],\n    data=[2,1,3]\n)\n\n\ndf_cat\n\n\n\n\n\n  \n    \n      \n      x\n    \n  \n  \n    \n      burmese\n      2\n    \n    \n      persian\n      1\n    \n    \n      maine_coone\n      3\n    \n  \n\n\n\n\n\ndf_cat.iloc[:2]\n\n\n\n\n\n  \n    \n      \n      x\n    \n  \n  \n    \n      burmese\n      2\n    \n    \n      persian\n      1\n    \n  \n\n\n\n\n\ndf_cat.iloc[0:1]\n\n\n\n\n\n  \n    \n      \n      x\n    \n  \n  \n    \n      burmese\n      2\n    \n  \n\n\n\n\n\ndf_cat.loc['burmese']\n\nx    2\nName: burmese, dtype: int64\n\n\n\ndf_cat.loc[['burmese','maine_coone']]\n\n\n\n\n\n  \n    \n      \n      x\n    \n  \n  \n    \n      burmese\n      2\n    \n    \n      maine_coone\n      3"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Boolean Filtering",
    "text": "Boolean Filtering\nIt’s very common to subset a dataframe based on some condition on the data.\nNote that even though we are filtering rows, we are not using .loc[] or .iloc[] here.\nPandas knows what to do if you pass a boolean structure.\n\niris.sepal_length >= 7.5\n\nobs_id\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n145    False\n146    False\n147    False\n148    False\n149    False\nName: sepal_length, Length: 150, dtype: bool\n\n\n\niris[iris.sepal_length >= 7.5]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      105\n      7.6\n      3.0\n      6.6\n      2.1\n      virginica\n    \n    \n      117\n      7.7\n      3.8\n      6.7\n      2.2\n      virginica\n    \n    \n      118\n      7.7\n      2.6\n      6.9\n      2.3\n      virginica\n    \n    \n      122\n      7.7\n      2.8\n      6.7\n      2.0\n      virginica\n    \n    \n      131\n      7.9\n      3.8\n      6.4\n      2.0\n      virginica\n    \n    \n      135\n      7.7\n      3.0\n      6.1\n      2.3\n      virginica\n    \n  \n\n\n\n\n\niris[(iris.sepal_length >= 4.5) & (iris.sepal_length <= 4.7)]\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      6\n      4.6\n      3.4\n      1.4\n      0.3\n      setosa\n    \n    \n      22\n      4.6\n      3.6\n      1.0\n      0.2\n      setosa\n    \n    \n      29\n      4.7\n      3.2\n      1.6\n      0.2\n      setosa\n    \n    \n      41\n      4.5\n      2.3\n      1.3\n      0.3\n      setosa\n    \n    \n      47\n      4.6\n      3.2\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\nMasking\nHere’s an example of masking using boolean conditions passed to the dataframe selector:\nHere are the values for the feature sepal length:\n\niris.sepal_length.values\n\narray([5.1, 4.9, 4.7, 4.6, 5. , 5.4, 4.6, 5. , 4.4, 4.9, 5.4, 4.8, 4.8,\n       4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5. ,\n       5. , 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5. , 5.5, 4.9, 4.4,\n       5.1, 5. , 4.5, 4.4, 5. , 5.1, 4.8, 5.1, 4.6, 5.3, 5. , 7. , 6.4,\n       6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5. , 5.9, 6. , 6.1, 5.6,\n       6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7,\n       6. , 5.7, 5.5, 5.5, 5.8, 6. , 5.4, 6. , 6.7, 6.3, 5.6, 5.5, 5.5,\n       6.1, 5.8, 5. , 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3,\n       6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5,\n       7.7, 7.7, 6. , 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,\n       7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6. , 6.9, 6.7, 6.9, 5.8,\n       6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9])\n\n\nAnd here are the boolean values generated by applying a comparison operator to those values:\n\nmask = iris.sepal_length >= 7.5\n\n\nmask.values\n\narray([False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False,  True, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True, False, False, False,  True, False, False, False,\n       False, False, False, False, False,  True, False, False, False,\n        True, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False])\n\n\n\nmask.values.astype('int')\n\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n\nThe two sets of values have the same shape.\nWe can now overlay the logical values over the numeric ones and keep only what is True:\n\niris.sepal_length[mask].values\n\narray([7.6, 7.7, 7.7, 7.7, 7.9, 7.7])"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "title": "NB: Introducting Pandas",
    "section": "Working with Missing Data",
    "text": "Working with Missing Data\nPandas primarily uses the data type np.nan from NumPy to represent missing data.\n\ndf_miss = pd.DataFrame({\n    'x': [2, np.nan, 1], \n    'y': [np.nan, np.nan, 6]}\n)\n\nThese values appear as NaNs:\n\ndf_miss\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      0\n      2.0\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n    \n    \n      2\n      1.0\n      6.0\n    \n  \n\n\n\n\n\n.dropna()\nThis will drop all rows with missing data in any column.\nDetails\n\ndf_drop_all = df_miss.dropna()\ndf_drop_all\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      2\n      1.0\n      6.0\n    \n  \n\n\n\n\nThe subset parameter takes a list of column names to specify which columns should have missing values.\n\ndf_drop_x = df_miss.dropna(subset=['x'])\ndf_drop_x\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      0\n      2.0\n      NaN\n    \n    \n      2\n      1.0\n      6.0\n    \n  \n\n\n\n\n\n\n.fillna()\nThis will replace missing values with whatever you set it to, e.g. \\(0\\)s.\nWe can pass the results of an operation – for example to peform simple imputation, we can replace missing values in each column with the median value of the respective column:\n\ndf_filled = df_miss.fillna(df_miss.median())\n\n\ndf_filled\n\n\n\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      0\n      2.0\n      6.0\n    \n    \n      1\n      1.5\n      6.0\n    \n    \n      2\n      1.0\n      6.0"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "title": "NB: Introducting Pandas",
    "section": "Sorting",
    "text": "Sorting\n\n.sort_values()\nSort by values - by parameter takes string or list of strings - ascending takes True or False - inplace will save sorted values into the df\nDetails\n\niris.sort_values(by=['sepal_length','petal_width'], ascending=False)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      131\n      7.9\n      3.8\n      6.4\n      2.0\n      virginica\n    \n    \n      118\n      7.7\n      2.6\n      6.9\n      2.3\n      virginica\n    \n    \n      135\n      7.7\n      3.0\n      6.1\n      2.3\n      virginica\n    \n    \n      117\n      7.7\n      3.8\n      6.7\n      2.2\n      virginica\n    \n    \n      122\n      7.7\n      2.8\n      6.7\n      2.0\n      virginica\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      41\n      4.5\n      2.3\n      1.3\n      0.3\n      setosa\n    \n    \n      8\n      4.4\n      2.9\n      1.4\n      0.2\n      setosa\n    \n    \n      38\n      4.4\n      3.0\n      1.3\n      0.2\n      setosa\n    \n    \n      42\n      4.4\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      13\n      4.3\n      3.0\n      1.1\n      0.1\n      setosa\n    \n  \n\n150 rows × 5 columns\n\n\n\n\n\n.sort_index()\nSort by index. Example sorts by descending index\n\niris.sort_index(axis=0, ascending=False)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n  \n\n150 rows × 5 columns"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "title": "NB: Introducting Pandas",
    "section": "Statistics",
    "text": "Statistics\n\ndescribe()\n\niris.describe()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n  \n  \n    \n      count\n      150.000000\n      150.000000\n      150.000000\n      150.000000\n    \n    \n      mean\n      5.843333\n      3.057333\n      3.758000\n      1.199333\n    \n    \n      std\n      0.828066\n      0.435866\n      1.765298\n      0.762238\n    \n    \n      min\n      4.300000\n      2.000000\n      1.000000\n      0.100000\n    \n    \n      25%\n      5.100000\n      2.800000\n      1.600000\n      0.300000\n    \n    \n      50%\n      5.800000\n      3.000000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.400000\n      3.300000\n      5.100000\n      1.800000\n    \n    \n      max\n      7.900000\n      4.400000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\niris.describe().T\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n  \n  \n    \n      sepal_length\n      150.0\n      5.843333\n      0.828066\n      4.3\n      5.1\n      5.80\n      6.4\n      7.9\n    \n    \n      sepal_width\n      150.0\n      3.057333\n      0.435866\n      2.0\n      2.8\n      3.00\n      3.3\n      4.4\n    \n    \n      petal_length\n      150.0\n      3.758000\n      1.765298\n      1.0\n      1.6\n      4.35\n      5.1\n      6.9\n    \n    \n      petal_width\n      150.0\n      1.199333\n      0.762238\n      0.1\n      0.3\n      1.30\n      1.8\n      2.5\n    \n  \n\n\n\n\n\niris.species.describe()\n\ncount        150\nunique         3\ntop       setosa\nfreq          50\nName: species, dtype: object\n\n\n\niris.sepal_length.describe()\n\ncount    150.000000\nmean       5.843333\nstd        0.828066\nmin        4.300000\n25%        5.100000\n50%        5.800000\n75%        6.400000\nmax        7.900000\nName: sepal_length, dtype: float64\n\n\n\n\nvalue_counts()\nThis is a highly useful function for showing the frequency for each distinct value.\nParameters give the ability to sort by count or index, normalize, and more.\nDetails\n\niris.species.value_counts()\n\nsetosa        50\nversicolor    50\nvirginica     50\nName: species, dtype: int64\n\n\n\nSPECIES = iris.species.value_counts().to_frame('n')\n\n\nSPECIES\n\n\n\n\n\n  \n    \n      \n      n\n    \n  \n  \n    \n      setosa\n      50\n    \n    \n      versicolor\n      50\n    \n    \n      virginica\n      50\n    \n  \n\n\n\n\nShow percentages instead of counts\n\niris.species.value_counts(normalize=True)\n\nsetosa        0.333333\nversicolor    0.333333\nvirginica     0.333333\nName: species, dtype: float64\n\n\nThe methods returns a series that can be converted into a dataframe.\n\nSEPAL_LENGTH = iris.sepal_length.value_counts().to_frame('n')\n\n\nSEPAL_LENGTH.head()\n\n\n\n\n\n  \n    \n      \n      n\n    \n  \n  \n    \n      5.0\n      10\n    \n    \n      5.1\n      9\n    \n    \n      6.3\n      9\n    \n    \n      5.7\n      8\n    \n    \n      6.7\n      8\n    \n  \n\n\n\n\nYou can run .value_counts() on a column to get a kind of histogram:\n\nSEPAL_LENGTH.sort_index().plot.bar(figsize=(8,4), rot=45);\n\n\n\n\n\niris.sepal_length.hist();\n\n\n\n\n\n\n.mean()\nOperations like this generally exclude missing data.\nSo, it is import to convert missing data to values if they need to be considered in the denominator.\n\niris.sepal_length.mean()\n\n5.843333333333334\n\n\n\n\n.max()\n\niris.sepal_length.max()\n\n7.9\n\n\n\n\n.std()\nThis standard deviation.\n\niris.sepal_length.std()\n\n0.8280661279778629\n\n\n\n\n.corr()\n\niris.corr()\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_1956/2141086772.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  iris.corr()\n\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      -0.117570\n      0.871754\n      0.817941\n    \n    \n      sepal_width\n      -0.117570\n      1.000000\n      -0.428440\n      -0.366126\n    \n    \n      petal_length\n      0.871754\n      -0.428440\n      1.000000\n      0.962865\n    \n    \n      petal_width\n      0.817941\n      -0.366126\n      0.962865\n      1.000000\n    \n  \n\n\n\n\n\niris.corr(numeric_only=True)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      -0.117570\n      0.871754\n      0.817941\n    \n    \n      sepal_width\n      -0.117570\n      1.000000\n      -0.428440\n      -0.366126\n    \n    \n      petal_length\n      0.871754\n      -0.428440\n      1.000000\n      0.962865\n    \n    \n      petal_width\n      0.817941\n      -0.366126\n      0.962865\n      1.000000\n    \n  \n\n\n\n\nCorrelation can be computed on two fields by subsetting on them:\n\niris[['sepal_length','petal_length']].corr()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      petal_length\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      0.871754\n    \n    \n      petal_length\n      0.871754\n      1.000000\n    \n  \n\n\n\n\n\niris[['sepal_length','petal_length','sepal_width']].corr()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      petal_length\n      sepal_width\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      0.871754\n      -0.11757\n    \n    \n      petal_length\n      0.871754\n      1.000000\n      -0.42844\n    \n    \n      sepal_width\n      -0.117570\n      -0.428440\n      1.00000"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "title": "NB: Introducting Pandas",
    "section": "Styling",
    "text": "Styling\n\niris.corr(numeric_only=True).style.background_gradient(cmap=\"Blues\", axis=None)\n\n\n\n\n  \n    \n       \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      -0.117570\n      0.871754\n      0.817941\n    \n    \n      sepal_width\n      -0.117570\n      1.000000\n      -0.428440\n      -0.366126\n    \n    \n      petal_length\n      0.871754\n      -0.428440\n      1.000000\n      0.962865\n    \n    \n      petal_width\n      0.817941\n      -0.366126\n      0.962865\n      1.000000\n    \n  \n\n\n\n\niris.corr(numeric_only=True).style.bar(axis=None)\n\n\n\n\n  \n    \n       \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n  \n  \n    \n      sepal_length\n      1.000000\n      -0.117570\n      0.871754\n      0.817941\n    \n    \n      sepal_width\n      -0.117570\n      1.000000\n      -0.428440\n      -0.366126\n    \n    \n      petal_length\n      0.871754\n      -0.428440\n      1.000000\n      0.962865\n    \n    \n      petal_width\n      0.817941\n      -0.366126\n      0.962865\n      1.000000"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "title": "NB: Introducting Pandas",
    "section": "Visualization",
    "text": "Visualization\nScatterplot using Seabprn on the df columns sepal_length, petal_length.\nVisualization will be covered separately in more detail.\n\niris.plot.scatter('sepal_length', 'petal_length');\n\n\n\n\n\niris.sort_values(list(iris.columns)).plot(style='o', figsize=(10,10));\n\n\n\n\n\nfrom pandas.plotting import scatter_matrix\n\n\nscatter_matrix(iris, figsize=(10,10));"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Save to CSV File",
    "text": "Save to CSV File\nCommon to save df to a csv file. The full path (path + filename) is required.\nThere are also options to save to a database and to other file formats,\nCommon optional parameters: - sep - delimiter - index - saving index column or not\nDetails\n\niris.to_csv('./iris_data.csv')"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Read from CSV File",
    "text": "Read from CSV File\nread_csv() reads from csv into DataFrame\ntakes full filepath\nDetails\n\niris_loaded = pd.read_csv('./iris_data.csv').set_index('obs_id')\n\n\niris_loaded.head(2)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      obs_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#set-up",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#set-up",
    "title": "NB: Introducing Pandas II",
    "section": "Set Up",
    "text": "Set Up\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\niris = sns.load_dataset('iris')\n\n\niris.head(2)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\nimport sys\nsys.getsizeof(iris)\n\n14764"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "title": "NB: Introducing Pandas II",
    "section": "Apply Lambda Functions with .apply()",
    "text": "Apply Lambda Functions with .apply()\nApply a transformation to each record. Uses a lambda function.\nThe apply() method should be used after you have established that you can’t use a vectorized function.\n\niris['sepal_len_sq'] = iris.sepal_length.apply(lambda x: x**2)\niris.head(5)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n      sepal_len_sq\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n      26.01\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n      24.01\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n      22.09\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n      21.16\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n      25.00\n    \n  \n\n\n\n\nTransformation involving multiple columns. Uses axis=1 to access columns.\nCompute average of sepal_length, sepal_width:\n\niris['sepal_len_wid_avg'] = iris[['sepal_length','sepal_width']]\\\n    .apply(lambda x: (x.sepal_length + x.sepal_width) / 2, axis=1)\niris.head()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n      sepal_len_sq\n      sepal_len_wid_avg\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n      26.01\n      4.30\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n      24.01\n      3.95\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n      22.09\n      3.95\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n      21.16\n      3.85\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n      25.00\n      4.30\n    \n  \n\n\n\n\nVectorized Version\n\n%time iris.sepal_length**2\n\nCPU times: user 306 µs, sys: 18 µs, total: 324 µs\nWall time: 343 µs\n\n\n0      26.01\n1      24.01\n2      22.09\n3      21.16\n4      25.00\n       ...  \n145    44.89\n146    39.69\n147    42.25\n148    38.44\n149    34.81\nName: sepal_length, Length: 150, dtype: float64\n\n\nCompare to .apply()\n\n%time iris.sepal_length.apply(lambda x: x**2)\n\nCPU times: user 830 µs, sys: 200 µs, total: 1.03 ms\nWall time: 1.23 ms\n\n\n0      26.01\n1      24.01\n2      22.09\n3      21.16\n4      25.00\n       ...  \n145    44.89\n146    39.69\n147    42.25\n148    38.44\n149    34.81\nName: sepal_length, Length: 150, dtype: float64"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "title": "NB: Introducing Pandas II",
    "section": "Aggregation",
    "text": "Aggregation\nInvolves one or more of:\n\nsplitting the data into groups\napplying a function to each group\ncombining results\n\n\n.groupby()\nCompute mean of each column, grouped (separately) by species\n\niris.groupby(\"species\").mean()\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      sepal_len_sq\n      sepal_len_wid_avg\n    \n    \n      species\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      5.006\n      3.428\n      1.462\n      0.246\n      25.1818\n      4.217\n    \n    \n      versicolor\n      5.936\n      2.770\n      4.260\n      1.326\n      35.4972\n      4.353\n    \n    \n      virginica\n      6.588\n      2.974\n      5.552\n      2.026\n      43.7980\n      4.781\n    \n  \n\n\n\n\n\n\npd.pivot_table()\nApply a function aggfunc to selected values grouped by columns\nDetails\nCompute mean sepal length for each species:\n\npd.pivot_table(iris, values=\"sepal_length\", columns=[\"species\"], aggfunc = np.mean)\n\n\n\n\n\n  \n    \n      species\n      setosa\n      versicolor\n      virginica\n    \n  \n  \n    \n      sepal_length\n      5.006\n      5.936\n      6.588"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "title": "NB: Introducing Pandas II",
    "section": "Stacking and Unstacking",
    "text": "Stacking and Unstacking\nSimilar to pivoting, but requires – and takes advantage of – indexes.\n\n.unstack()\nDetails\nLet’s look at what unstack() does with a dataset from Seaborn’s collection.\n\nattention = sns.load_dataset('attention')\n\n\nattention.sample(10)\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      subject\n      attention\n      solutions\n      score\n    \n  \n  \n    \n      5\n      5\n      6\n      divided\n      1\n      5.0\n    \n    \n      40\n      40\n      1\n      divided\n      3\n      7.0\n    \n    \n      11\n      11\n      12\n      focused\n      1\n      8.0\n    \n    \n      12\n      12\n      13\n      focused\n      1\n      6.0\n    \n    \n      24\n      24\n      5\n      divided\n      2\n      5.0\n    \n    \n      9\n      9\n      10\n      divided\n      1\n      6.0\n    \n    \n      0\n      0\n      1\n      divided\n      1\n      2.0\n    \n    \n      37\n      37\n      18\n      focused\n      2\n      8.0\n    \n    \n      7\n      7\n      8\n      divided\n      1\n      5.0\n    \n    \n      22\n      22\n      3\n      divided\n      2\n      5.0\n    \n  \n\n\n\n\nThis dataframe appears to record the results of an experiment on human attention.\nEach row is a trial or observation in that experiment.\nAn analysis of the columns in this dataframe show that score is a measured outcome, subjects are probably individuals in a comparative study where two groups, those with attention divided and those with attention focused, are subject to three different solutions applied to the performance of some task. Unnamed: 0 is just the row number as index.\nThe purpose of the test performed in each trial seems to be see which solutions are best at overcoming divied attention in the performance of those tasks.\nLet’s restructure our data to reflect these assumptions.\n\nattention1 = attention.set_index(['attention','solutions','subject']).sort_index().drop('Unnamed: 0', axis=1)\n\n\nattention1.head(20)\n\n\n\n\n\n  \n    \n      \n      \n      \n      score\n    \n    \n      attention\n      solutions\n      subject\n      \n    \n  \n  \n    \n      divided\n      1\n      1\n      2.0\n    \n    \n      2\n      3.0\n    \n    \n      3\n      3.0\n    \n    \n      4\n      5.0\n    \n    \n      5\n      4.0\n    \n    \n      6\n      5.0\n    \n    \n      7\n      5.0\n    \n    \n      8\n      5.0\n    \n    \n      9\n      2.0\n    \n    \n      10\n      6.0\n    \n    \n      2\n      1\n      4.0\n    \n    \n      2\n      4.0\n    \n    \n      3\n      5.0\n    \n    \n      4\n      7.0\n    \n    \n      5\n      5.0\n    \n    \n      6\n      5.0\n    \n    \n      7\n      4.5\n    \n    \n      8\n      7.0\n    \n    \n      9\n      3.0\n    \n    \n      10\n      5.0\n    \n  \n\n\n\n\nWe can use .unstack() to provide a nice, synoptic view of these data.\n\nattention2 = attention1.unstack()\nattention2.fillna('')\n\n\n\n\n\n  \n    \n      \n      \n      score\n    \n    \n      \n      subject\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n      11\n      12\n      13\n      14\n      15\n      16\n      17\n      18\n      19\n      20\n    \n    \n      attention\n      solutions\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      divided\n      1\n      2.0\n      3.0\n      3.0\n      5.0\n      4.0\n      5.0\n      5.0\n      5.0\n      2.0\n      6.0\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n    \n      2\n      4.0\n      4.0\n      5.0\n      7.0\n      5.0\n      5.0\n      4.5\n      7.0\n      3.0\n      5.0\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n    \n      3\n      7.0\n      5.0\n      6.0\n      5.0\n      8.0\n      6.0\n      6.0\n      8.0\n      7.0\n      6.0\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n    \n      focused\n      1\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      6.0\n      8.0\n      6.0\n      8.0\n      8.0\n      6.0\n      7.0\n      7.0\n      5.0\n      6.0\n    \n    \n      2\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      5.0\n      9.0\n      5.0\n      8.0\n      8.0\n      8.0\n      7.0\n      8.0\n      6.0\n      6.0\n    \n    \n      3\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      6.0\n      8.0\n      9.0\n      7.0\n      7.0\n      7.0\n      6.0\n      6.0\n      6.0\n      5.0\n    \n  \n\n\n\n\nWe can see clearly the data from two groups by attention, each consisting of 10 subjects, each employing three solutions.\nBy unstacking again, we can get a sense of which solution worked best.\n\nattention2.mean(1).unstack().T.style.background_gradient(axis=None)\n\n\n\n\n  \n    \n      attention\n      divided\n      focused\n    \n    \n      solutions\n       \n       \n    \n  \n  \n    \n      1\n      4.000000\n      6.700000\n    \n    \n      2\n      4.950000\n      7.000000\n    \n    \n      3\n      6.400000\n      6.700000\n    \n  \n\n\n\nIt appears the solution 3 performed well.\n\n\n.stack()\nStack is the opposite of .unstack(), of course. It will project a column name series into the values of a single column.\nDetails\nLet look at this with the taxis database.\n\ntaxis = sns.load_dataset('taxis')\n\n\ntaxis.head()\n\n\n\n\n\n  \n    \n      \n      pickup\n      dropoff\n      passengers\n      distance\n      fare\n      tip\n      tolls\n      total\n      color\n      payment\n      pickup_zone\n      dropoff_zone\n      pickup_borough\n      dropoff_borough\n    \n  \n  \n    \n      0\n      2019-03-23 20:21:09\n      2019-03-23 20:27:24\n      1\n      1.60\n      7.0\n      2.15\n      0.0\n      12.95\n      yellow\n      credit card\n      Lenox Hill West\n      UN/Turtle Bay South\n      Manhattan\n      Manhattan\n    \n    \n      1\n      2019-03-04 16:11:55\n      2019-03-04 16:19:00\n      1\n      0.79\n      5.0\n      0.00\n      0.0\n      9.30\n      yellow\n      cash\n      Upper West Side South\n      Upper West Side South\n      Manhattan\n      Manhattan\n    \n    \n      2\n      2019-03-27 17:53:01\n      2019-03-27 18:00:25\n      1\n      1.37\n      7.5\n      2.36\n      0.0\n      14.16\n      yellow\n      credit card\n      Alphabet City\n      West Village\n      Manhattan\n      Manhattan\n    \n    \n      3\n      2019-03-10 01:23:59\n      2019-03-10 01:49:51\n      1\n      7.70\n      27.0\n      6.15\n      0.0\n      36.95\n      yellow\n      credit card\n      Hudson Sq\n      Yorkville West\n      Manhattan\n      Manhattan\n    \n    \n      4\n      2019-03-30 13:27:42\n      2019-03-30 13:37:14\n      3\n      2.16\n      9.0\n      1.10\n      0.0\n      13.40\n      yellow\n      credit card\n      Midtown East\n      Yorkville West\n      Manhattan\n      Manhattan\n    \n  \n\n\n\n\n\ntaxis1 = taxis.set_index(['pickup','dropoff']).sort_index().stack().to_frame('val')\ntaxis1.index.names = ['pickup','dropoff','field']\n\n\ntaxis1.sample(10)\n\n\n\n\n\n  \n    \n      \n      \n      \n      val\n    \n    \n      pickup\n      dropoff\n      field\n      \n    \n  \n  \n    \n      2019-03-23 13:13:20\n      2019-03-23 13:15:13\n      dropoff_zone\n      Hudson Sq\n    \n    \n      2019-03-21 01:30:10\n      2019-03-21 01:50:15\n      tolls\n      0.0\n    \n    \n      2019-03-04 14:13:31\n      2019-03-04 14:24:15\n      tolls\n      0.0\n    \n    \n      2019-03-06 21:00:00\n      2019-03-06 21:04:45\n      passengers\n      1\n    \n    \n      2019-03-08 21:43:33\n      2019-03-08 21:45:48\n      tolls\n      0.0\n    \n    \n      2019-03-07 14:27:58\n      2019-03-07 14:45:49\n      pickup_borough\n      Queens\n    \n    \n      2019-03-14 15:11:21\n      2019-03-14 15:21:02\n      dropoff_zone\n      Upper West Side North\n    \n    \n      2019-03-14 16:49:58\n      2019-03-14 17:07:29\n      fare\n      14.5\n    \n    \n      2019-03-13 16:16:05\n      2019-03-13 16:28:11\n      dropoff_borough\n      Manhattan\n    \n    \n      2019-03-10 16:13:48\n      2019-03-10 16:17:53\n      total\n      7.8\n    \n  \n\n\n\n\n\ntaxis1.loc['2019-02-28 23:29:03']\n\n\n\n\n\n  \n    \n      \n      \n      val\n    \n    \n      dropoff\n      field\n      \n    \n  \n  \n    \n      2019-02-28 23:32:35\n      passengers\n      1\n    \n    \n      distance\n      0.9\n    \n    \n      fare\n      5.0\n    \n    \n      tip\n      0.0\n    \n    \n      tolls\n      0.0\n    \n    \n      total\n      6.3\n    \n    \n      color\n      green\n    \n    \n      payment\n      cash\n    \n    \n      pickup_zone\n      Old Astoria\n    \n    \n      dropoff_zone\n      Long Island City/Queens Plaza\n    \n    \n      pickup_borough\n      Queens\n    \n    \n      dropoff_borough\n      Queens"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "title": "NB: Introducing Pandas II",
    "section": "Combining DataFrames",
    "text": "Combining DataFrames\n\npd.concat()\nConcatenate pandas objects along an axis.\nDetails\nCreate two dfs and vertically stack them\n\ndf1 = pd.DataFrame(np.random.randn(3, 4))\ndf2 = pd.DataFrame(np.random.randn(3, 4))\n\n\ndf1\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      -0.334874\n      -1.179623\n      -0.369825\n      0.748533\n    \n    \n      1\n      -0.376463\n      -1.813195\n      -0.342195\n      -0.732275\n    \n    \n      2\n      0.184883\n      -0.745494\n      0.503854\n      0.497544\n    \n  \n\n\n\n\n\ndf2\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      1.411402\n      -0.543350\n      -0.020294\n      0.789886\n    \n    \n      1\n      0.786837\n      0.960382\n      -1.093336\n      0.551457\n    \n    \n      2\n      0.582368\n      1.606100\n      1.715443\n      -0.481616\n    \n  \n\n\n\n\nConcat rows\n\ndf3 = pd.concat([df1, df2], axis=0)\n\n\ndf3\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      -0.334874\n      -1.179623\n      -0.369825\n      0.748533\n    \n    \n      1\n      -0.376463\n      -1.813195\n      -0.342195\n      -0.732275\n    \n    \n      2\n      0.184883\n      -0.745494\n      0.503854\n      0.497544\n    \n    \n      0\n      1.411402\n      -0.543350\n      -0.020294\n      0.789886\n    \n    \n      1\n      0.786837\n      0.960382\n      -1.093336\n      0.551457\n    \n    \n      2\n      0.582368\n      1.606100\n      1.715443\n      -0.481616\n    \n  \n\n\n\n\nConcat columns\nThis assumes that the indexes represent IDs of specific things or events.\n\ndf4 = pd.concat([df1, df2], axis=1, keys=['foo', 'bar'])\n\n\ndf4\n\n\n\n\n\n  \n    \n      \n      foo\n      bar\n    \n    \n      \n      0\n      1\n      2\n      3\n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      -0.334874\n      -1.179623\n      -0.369825\n      0.748533\n      1.411402\n      -0.543350\n      -0.020294\n      0.789886\n    \n    \n      1\n      -0.376463\n      -1.813195\n      -0.342195\n      -0.732275\n      0.786837\n      0.960382\n      -1.093336\n      0.551457\n    \n    \n      2\n      0.184883\n      -0.745494\n      0.503854\n      0.497544\n      0.582368\n      1.606100\n      1.715443\n      -0.481616\n    \n  \n\n\n\n\n\ndf4.foo\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      -0.334874\n      -1.179623\n      -0.369825\n      0.748533\n    \n    \n      1\n      -0.376463\n      -1.813195\n      -0.342195\n      -0.732275\n    \n    \n      2\n      0.184883\n      -0.745494\n      0.503854\n      0.497544\n    \n  \n\n\n\n\n\n\n.merge()\nSQL-style joining of tables (DataFrames) – although Pandas has a .join() method, too.\nImportant parameters include:\n\nhow : type of merge {‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’\non : names to join on\n\nDetails\nCreate two tables, left and right. Then right join them on key.\nRight join means include all records from table on right.\nThe key is used for matching up the records.\n\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"lval\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"rval\": [4, 5, 8]})\nmerged = pd.merge(left, right, on=\"key\", how=\"right\")\n\n\nleft\n\n\n\n\n\n  \n    \n      \n      key\n      lval\n    \n  \n  \n    \n      0\n      jamie\n      15\n    \n    \n      1\n      bill\n      22\n    \n  \n\n\n\n\n\nright\n\n\n\n\n\n  \n    \n      \n      key\n      rval\n    \n  \n  \n    \n      0\n      jamie\n      4\n    \n    \n      1\n      bill\n      5\n    \n    \n      2\n      asher\n      8\n    \n  \n\n\n\n\n\nmerged\n\n\n\n\n\n  \n    \n      \n      key\n      lval\n      rval\n    \n  \n  \n    \n      0\n      jamie\n      15.0\n      4\n    \n    \n      1\n      bill\n      22.0\n      5\n    \n    \n      2\n      asher\n      NaN\n      8\n    \n  \n\n\n\n\nNotice the NaN inserted into the record with key='asher', since the left table didn’t contain the key.\nMatching column names\nIn this next example, the value columns have the same name: val. Notice what happens to the column names.\n\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"val\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"val\": [4, 5, 8]})\nmerged = pd.merge(left, right, on=\"key\", how=\"right\")\n\n\nleft\n\n\n\n\n\n  \n    \n      \n      key\n      val\n    \n  \n  \n    \n      0\n      jamie\n      15\n    \n    \n      1\n      bill\n      22\n    \n  \n\n\n\n\n\nright\n\n\n\n\n\n  \n    \n      \n      key\n      val\n    \n  \n  \n    \n      0\n      jamie\n      4\n    \n    \n      1\n      bill\n      5\n    \n    \n      2\n      asher\n      8\n    \n  \n\n\n\n\n\nmerged\n\n\n\n\n\n  \n    \n      \n      key\n      val_x\n      val_y\n    \n  \n  \n    \n      0\n      jamie\n      15.0\n      4\n    \n    \n      1\n      bill\n      22.0\n      5\n    \n    \n      2\n      asher\n      NaN\n      8\n    \n  \n\n\n\n\n\n\n.join()\nAn SQL-like joiner, but this one takes advantage of indexes.\nGive our dataframes indexes and distinctive columns names.\nDetails\n\nleft2 = left.set_index('key').copy()\nright2 = right.set_index('key').copy()\n\n\nleft2\n\n\n\n\n\n  \n    \n      \n      val\n    \n    \n      key\n      \n    \n  \n  \n    \n      jamie\n      15\n    \n    \n      bill\n      22\n    \n  \n\n\n\n\n\nright2\n\n\n\n\n\n  \n    \n      \n      val\n    \n    \n      key\n      \n    \n  \n  \n    \n      jamie\n      4\n    \n    \n      bill\n      5\n    \n    \n      asher\n      8\n    \n  \n\n\n\n\n\nright2.join(left2, rsuffix='_y') # Defaults to 'left'\n\n\n\n\n\n  \n    \n      \n      val\n      val_y\n    \n    \n      key\n      \n      \n    \n  \n  \n    \n      jamie\n      4\n      15.0\n    \n    \n      bill\n      5\n      22.0\n    \n    \n      asher\n      8\n      NaN\n    \n  \n\n\n\n\n\nright2.join(left2, rsuffix='_y', how='inner')\n\n\n\n\n\n  \n    \n      \n      val\n      val_y\n    \n    \n      key\n      \n      \n    \n  \n  \n    \n      jamie\n      4\n      15\n    \n    \n      bill\n      5\n      22\n    \n  \n\n\n\n\n\n\nSummary\n\nUse join if you have shared indexes\nUse merge if you do not have shared indexes\nUse concat to combine based on shared indexes or columns\nPay attention to resulting dataframe indexes and column names"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "title": "NB: Introducing Pandas II",
    "section": "Reshape with .reshape()",
    "text": "Reshape with .reshape()\nChanges the object’s shape\nWe illustrate creating pandas Series, extracting array of length 6, and reshaping to 3x2 array.\nCreate a series:\n\nser = pd.Series([1, 1, 2, 3, 5, 8]) \n\nExtract values:\n\nvals = ser.values \n\n\nvals\n\narray([1, 1, 2, 3, 5, 8])\n\n\n\ntype(vals)\n\nnumpy.ndarray\n\n\n\nvals.shape\n\n(6,)\n\n\nReshaping a series:\n\nreshaped_vals = vals.reshape((3, 2)) \n\n\nreshaped_vals\n\narray([[1, 1],\n       [2, 3],\n       [5, 8]])\n\n\n\ntype(reshaped_vals)\n\nnumpy.ndarray\n\n\n\nreshaped_vals.shape\n\n(3, 2)\n\n\nIncluding -1 as one of the dimensions tells numpy: infer this dimension from the data and the other dimensions.\nExample: enforce 3 columns:\n\nvals.reshape(-1,3)\n\narray([[1, 1, 2],\n       [3, 5, 8]])\n\n\nEnforce 3 rows:\n\nvals.reshape(3,-1)\n\narray([[1, 1],\n       [2, 3],\n       [5, 8]])\n\n\nNotice the shape of original array: (6,).\nThis is a vector with one dimension, and is different from two-dimensional (6,1) array."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "title": "NB: Introducing Pandas II",
    "section": "Categoricals",
    "text": "Categoricals\nCategorical data takes discrete values where computation on the values does not make sense.\nZip code is a typical example.\nTo include categoricals in models, often they must be converted to numeric form.\n\nget_dummies()\nDummy code categorical data\nImportant parameters:\n\nprefix : append prefix to column names (a good idea for later use)\ndrop_first: remove first level, as only k-1 variables needed to represent k levels\n\nDetails\n\ncats = pd.DataFrame({'breed':['persian', 'persian', 'siamese', 'himalayan', 'burmese']})\n\n\ncats\n\n\n\n\n\n  \n    \n      \n      breed\n    \n  \n  \n    \n      0\n      persian\n    \n    \n      1\n      persian\n    \n    \n      2\n      siamese\n    \n    \n      3\n      himalayan\n    \n    \n      4\n      burmese\n    \n  \n\n\n\n\n\ndummy_cats = pd.get_dummies(cats.breed, prefix='breed')\n\n\ndummy_cats\n\n\n\n\n\n  \n    \n      \n      breed_burmese\n      breed_himalayan\n      breed_persian\n      breed_siamese\n    \n  \n  \n    \n      0\n      0\n      0\n      1\n      0\n    \n    \n      1\n      0\n      0\n      1\n      0\n    \n    \n      2\n      0\n      0\n      0\n      1\n    \n    \n      3\n      0\n      1\n      0\n      0\n    \n    \n      4\n      1\n      0\n      0\n      0\n    \n  \n\n\n\n\n\npd.get_dummies(cats.breed, drop_first=True, prefix='breed')\n\n\n\n\n\n  \n    \n      \n      breed_himalayan\n      breed_persian\n      breed_siamese\n    \n  \n  \n    \n      0\n      0\n      1\n      0\n    \n    \n      1\n      0\n      1\n      0\n    \n    \n      2\n      0\n      0\n      1\n    \n    \n      3\n      1\n      0\n      0\n    \n    \n      4\n      0\n      0\n      0\n    \n  \n\n\n\n\nNotice burmese was dropped (first level by alphabet) since it can be inferred.\nLet’s try it on the iris dataset.\n\niris\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n      sepal_len_sq\n      sepal_len_wid_avg\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n      26.01\n      4.30\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n      24.01\n      3.95\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n      22.09\n      3.95\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n      21.16\n      3.85\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n      25.00\n      4.30\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n      44.89\n      4.85\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n      39.69\n      4.40\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n      42.25\n      4.75\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n      38.44\n      4.80\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n      34.81\n      4.45\n    \n  \n\n150 rows × 7 columns\n\n\n\nCalled get_dummies() by itself will handle all categoricals for you.\nLook at what happened to the species column.\n\npd.get_dummies(iris)\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      sepal_len_sq\n      sepal_len_wid_avg\n      species_setosa\n      species_versicolor\n      species_virginica\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      26.01\n      4.30\n      1\n      0\n      0\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      24.01\n      3.95\n      1\n      0\n      0\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      22.09\n      3.95\n      1\n      0\n      0\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      21.16\n      3.85\n      1\n      0\n      0\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      25.00\n      4.30\n      1\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      44.89\n      4.85\n      0\n      0\n      1\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      39.69\n      4.40\n      0\n      0\n      1\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      42.25\n      4.75\n      0\n      0\n      1\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      38.44\n      4.80\n      0\n      0\n      1\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      34.81\n      4.45\n      0\n      0\n      1\n    \n  \n\n150 rows × 9 columns\n\n\n\nYou can call it one numeric columns, too.\n\npd.get_dummies(iris.sepal_length).sum().plot.bar()\n\n<Axes: >"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-03-NarrowWide.html#hot-encoding",
    "href": "notebooks/M06_Pandas/M06-03-NarrowWide.html#hot-encoding",
    "title": "NB: Narrow vs Wide Tables",
    "section": "1 Hot Encoding",
    "text": "1 Hot Encoding\nProject values onto the column axis.\n\n# pd.get_dummies?\n\n\npd.get_dummies(WIDE.cat)\n\n\n\n\n\n  \n    \n      \n      19\n      21\n      26\n      27\n      28\n    \n    \n      owner\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      A\n      0\n      0\n      1\n      0\n      0\n    \n    \n      B\n      1\n      0\n      0\n      0\n      0\n    \n    \n      C\n      0\n      0\n      1\n      0\n      0\n    \n    \n      D\n      1\n      0\n      0\n      0\n      0\n    \n    \n      E\n      0\n      1\n      0\n      0\n      0\n    \n    \n      F\n      0\n      0\n      0\n      1\n      0\n    \n    \n      G\n      0\n      0\n      0\n      0\n      1\n    \n  \n\n\n\n\n\npd.get_dummies(NARROW.n)\n\n\n\n\n\n  \n    \n      \n      \n      15\n      16\n      18\n      19\n      20\n      21\n      24\n      25\n      26\n      27\n      28\n      29\n      30\n      31\n      32\n      33\n    \n    \n      owner\n      pet\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      A\n      cat\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      B\n      cat\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      C\n      cat\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      D\n      cat\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n    \n    \n      E\n      cat\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n    \n    \n      F\n      cat\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      G\n      cat\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n    \n    \n      dog\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ferret\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n    \n    \n      parraot\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      snake\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      turtle\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\npd.get_dummies(NARROW.n).sum().plot.bar();"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "href": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "title": "NB: Method Chaining",
    "section": "",
    "text": "Method chaining is supported by many objects in Python.\nThis allows you to “chain” a series of methods without having to defined temporary variables.\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\niris = sns.load_dataset('iris')\n\n\niris\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\n\niris.index.name = 'iris_id'\n\n\niris\n\n\n\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n    \n      iris_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\n\niris = iris.reset_index()\\\n    .set_index(['species', 'iris_id'])\n\n\niris\n\n\n\n\n\n  \n    \n      \n      \n      level_0\n      index\n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n    \n    \n      species\n      iris_id\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      0\n      0\n      0\n      5.1\n      3.5\n      1.4\n      0.2\n    \n    \n      1\n      1\n      1\n      4.9\n      3.0\n      1.4\n      0.2\n    \n    \n      2\n      2\n      2\n      4.7\n      3.2\n      1.3\n      0.2\n    \n    \n      3\n      3\n      3\n      4.6\n      3.1\n      1.5\n      0.2\n    \n    \n      4\n      4\n      4\n      5.0\n      3.6\n      1.4\n      0.2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      virginica\n      145\n      145\n      145\n      6.7\n      3.0\n      5.2\n      2.3\n    \n    \n      146\n      146\n      146\n      6.3\n      2.5\n      5.0\n      1.9\n    \n    \n      147\n      147\n      147\n      6.5\n      3.0\n      5.2\n      2.0\n    \n    \n      148\n      148\n      148\n      6.2\n      3.4\n      5.4\n      2.3\n    \n    \n      149\n      149\n      149\n      5.9\n      3.0\n      5.1\n      1.8\n    \n  \n\n150 rows × 6 columns\n\n\n\n\niris.groupby('species').mean('mean').plot.barh();\n\n\n\n\n\niris.groupby('species').agg('mean').T.setosa.plot.barh();\n\n\n\n\n\niris.groupby(['sepal_length','sepal_width']).petal_length\\\n    .mean()\\\n    .to_frame('mean petal_length')\\\n    .plot(style='.', rot=45);"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html",
    "title": "NB: Pandas and SQL",
    "section": "",
    "text": "Overview\nIn this exercise, we split the raw table into tables corresponding the implied subjects we discovered.\nThen we use joins to reassemble the data.\nWe will assumed that the implied subjects are ARTIST, GENRE, ALBUM, and REVIEW.\nTo do this, we use Pandas to store the initial table as a dataframe, and then we create variations of that dataframe and save those to the database as new tables.\nWe create an empty database to store our work.\nGet the review data.\nHere’s a quick to inventory which columns have missing data.\nDrop dupicate rows, too.\nSo, we have create four primary tables from our raw data.\nIf we want to see genre in the review, we can create a join."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-artist-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-artist-table",
    "title": "NB: Pandas and SQL",
    "section": "The artist table",
    "text": "The artist table\nWe get the unique artist names and save them to a new dataframe, and change the column name and the index name in the process so that we have well-named columns in our table.\n\nartists = raw.artist.value_counts().to_frame('n_reviews')\nartists.index.name = 'artist_id'\nartists.to_sql('artist', db, index=True, if_exists='replace', index_label='artist_id')\n\n9249\n\n\n\nartists.sample(10)\n\n\n\n\n\n  \n    \n      \n      n_reviews\n    \n    \n      artist_id\n      \n    \n  \n  \n    \n      Flying Canyon\n      1\n    \n    \n      Florence and the Machine\n      4\n    \n    \n      Larkin Grimm\n      3\n    \n    \n      Dylan LeBlanc\n      2\n    \n    \n      Devo\n      2\n    \n    \n      Tory Lanez\n      3\n    \n    \n      Sacred Paws\n      1\n    \n    \n      Little Wings\n      4\n    \n    \n      Boris / Ian Astbury\n      1\n    \n    \n      The Sight Below\n      2\n    \n  \n\n\n\n\nHow many albums does Wilco have?\n\nartists.loc['Wilco'].n_reviews\n\n14\n\n\n\nPattern\n\nImport the columns that you want from raw table into a new dataframe. value_counts() is your friend.\nRename columns and index as desired.\nPut the new dataframe into the database as a new table. No need to define the schema!"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-genre-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-genre-table",
    "title": "NB: Pandas and SQL",
    "section": "The genre table",
    "text": "The genre table\n\ngenres = raw.genre.value_counts().to_frame('n_reviews')\ngenres.index.name = 'genre_id'\ngenres.to_sql('genre', db, index=True, if_exists='replace', index_label='genre_id')\n\n10\n\n\n\ngenres\n\n\n\n\n\n  \n    \n      \n      n_reviews\n    \n    \n      genre_id\n      \n    \n  \n  \n    \n      Rock\n      6954\n    \n    \n      Electronic\n      4020\n    \n    \n      None\n      2320\n    \n    \n      Experimental\n      1696\n    \n    \n      Rap\n      1481\n    \n    \n      Pop/R&B\n      1157\n    \n    \n      Metal\n      781\n    \n    \n      Folk/Country\n      700\n    \n    \n      Jazz\n      257\n    \n    \n      Global\n      178\n    \n  \n\n\n\n\n\ngenres.plot.barh();"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-album-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-album-table",
    "title": "NB: Pandas and SQL",
    "section": "The album table",
    "text": "The album table\n\nalbums = raw[['album','artist','genre']].value_counts().to_frame('n_reviews').reset_index().set_index(['artist','album'])\nalbums.index.names = ['artist_id','album_id']\nalbums = albums.rename(columns={'genre':'genre_id'})\nalbums.to_sql('album', db, index=True, if_exists='replace', index_label=albums.index.names)\n\n19506\n\n\n\nalbums\n\n\n\n\n\n  \n    \n      \n      \n      genre_id\n      n_reviews\n    \n    \n      artist_id\n      album_id\n      \n      \n    \n  \n  \n    \n      NÙze\n      Songs on the Rocks\n      None\n      2\n    \n    \n      The Postal Service\n      Give Up\n      Electronic\n      2\n    \n    \n      Enon\n      Believo!\n      Rock\n      2\n    \n    \n      Tim Hecker\n      Radio Amor\n      Experimental\n      2\n    \n    \n      Of Montreal\n      If He Is Protecting Our Nation, Then Who Will Protect Big Oil, Our Children?\n      Rock\n      2\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      Russian Circles\n      Guidance\n      Metal\n      1\n    \n    \n      Various Artists\n      Guess Who This Is: A Tribute to Dom Leone\n      None\n      1\n    \n    \n      Beck\n      Guerolito\n      Rock\n      1\n    \n    \n      Guero\n      Rock\n      1\n    \n    \n      Pretty Girls Make Graves\n      …lan Vital\n      None\n      1\n    \n  \n\n19506 rows × 2 columns"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-review-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-review-table",
    "title": "NB: Pandas and SQL",
    "section": "The review table",
    "text": "The review table\n\nreviews = raw[['album', 'artist', 'best', 'date', 'review', 'score']].copy()\nreviews.columns = ['album_id', 'artist_id', 'is_best', 'review_date', 'review_content', 'album_score']\nreviews = reviews.set_index(['artist_id','album_id','review_date'])\nreviews.to_sql('review', db, index=True, if_exists='replace', index_label=reviews.index.names)\n\n19544\n\n\n\nreviews.head()\n\n\n\n\n\n  \n    \n      \n      \n      \n      is_best\n      review_content\n      album_score\n    \n    \n      artist_id\n      album_id\n      review_date\n      \n      \n      \n    \n  \n  \n    \n      Wilco\n      A.M./Being There\n      December 6 2017\n      1\n      Best new reissue 1 / 2 Albums Newly reissued a...\n      7.0\n    \n    \n      Hopsin\n      No Shame\n      December 6 2017\n      0\n      On his corrosive fifth album, the rapper takes...\n      3.5\n    \n    \n      Glassjaw\n      Material Control\n      December 6 2017\n      0\n      On their first album in 15 years, the Long Isl...\n      6.6\n    \n    \n      Nabihah Iqbal\n      Weighing of the Heart\n      December 6 2017\n      0\n      On her debut LP, British producer Nabihah Iqba...\n      7.7\n    \n    \n      Neil Young / Promise of the Real\n      The Visitor\n      December 5 2017\n      0\n      While still pointedly political, Neil Youngís ...\n      6.7\n    \n  \n\n\n\n\n\nreviews.loc['Wilco'].sort_index()\n\n\n\n\n\n  \n    \n      \n      \n      is_best\n      review_content\n      album_score\n    \n    \n      album_id\n      review_date\n      \n      \n      \n    \n  \n  \n    \n      A Ghost Is Born\n      June 21 2004\n      0\n      At the time of Yankee Hotel Foxtrot's non-trad...\n      6.6\n    \n    \n      A.M./Being There\n      December 6 2017\n      1\n      Best new reissue 1 / 2 Albums Newly reissued a...\n      7.0\n    \n    \n      Alpha Mike Foxtrot: Rare Tracks 1994ñ2014/What's Your 20? Essential Tracks 1994ñ2014\n      November 19 2014\n      0\n      1 / 2 Albums Both the†Alpha Mike Foxtrot†rarit...\n      7.0\n    \n    \n      Kicking Television: Live in Chicago\n      November 13 2005\n      0\n      This 2xCD live album finds the now six-piece b...\n      8.3\n    \n    \n      More Like the Moon EP\n      April 27 2003\n      0\n      Okay, show of hands: how many of you people ha...\n      7.0\n    \n    \n      Schmilco\n      September 9 2016\n      0\n      Wilco's 10th album is a largely acoustic affai...\n      7.0\n    \n    \n      Sky Blue Sky\n      May 14 2007\n      0\n      Despite the experimental pedigree of their new...\n      5.2\n    \n    \n      Star Wars\n      July 23 2015\n      0\n      With its $0 asking price, lawsuit-baiting titl...\n      7.7\n    \n    \n      Summerteeth\n      February 28 1999\n      0\n      After parting ways with Uncle Tupelo partner J...\n      9.4\n    \n    \n      The Whole Love\n      September 26 2011\n      0\n      Wilco's adventurous, self-produced eighth LP f...\n      6.9\n    \n    \n      The Wilco Book\n      October 31 2004\n      0\n      We don't usually review books, but seeing that...\n      7.5\n    \n    \n      Wilco (The Album)\n      June 29 2009\n      0\n      Jeff Tweedy and co.'s latest does what its tit...\n      7.3\n    \n    \n      Yankee Hotel Foxtrot\n      April 21 2002\n      0\n      Myth, it has been said, is the buried part of ...\n      10.0\n    \n    \n      iTunes Session\n      February 2 2012\n      0\n      This eight-song EP, comprised primarily of tra...\n      6.7\n    \n  \n\n\n\n\n\nreviews.loc['Wilco'].album_score.mean().round(2)\n\n7.4\n\n\nNote how the new review table has fewer columns – e.g. we no longer have genre."
  },
  {
    "objectID": "modules/m07/m07-intro.html#topics",
    "href": "modules/m07/m07-intro.html#topics",
    "title": "M07 Classes",
    "section": "Topics",
    "text": "Topics\n\nConcept of object-oriented programming\nConcept of classes\nPython’s approach to organizing classes\nPython’s approach to creating and using classes\nCreating your own classes"
  },
  {
    "objectID": "modules/m07/m07-intro.html#readings",
    "href": "modules/m07/m07-intro.html#readings",
    "title": "M07 Classes",
    "section": "Readings",
    "text": "Readings\n\n\nClasses (Official Python)\n\n\nLutz 2019, Part VI, Classes and OOP, Chapters 26–29."
  },
  {
    "objectID": "topics/what-is-oop.html#the-basic-idea",
    "href": "topics/what-is-oop.html#the-basic-idea",
    "title": "What is OOP?",
    "section": "The Basic Idea",
    "text": "The Basic Idea\nThe usual way that Object-Oriented Programming (OOP) is introduced to students is as a natural way to describe things in the world.\nThe story told goes something like this:\nThe world consists of a bunch of things.\nThese things may be animate or inanimate, but they have two things in common:\n\nAttributes: qualities, traits, features\nBehaviors: ways of interacting with other things\n\nSo, anything from an orange to the economy of France are things.\n\nThe properties of an orange are its color, weight, species, etc.\nThe properties of the economy of France are its GDP, its industrial sectors, its rate of unemployment, etc.\nThe behaviors of an orange are things like being eaten, or rotting.\nThe behaviors of an economy are going into a recession, etc.\n\nThese things are called objects.\nAll objects that exist are instances of abstract classes.\nEvery object that exists is an instance of an abstract class.\n\nA specific orange is an instance of the class of Oranges.\nFrance’s economy is an instance of the class of National Economies.\n\n\n\n\n\n\n\nNote\n\n\n\nThe nature of these classes raises an important philosophical question, but we will not address this here.\n\n\nClasses are organized into trees.\nClasses are organized into tree-like structures.\nSpecific classes inherit the attributes and behaviors of their parent and ancestors, although they can override these as well.\nSo, an organge might have this lineage:\nPlant > Magnoliophyta > Magnoliopsida > Rosidae > Sapindales > Rutaceae > Citrus > Valencia Orange\n\n\n\n\n\n\nNote\n\n\n\nThe idea that the world is organized into a hierarchy of things descending from some primary substance is ancient. Here is an example from the European Middle Ages:\n\n\n\n\n\nThe Poryphyrian Tree"
  },
  {
    "objectID": "topics/what-is-oop.html#relationship-to-coding",
    "href": "topics/what-is-oop.html#relationship-to-coding",
    "title": "What is OOP?",
    "section": "Relationship to Coding",
    "text": "Relationship to Coding\nOOP is based on the analogy that code can be organized in this way.\nThis is because software is often about the world – we write software to model things in the world.\n\nFor example, if I wanted to write code simulate the traffic pattern of a city, I might start by creating a class called Car.\nThis Car would have properties, such as its make and model, but also behaviors like driving.\nThen, in simulation program, I would create a bunch of Car instances and have them do things like drive on streets, etc."
  },
  {
    "objectID": "topics/what-is-oop.html#another-way-to-look-at-it",
    "href": "topics/what-is-oop.html#another-way-to-look-at-it",
    "title": "What is OOP?",
    "section": "Another Way to Look at It",
    "text": "Another Way to Look at It\nNow, although this way of looking at OOP is somewhat intuitive, it can be misleading.\nIt is great for understanding the data structure that OOP uses.\n\nA tree-like organization of classes\nClasses with attributes and behaviors\n\nBut the OO pattern is not always used to model things in the world.\nSometimes is just a good way to organize code – OOP is a data structure for the data that is code.\nIn other words, just as we say that dimension can refer to the world or to the structure of data, so too can an object.\nWe use OOP to provide structure to our code, regardless of whether it paints an accurate picture of the world."
  },
  {
    "objectID": "topics/what-is-oop.html#the-trinity",
    "href": "topics/what-is-oop.html#the-trinity",
    "title": "What is OOP?",
    "section": "The Trinity",
    "text": "The Trinity\nOOP theory states that classes exhibit three fundamental properties that make them powerful:\n\nEncapsulation\nInheritance\nPolymorphism\n\nEncapsulation means that objects are self-contained. They have their own scope, data, and logic. Ideally, they can be deployed in any context and be shielded from external states.\n\nObjects are meant to be black boxes to users: they should only be interacted with via the methods and attributes provided.\nNothing else should influence the state of the object except what it contains and what is passed to it.\n\nInheritance means that classes can be subclasses of other classes and thereby inherit their ancestor attributes and methods. - Some programming languages allow only single inheritance – classes can have one parent. - Python supports multiple inheritance, but this can be complicated to use.\nPolymorphism means that methods can perform different behaviors based on the arguments they are passed. - That is, a function can be defined more than once in a class, as long as it each has a unique signature. - A signature is the particular pattern of arguments (parameters) a method has.\nToday, we are only going to focus on encapsulation …\n\nOnce upon a time, there was a movement to implement only this concept.\nMicrosoft, for example, developed a component-based approach to programming, where components are encapsulated unites of code without the complexity of inheritance."
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "title": "NB: Introducing Classes",
    "section": "Introduction",
    "text": "Introduction\nClasses are a way organizing code into bundles of variables and functions called attributes and methods.\nEach class models some thing — a thing in the world, a process, a model, or just some convenient way of grouping code.\nFor example, a logistic regression model would have attributes like:\n\nweights\nan optional intercept term\nthe maximum number of iterations\n\nThese attributes help describe the object; they give the object’s state.\nThe logistic regression model would have functionality such as:\n\nthe optimization routine used in training\na prediction function\n\nThe behavior, or functionality, is supported by methods, which are functions included in the class.\nHere are a couple of others way to think of a class:\n\nIt provides a template for creating an object and for working with the object.\nIt constitutes a kind of definition of something in the world.\n\n\nA First Example\nOk, let’s look at examples, starting with a very small, simple class.\nThe class contains:\n\na name Ferrari458\na docstring for a quick description\nan attribute, which is number of cylinders in the engine\na method\n\n\nclass Ferrari458:\n    \"\"\"This is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\nYou can learn about the class by printing the docstring:\n\nFerrari458.__doc__\n\n'This is a Ferrari 458 object'\n\n\nYou can also get detailed help like this:\n\nhelp(Ferrari458)\n\nHelp on class Ferrari458 in module __main__:\n\nclass Ferrari458(builtins.object)\n |  This is a Ferrari 458 object\n |  \n |  Methods defined here:\n |  \n |  print_origin(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  cylinders = 8\n\n\n\nNext, we create an object from the class (also called an instance of the class).\nIt is called like a function with no parameters.\nThe process is called instantiation.\n\nmyferrari = Ferrari458()\n\nWe show the number of cylinders by using the object.attribute format:\n\nmyferrari.cylinders\n\n8\n\n\nThen we call its method .print_origin() to learn where this sweet machine was built.\n\nmyferrari.print_origin()\n\n'I was built in Italy!'\n\n\nAs a convention, methods take self as their first argument. Methods can use self.attribute to extract their attributes.\nHere is an example, with method get_cylinders.\n\nclass Ferrari458_v2:\n    \"\"\"This is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_cylinders(self):\n        return self.cylinders\n\n\nmyferrari = Ferrari458_v2()\n\n\nmyferrari.get_cylinders()\n\n8"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "title": "NB: Introducing Classes",
    "section": "The .__init__() method",
    "text": "The .__init__() method\nThere is a special function called __init__ that will initialize the state of objects for you when you create them.\nUse it to supply more context-dependent information about your instance.\nLet’s look at another version of the class with init.\n\nclass Ferrari458_v3:\n    \"\"\"this is a Ferrari 458 object\"\"\"\n    cylinders = 8\n    \n    def __init__(self, color):\n        self.color = color\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_color(self):\n        return self.color\n\nBy adding the __init__ function, we can create objects if we pass the number of cylinders.\nIf we don’t pass this parameter, there will be an error.\nThis is because we did not define a default value for the color argument in our initialization method.\n\nferr1 = Ferrari458_v3()\n\nTypeError: Ferrari458_v3.__init__() missing 1 required positional argument: 'color'\n\n\nThis works:\n\nferr1 = Ferrari458_v3(\"red\")\n\nWe can access the initialized attribute using the dot operator, just as if it were declared at the top of the class:\n\nferr1.color\n\n'red'\n\n\nOr we can call the accessor method that we created.\n\nferr1.get_color()\n\n'red'\n\n\nNote that even though we initialized the car object with “red”, we can always change it:\n\nferr1.color = \"Cobalt\"\n\n\nferr1.get_color()\n\n'Cobalt'"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "title": "NB: Introducing Classes",
    "section": "The Meaning of self",
    "text": "The Meaning of self\nNote the presence of an argument and variable called self in the method definitions. - This stands for the intantiated object itself.\nSo, when you create an object like so:\nfoo = Foo()\n\nfoo is represented in the class definition as self.\n\nIf you want your method to access the other attributes and methods in an object, you need to put self as its first argument. - Note that when you use the method with an instance, you don’t pass the object name as an argument - The object name is passed implicitly by Python, since it knows which object called the methid\nYou can use any valid name you want for the name of the object itself, but the convention is to use self.\nNote that self is only used within the methods of a class, not outside of it. - Like functions, they don’t know what’s outside of them, nor does the containing code know what’s inside of them. - The self variable is the mechanism that allows methods to share data without having to pass and return a bunch of variables.\nThink of self as a data structure that stores the program itself - In this sense, it’s similar to recursion: A class definition contains a reference to itself! - But remember, the class definition is not a thing – it’s a template. - self is just a pronoun that allows an instance to access it’s own state."
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary",
    "title": "NB: Introducing Classes",
    "section": "Summary",
    "text": "Summary\nAn cobject is a self-contained bundle of methods and attributes. * Methods are basically functions. * Attributes are basically variables.\nA class definition is a template for creating objects. * Objects are class instances. * Classes are onbject types.\nObjects have their own scope, like functions. * They are meant to exchange information with their environment only through accessing attributes and calling methods\nWhen objects are first created, they often expect to have data passed to them. * This is called initializing the object. * These data are handled internally by the .__init__() method. * Data that are passed this way can be overridden by accessing the attributes they assigned to.\nThe methods of a class begin with self as the first argument. * This stands for the instance itself. * All methods and attributes are avaible to all other methods in the object through the self object.\nIf a method does not have self as its first argument, it cannot access the internal state or methods of the object. * The internal state is just the attributes and their current values. * These are called static methods. * Static methods are useful in providing functions to the environment in which their containing object is instantiated.\nThere is a lot more to the subject, but this is good enough to get started!"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#set-up",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#set-up",
    "title": "NB: Classes Example",
    "section": "Set Up",
    "text": "Set Up\n\nimport pandas as pd\nimport numpy as np"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "title": "NB: Classes Example",
    "section": "Method 1: Nothing Special",
    "text": "Method 1: Nothing Special\nWe define a set of functions that work in a sequence, where the return value of one is the argument of the other.\n\nDefine Functions\n\ndef create_die(weights):\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    my_die = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n    return my_die\n\ndef roll_dice(my_die, n_rolls=1):\n    results = []\n    for i in range(n_rolls):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    return pd.Series(results)\n\ndef plot_results(my_results):\n    my_results.value_counts().sort_index().plot.bar();\n\n\n\nCreate Instances\n\nn_rolls = 10\n\n\nfair_die = create_die([1,1,1,1,1,1,1])\n\n\nfair_die\n\n\n\n\n\n  \n    \n      \n      side\n      weights\n    \n  \n  \n    \n      0\n      1\n      0.142857\n    \n    \n      1\n      2\n      0.142857\n    \n    \n      2\n      3\n      0.142857\n    \n    \n      3\n      4\n      0.142857\n    \n    \n      4\n      5\n      0.142857\n    \n    \n      5\n      6\n      0.142857\n    \n    \n      6\n      7\n      0.142857\n    \n  \n\n\n\n\n\nfair_results = roll_dice(fair_die, n_rolls)\n\n\nfair_results\n\n0    3\n1    5\n2    6\n3    3\n4    6\n5    3\n6    3\n7    7\n8    1\n9    5\ndtype: int64\n\n\n\nplot_results(fair_results)\n\n\n\n\n\nunfair_die = create_die([1,1,1,1,1,5])\nunfair_results = roll_dice(unfair_die, n_rolls)\nplot_results(unfair_results)\n\n\n\n\n\n\nDoing it all at once\n\ndef do_it_all(weights):\n    plot_results(roll_dice(create_die(weights), n_rolls))\n\n\ndo_it_all(roll_dice(create_die([1,1,1,1,1,10]), n_rolls))"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "title": "NB: Classes Example",
    "section": "Method 2: With Globals",
    "text": "Method 2: With Globals\n\nDefine a Shared Data Structure\nWe create a dictionary called config to store our instance data.\nWe’ll treat this as a global.\n\nconfig = {}\nn_rolls2 = 10\n\n\n\nDefine Methods\n\ndef create_die2(die_id):\n    global config\n    config[die_id]['die'] = None\n    weights = config[die_id]['weights']\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    config[die_id]['die'] = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n\ndef roll_dice2(die_id):\n    global config\n    global n_rolls2\n    config[die_id]['results'] = None\n    my_die = config[die_id]['die']\n    results = []\n    for i in range(n_rolls2):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    config[die_id]['results'] = pd.Series(results)\n\ndef plot_results2(die_id):\n    global config\n    my_results = config[die_id]['results']\n    my_results.value_counts().sort_index().plot.bar();\n\ndef do_it_all2(die_id):\n    global config\n    global n_rolls2\n    print(\"Die ID:\", die_id)\n    print(\"Weights:\", config[die_id]['weights'])\n    print(\"Rolls:\", n_rolls2)\n    create_die2(die_id)\n    roll_dice2(die_id)\n    plot_results2(die_id)\n\n\n\nPopulate Config\nWe populate our configuration config with some instances.\n\nconfig = {\n    'fair': {\n        'weights': [1,1,1,1,1,1]\n    },\n    'unfair': {\n        'weights': [1,1,1,1,10,100],\n    }\n}\n\n\n\nCall Main Function\n\ndo_it_all2('fair')\n\nDie ID: fair\nWeights: [1, 1, 1, 1, 1, 1]\nRolls: 10\n\n\n\n\n\n\ndo_it_all2('unfair')\n\nDie ID: unfair\nWeights: [1, 1, 1, 1, 10, 100]\nRolls: 10\n\n\n\n\n\n\nn_rolls2 = 1000 # We change this, but it will affect all uses of the functions until we change it.\ndo_it_all2('unfair')\n\nDie ID: unfair\nWeights: [1, 1, 1, 1, 10, 100]\nRolls: 1000"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "title": "NB: Classes Example",
    "section": "Method 3: As Class",
    "text": "Method 3: As Class\nDefine a class that contains the config data structure and all the functions as attributes and methods.\n\nclass DieGame():\n    \n    n_rolls = 10\n    weights = [1,1,1,1,1,1]\n    \n    def __init__(self):\n        return None\n        \n    def create_die(self):\n        self.n_sides = len(self.weights)\n        self.my_probs = [i/sum(self.weights) for i in self.weights]\n        self.die = pd.DataFrame({\n            'side': range(1, self.n_sides + 1),\n            'weights': self.my_probs\n        })\n    \n    def roll_die(self):\n        results = []\n        for i in range(self.n_rolls):\n            result = self.die.side.sample(weights=self.die.weights).values[0]\n            results.append(result)\n        self.results = pd.Series(results)        \n        \n    def plot_results(self):\n        prob_model = pd.Series({i+1:round(p, 2) for i, p in enumerate(self.my_probs)})\n        print(\"Sides:\", self.n_sides)\n        print(\"Model:\")\n        print(prob_model)\n        print(\"Rolls:\", self.n_rolls)\n        self.results.value_counts().sort_index().plot.bar(rot=0);\n        \n    # We add another method because it's so easy :-)\n    def plot_probs(self):\n        pd.Series(self.my_probs).plot.pie(title=\"Die Model\")\n        \n    def do_it_all(self):\n        self.create_die()\n        self.roll_die()\n        self.plot_results()\n\n\ngame_1 = DieGame()\ngame_1.n_rolls = 100\ngame_1.do_it_all()\n\nSides: 6\nModel:\n1    0.17\n2    0.17\n3    0.17\n4    0.17\n5    0.17\n6    0.17\ndtype: float64\nRolls: 100\n\n\n\n\n\n\ngame_1.plot_probs()\n\n\n\n\n\ngame_2 = DieGame()\ngame_2.n_rolls = 100\ngame_2.weights = [1,1,1,5,10,10]\ngame_2.do_it_all()\n\nSides: 6\nModel:\n1    0.04\n2    0.04\n3    0.04\n4    0.18\n5    0.36\n6    0.36\ndtype: float64\nRolls: 100\n\n\n\n\n\n\ngame_2.plot_probs()"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "title": "NB: Classes Example",
    "section": "Conclusions",
    "text": "Conclusions\nThe OOP approach handles scoping issues as well as data management.\nNotice how the dictionary is replaced by the object.\nNot only does it provide a place to store the data, it also provides a schema for it: * You don’t need to remember what keys to put in the data dictionary of method 2. The object specifies them.\nNotice also that we don’t pass arguments to the object as we do with functions (although we can).\nWe assign values to attributes directly.\nCan you think of any other advantages or disadvantages?"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#some-useful-facts-about-python-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#some-useful-facts-about-python-classes",
    "title": "NB: More About Classes",
    "section": "Some Useful Facts about Python Classes",
    "text": "Some Useful Facts about Python Classes\n\nYou can put your classes in a .py file and import them into your other scripts.\nYou can put more than one class in a file.\nClass names are usuall CamelCase, but not instances\nWhen saving to a file:\n\nIf only one class, use a lower case name of the class\nIf more than one, use a package name, one that stands for the logical group the classes belong to"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "title": "NB: More About Classes",
    "section": "Anatomy of a Python Class",
    "text": "Anatomy of a Python Class\n\n## Import class dependencies here\nimport pandas as pd\nimport numpy as np\nimport re\nimport requests\nfrom lxml import etree\n\n## Use CamelCase to name your class\nclass MyClass(object): # Optionally pass ancestor classes to use inheritance\n    \"\"\"\n    Extensive docstring describing structure and function of class.\n    \"\"\"\n    \n    # Class attributes go here with initial values if applicable\n    att1 = True \n    att2 = 'Foo'\n    _private_att = 'Bar' # A variable that is meant to be internally only; not intended to accessed by users\n    \n    # Object initializer; called when an instance of the class is created\n    def __init__(self):\n        pass\n    \n    # Methods that share state via the self variable\n    def get_something(self):\n        pass\n    \n    # Name your methods consistently -- prefix with verbs\n    def put_something(self):\n        pass\n    \n    def do_something(self):\n        pass\n\n    def show_something(self):\n        pass\n\n    # A private method\n    def _private_method(self): \n        pass\n    \n    def do_something_else(self):\n        # Use private method\n        self._private_method()\n    \n    # A static method\n    def static_method():\n        pass"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "title": "NB: More About Classes",
    "section": "Privacy",
    "text": "Privacy\nUsers are free to access private attributes and methods, but they not shown in the help docs.\n\nhelp(MyClass)\n\nHelp on class MyClass in module __main__:\n\nclass MyClass(builtins.object)\n |  Extensive docstring describing structure and function of class.\n |  \n |  Methods defined here:\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  do_something(self)\n |  \n |  do_something_else(self)\n |  \n |  get_something(self)\n |      # Methods that share state via the self variable\n |  \n |  put_something(self)\n |      # Name your methods consistently -- prefix with verbs\n |  \n |  show_something(self)\n |  \n |  static_method()\n |      # A static method\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  att1 = True\n |  \n |  att2 = 'Foo'"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "title": "NB: More About Classes",
    "section": "Static Classes",
    "text": "Static Classes\nStatic classes don’t need to be instantiated.\nThey can be used to store a collection of stand-alone helper functions as methods.\nNote the absence of self …\n\nclass StaticClass():\n\n    def add_these(*nums):\n        sum = 0\n        for num in nums: sum += num\n        return sum\n    \n    def square_me(x):\n        return x**2\n\n\nStaticClass.add_these(1,5,6)\n\n12\n\n\n\nStaticClass.square_me(5)\n\n25\n\n\nThis won’t work …\n\nsc = StaticClass()\n\n\nsc.square_me(10)\n\nTypeError: StaticClass.square_me() takes 1 positional argument but 2 were given"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#classes-as-data-structures",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#classes-as-data-structures",
    "title": "NB: More About Classes",
    "section": "Classes as Data Structures",
    "text": "Classes as Data Structures\nClasses are a quick way to store data, similar to dictionaries.\nHere we define a static class to store some configuration data.\n\nclass MyConfig:\n    a = 10\n    b = 'foo'\n    c = 'something else'\n    f = lambda x: x + 10\n\nUnlike dictionaries, their keys, or attributes, can be accessed with less typing.\n\nMyConfig.a\n\n10\n\n\nNote also that attributes can be viewed with tab completion (in Jupyter and other IDEs).\n\n\nMyConfig.f(100)\n\n110\n\n\nYou can dynamically add attributes, too.\n\nMyConfig.x = 50\n\nNote that lambda functions are attributes, too:\n\nMyConfig.y = lambda x: x**2\n\n\nMyConfig.y(100)\n\n10000\n\n\nIt’s harder to add true functions, though.\nIf you wanted to create a data structure template, you could create a non-static class like this:\n\nclass ConfigTemplate:\n    \n    def __init__(self):\n        self.project_name = ''\n        self.project_type = ''\n        self.default_url = ''\n        self.description = ''\n        \n    def myf(self):\n        pass\n\n\nconfig1 = ConfigTemplate()\n\n\nconfig1.project_name = 'Apollo'\nconfig1.project_type = 'Moon Mission'\n\n\nconfig2 = ConfigTemplate()\nconfig2.project_name = 'Artemis'\nconfig1.project_type = 'Moon Mission'\n\nAnother use case is using a class to store a collection of data frames as a model.\n\nclass Model: pass\n\nModel.WINE = ...\nModel.PLACE = ...\nModel.REVIEW = ...\nThis will make it easier to access these dataframes later.\nFor example, when saving them, you won’t have to track down the variables you used in your code.\nYou can use the built-in .__dict__ method of any object see all of its attributes.\n\nconfig1.__dict__.keys()\n\ndict_keys(['project_name', 'project_type', 'default_url', 'description'])\n\n\nSo, to save our wine review model above, we could do something like this:\nfor att in Model.__dict__:\n    df = getattr(Model, att)\n    df.to_sql(att, db)"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#a-simple-example",
    "href": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#a-simple-example",
    "title": "NB: Understanding Class Attributes",
    "section": "A Simple Example",
    "text": "A Simple Example\nWe define a class with one attribute.\n\nclass Foo(): x = 1\n\nWe create an instance of the class.\n\nfoo1 = Foo()\n\nNotice that the class defines the value for the instance.\n\nfoo1.x, Foo.x\n\n(1, 1)\n\n\nNow, the instance attribute changes if the class attribute is changed.\n\nFoo.x = 2\n\n\nfoo1.x, Foo.x\n\n(2, 2)\n\n\nWhat if we the local attribute’s value?\nWhat happens to the class attribute?\n\nfoo1.x = 3\n\n\nfoo1.x, Foo.x\n\n(3, 2)\n\n\nTurns out we cannot override a global with a local.\nWe can see that the instance attribute is now unaffected by changing the value of the global.\n\nFoo.x = 4\n\n\nfoo1.x, Foo.x\n\n(3, 4)\n\n\nWhat happened?\nBy assigning a value to the instance attribute, we converted from global in the class to local in the instance.\nThis is similar to what we saw with local and global variables in functions.\nFinally, notice how changing the value of the class attribute changes all the instance attributes that have not overridden the attribute.\n\nfoo2 = Foo()\nfoo3 = Foo()\n\n\nFoo.x = 10\n\n\nfoo1.x, foo2.x, foo3.x, Foo.x\n\n(3, 10, 10, 10)"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#mutable-class-attributes",
    "href": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#mutable-class-attributes",
    "title": "NB: Understanding Class Attributes",
    "section": "Mutable Class Attributes",
    "text": "Mutable Class Attributes\nThere is an interesting gotcha regarding class attributes in Python.\nLists and other mutable data structures can be class attributes and yet have their values modified by instances.\nThis is kind of weird, and you should look out for it.\nTo demonstrate, we define a class with two instance variables, one a scalar and one a list.\nWe define a method to alter the value of each.\nWe also define a method compare the state of the instance with that of its class.\n\nclass MyTest():\n    \n    # Two class attributes\n    foo = 0  \n    bar = [] \n    \n    def add_one(self):\n        \"A method to alter the values of the class attributes.\"\n        self.foo += 1       \n        self.bar.append(1)  \n        \n    def replace_bar(self, new_list = []):\n        \"A method to redefined the class list attribute.\"\n        self.bar = new_list \n        \n    def compare_states(self):\n        \"A method to compare the state of instance to that of its class.\"\n        print('i.foo =', self.foo)\n        print('c.foo =', __class__.foo) # Notice how we can refer to an instance's class\n        print('i.bar =', self.bar)\n        print('c.bar =', __class__.bar)\n        \n\nNow let’s run some tests.\nWe define and instance and change nothing.\n\ntest1 = MyTest()\n\n\ntest1.compare_states()\n\ni.foo = 0\nc.foo = 0\ni.bar = []\nc.bar = []\n\n\nNow let’s increment the attributes and see the results.\n\ntest1.add_one()\n\n\ntest1.compare_states()\n\ni.foo = 1\nc.foo = 0\ni.bar = [1]\nc.bar = [1]\n\n\nThe method does disconnect the instance foo from the class foo.\nBut it does not disconnect the instance bar from the class bar.\nInstead, a change that took place in one instance affects the state of all other instances!\nThe difference is that foo is a scalar, and bar is a list, i.e. mutable data structure.\nWe do it again to drive the point home.\n\ntest1.add_one()\n\n\ntest1.compare_states()\n\ni.foo = 2\nc.foo = 0\ni.bar = [1, 1]\nc.bar = [1, 1]\n\n\nNow, let’s replace list itself in the instance.\n\ntest1.replace_bar()\n\n\nfor i in range(5):\n    print(\"Iter\", i)\n    test1.add_one()\n    test1.compare_states()\n    print()\n\nIter 0\ni.foo = 3\nc.foo = 0\ni.bar = [1]\nc.bar = [1, 1]\n\nIter 1\ni.foo = 4\nc.foo = 0\ni.bar = [1, 1]\nc.bar = [1, 1]\n\nIter 2\ni.foo = 5\nc.foo = 0\ni.bar = [1, 1, 1]\nc.bar = [1, 1]\n\nIter 3\ni.foo = 6\nc.foo = 0\ni.bar = [1, 1, 1, 1]\nc.bar = [1, 1]\n\nIter 4\ni.foo = 7\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\n\n\nNotice that now the class list is not altered by the instance list.\nIt remains in the state before the list itself was re-assigned by the instance.\nThis is because we redefined the list itself, not just its content.\nLet’s define a second instance.\n\ntest2 = MyTest()\n\n\ntest2.compare_states()\n\ni.foo = 0\nc.foo = 0\ni.bar = [1, 1]\nc.bar = [1, 1]\n\n\nThe new instance has the original value of foo.\nHowever, notice it starts of with the modified value of bar before it was replaced.\nWe do it a few more times to drive the point home.\n\nfor i in range(5):\n    print(\"Iter\", i)\n    test2.add_one()\n    test2.compare_states()\n    print()\n\nIter 0\ni.foo = 1\nc.foo = 0\ni.bar = [1, 1, 1]\nc.bar = [1, 1, 1]\n\nIter 1\ni.foo = 2\nc.foo = 0\ni.bar = [1, 1, 1, 1]\nc.bar = [1, 1, 1, 1]\n\nIter 2\ni.foo = 3\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1]\n\nIter 3\ni.foo = 4\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1]\n\nIter 4\ni.foo = 5\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1]\n\n\n\nSome take-aways:\n\nClass attribute changes affect those attributes in all of it instances …\n… unless the instance assigns a value to the attribute.\nHowever, appending to a list — or, more generally, modifying data in a mutable data structure — does not count as an assignment operation. The instance changes will affect the class state.\nBottom line: DEFINE CLASS ATTRIBUTES WITH CAUTION."
  },
  {
    "objectID": "modules/m08/m08-intro.html#topics",
    "href": "modules/m08/m08-intro.html#topics",
    "title": "M08 Testing",
    "section": "Topics",
    "text": "Topics\n\nBecome acquainted with Exception Handling, Testing, and Debuggings\nUnderstand the cyclical relationship among these\nUnderstand the relation to function and class design\nUnderstand benefits of literate and well-styled coding"
  },
  {
    "objectID": "modules/m08/m08-intro.html#readings",
    "href": "modules/m08/m08-intro.html#readings",
    "title": "M08 Testing",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nLutz 2017, Part 7: Exceptions and Tools\nTesting and Verification (see next Module item)"
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#when-code-breaks",
    "href": "modules/m08/m08-testing-and-verification.html#when-code-breaks",
    "title": "Testing and Verification",
    "section": "When Code Breaks",
    "text": "When Code Breaks\nIn this module, we learn about how to deal with broken code.\n\nBy “broken code,” we mean everything from code that does not run to code that does not meet the purpose for writing the code.\n\nThis is a broad topic that covers many levels, facets, and many approaches.\nThese are some basic questions that define the space of the topic:\n\nWhat constitutes broken code?\nHow do you prevent your code from breaking?\nHow to tell if your code is broken?\n\nWe’ll try to cover this space, and introduce you to some Python tools designed to handle broken code."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#specifications",
    "href": "modules/m08/m08-testing-and-verification.html#specifications",
    "title": "Testing and Verification",
    "section": "Specifications",
    "text": "Specifications\nOne way to frame this topic is to think in terms of standards of code against which the concept of broken code makes sense.\nThis perspective begins with the concept of a specification: A precise and detailed statement that a stakeholder defines about the properties the code must have.\nThere are different kinds of specification, or “spec”. For example:\n\nA design specification specification provides exact instructions for how to build something.\nA requirements specification provides exact statements about what should be built.\n\nCode can meet specifications in different ways.\n\nWe can think of code quality in terms of the degree to which code meets requirements.\nQuality: falls on a scale; it’s not a black-and-white idea. Defining the scale can be difficult.\n\nTwo kinds of requirements matching are the following:\n\nVerification: Shows that the code meets the requirement specification. You verify that I wrote the program you asked me to write.\nValidation: Shows that the code meets the requirements. You show that the program is a valid solution to the user’s problem, but not necessarily the best.\n\nSpecifications are very important. Not only are they used to guide the creation of the project, but also they’re vital for program testing and verification.\n\nThat is, if you don’t have specifications for the product, you cannot verify that you’re doing the right thing.\nLikewise, if behavior is not defined, then it becomes difficult to know what is incorrect behavior.\n\n\n\n\n\n\n\nNote\n\n\n\nSpecifications are rarely perfect. They can change over time for a variety of reasons.\nIn fact, some have joked that programming is the act of “debugging the spec”. We’ll learn more about this when we cover project management."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#testing-and-verification",
    "href": "modules/m08/m08-testing-and-verification.html#testing-and-verification",
    "title": "Testing and Verification",
    "section": "Testing and Verification",
    "text": "Testing and Verification\nTo ensure that our code aligns with our requirements and is of the highest quality we can provide, we follow testing and verification processes."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#formal-verification",
    "href": "modules/m08/m08-testing-and-verification.html#formal-verification",
    "title": "Testing and Verification",
    "section": "Formal Verification",
    "text": "Formal Verification\nFormal verification involves proof. There are three types:\n\nHand-written, hand-checked\nHand-written, machine-checked (proof-carrying code)\nMachine-written, machine-checked (static analysis)\n\nNone of them are very widely used yet, but the latter two are increasing in popularity.\nFormal verification is complex, difficult, and takes a great deal of effort."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#empirical-testing",
    "href": "modules/m08/m08-testing-and-verification.html#empirical-testing",
    "title": "Testing and Verification",
    "section": "Empirical Testing",
    "text": "Empirical Testing\nInstead of formal verification, correctness is demonstrated through empirical testing. Empirical testing shows it works on several inputs. In general, testing is:\n\nA lot easier than proof\nA lot harder (and more involved) than writing code \n\nThere are many kinds of testing, but we will focus on unit testing in this module.\n\nUnit Testing is where we write code that tests the smallest possible units of the spec (must attempt to test every flow path). The programmer does unit testing as part of the coding process.\nThis assumes that code is componential, i.e. that the smallest units are functionally independent and can be combined in principled ways.\nThis raises the issue of writing well-designed functions and classes.\n\nTwo other kinds of testing are integration and acceptance (beta) testing, which are out of the scope of this lesson. See below for a short description.\n\nIntegration Testing: Test that units work together.\nAcceptance Testing (Beta Testing): Give product to real users to try it out."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#flow-paths",
    "href": "modules/m08/m08-testing-and-verification.html#flow-paths",
    "title": "Testing and Verification",
    "section": "Flow Paths",
    "text": "Flow Paths\nUnit testing is predicated on understand the flow of data in your program.\nA flow path is a unique execution sequence through a program unit.\nA good set of test data makes sure every possible path is followed (tests every possible behavior).\nNote, however, that there are virtually an infinite number of flow paths in a program!\nExhaustive testing is usually impossible.\nHowever, we can overcome these odds by being clever about the kinds of tests that we write."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#debugging",
    "href": "modules/m08/m08-testing-and-verification.html#debugging",
    "title": "Testing and Verification",
    "section": "Debugging",
    "text": "Debugging\nAnother aspect of testing and verification which we will not cover here is debugging.\nDebugging – derived from Grace Hopper’s expression “bug” – refers to the process of investigating precisely where and when code breaks.\nProgramming environments like Jupyter Lab and VS Code provide good tools for debugging."
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#a-note-of-caution",
    "href": "modules/m08/m08-testing-and-verification.html#a-note-of-caution",
    "title": "Testing and Verification",
    "section": "A Note of Caution",
    "text": "A Note of Caution\nEdsger Dijkstra was a famous computer scientist and A. M. Turing award winner. He said:\n\n“Program testing can effectively show the presence of bugs but is\nhopeless for showing their absence.”     — Edsger Dijkstra\n\nEven if you write a test suite of carefully crafted test cases, and if they all run and pass, it doesn’t mean that no further bugs exist.\nIt is much easier to prove the existence of something than to disprove the existence of something. \nThis realization should motivate us to learn how to create carefully crafted unit tests so that we can test as much as we can."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "title": "NB: Exception Handling",
    "section": "Overview",
    "text": "Overview\n\nAll happy families are alike, but every unhappy family is unhappy in its own way.\n– Leo Tolstoy, Anna Karenina, 1878.\n\nThere are two ways that programs can succeed of fail:\nThey can meet or not meet the motiving requirements for the code.\n\nDoes it do what is is supposed to do?\nDoes it add value to a process?\nIs it ethical? Does it do harm?\n\nThey can just work or not work:\n\nDoes the run at all?\nIs the code brittle or buggy?\nIs it sensitive to contextual factors like bad user input or a bad database connection?\nDoes the code work but produce incorrect outcomes?\n\nThese lead to two practices:\n\nStrategic: Project management\nTactical: Testing and debugging\n\nToday, we will focus on some concepts and tools for the latter.\n\nWe want to know whether our code is working or not.\nWe want to know if our code is of a high quality.\n\nApproaches to quality\n\nThrough good design\nThroigh principled testing\n\nSome design principles\n\nFavor the simple over the complex\n\n\nDon’t confuse the easy with the simple!\n\n\nInvest in data design to simplify algorithm design\nWrite literate code\nGiven a choice, use tools that are documented and have a user community\nMany other things :-)\n\nSome testing activities\n\nSyntax checking\nDebugging\nAd hoc testing\nUnit-testing\nUser testing\n\nSome concepts\n\nBeware of silent failures\nTesting for the absence of bugs is impossible\n\nLike Popper’s concept of falsifiability: We can never prove a scientific hypothesis to be true, we can only falsify."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling",
    "title": "NB: Exception Handling",
    "section": "Exception Handling",
    "text": "Exception Handling\nProgramming languages offer many tools for testing.\nThese include mechanisms to define and capture errors in code.\nWe call these errors exceptions.\n\nAn exception is an event that occurs during the execution of a program that disrupts the normal flow of the program’s instructions.\n\nWe call we call dealing with these errors exception handling.\n\nWhen a Python script encounters a code failure, it raises an exception.\n\n\nException handling is the foundation of unit testing."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "title": "NB: Exception Handling",
    "section": "Python’s Tools",
    "text": "Python’s Tools\nExceptions\n\nA Python object that represents an error\nObjects that classify kinds of errors\nCoders can define these\n\nException Handlers\n\nControl structures and functions to deal with exceptions\ntry/except\nraise\nassert\n\nUnit Testing Frameworks\n\nRobot\nPyTest\nUnittest\nDocTest\nNose2\nTestify"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-and-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-and-exceptions",
    "title": "NB: Exception Handling",
    "section": "Errors and Exceptions",
    "text": "Errors and Exceptions\nA common technical interview question: Explain the difference between an error and an exception.\nAn error is a serious problem that a reasonable application should not try to catch.\nAn error will stop execution. It means the code if broken and needs to be rewritten.\nAn exception is an issue that is expected or known to occur (e.g., division by zero).\nSoftware must handle exceptions. For example, one bad row of data shouldn’t bring down the application."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "title": "NB: Exception Handling",
    "section": "Some Common Built-in Exceptions",
    "text": "Some Common Built-in Exceptions\nPython comes with a number of predefined exceptions.\nLibraries introduce new ones, too.\nThey used in raise statement by the authors of programs when a possible error is anticipated.\nHere are some common examples.\n\nZeroDivisionError\n\n3 / 0\n\nZeroDivisionError: division by zero\n\n\n\n\nSyntax Error\n\n## if-statement missing colon at end\n\nif x > 0\n  print(\"uh oh\")\n\nSyntaxError: expected ':' (223904042.py, line 3)\n\n\n\n\nNameError\n\n## references an undefined variable\n\nprint(x)\n\nNameError: name 'x' is not defined\n\n\n\n\nIndexError\n\n## loop goes off the end of the list\n\nlst = [0, 1, 2]\n\nfor i in range(4):\n    print(lst[i])\n\n0\n1\n2\n\n\nIndexError: list index out of range"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "title": "NB: Exception Handling",
    "section": "Exception Handling with try/except",
    "text": "Exception Handling with try/except\nWe use try/except blocks to handle exceptions in our code.\nThese blocks work as follows: * The try block will contain a statement. * If the statement fails, the the flow goes to the except block. * The exception block will have code to handle the error, rather than halting the program.\nThe process is very similar to if/then: * If there is an error, then raise an excpetion.\nMultiple except statements may be given, to handle specific exceptions.\nBelow, we give a catch-all except for any kind of exception.\nAn excpetion is a mistake that will halt the execution of code. * For example, trying to access a dictionary key that does not exit. * Or, a database connection fails. * Very often, execeptions are caused by an external dependency failing, such as another system or the user.\nLet’s try referencing a variable that doesn’t exist with no exception handling.\n\nprint(a)\n\nNameError: name 'a' is not defined\n\n\nNow let’s try referencing a variable that doesn’t exist with a try/except block to handle the exception.\n\ntry:\n    print(a)\nexcept:\n   print(\"caught an exception\")\n\ncaught an exception"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "title": "NB: Exception Handling",
    "section": "Assert Statements",
    "text": "Assert Statements\nAnother to catch errors before they happen is to test if computations turned out as expected.\nWe use assert to verify an expression is True.\n- if expression is True, nothing happens. - if expression is False, Python raises an AssertionError exception.\nAssert statements have the followinf syntax:\nassert Expression[, Arguments]\nwhere [, Arguments] denotes optional arguments.\nFor example, let’s say a program is expecting three arguments to be passed from the command line.\nThe variable num_args counts the arguments.\n\nnum_args = 3\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nThe assert evaluates to True, and things proceed normally without exception.\nIf we change num_args = 4 this will throw an AssertionError with the provided message.\nThe program then stops.\n\nnum_args = 4\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nAssertionError: number of arguments must be 3!\n\n\nIf the assert is not given a message, it throws AssertionError:\n\nnum_args = 4\n\nassert num_args == 3\n\nAssertionError: \n\n\n\ntry:\n    assert num_args == 3\nexcept:\n    print(\"Got an error\")\n\nGot an error\n\n\n\ntry:\n    assert num_args == 3, \"Number of arguments must be 3!\"\nexcept AssertionError as e:\n    print(e)\n\nNumber of arguments must be 3!"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "title": "NB: Exception Handling",
    "section": "raise()",
    "text": "raise()\nExceptions can be raised, too.\nUse this if you want to halt the program and let other code that is using this code handle it.|\n\ntry:\n    10/0\nexcept:\n    raise ZeroDivisionError(\"Hey, you can't divide by zero!\")\n\nZeroDivisionError: Hey, you can't divide by zero!\n\n\n\nraise IndexError(\"Bad Index\")\n\nIndexError: Bad Index"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "title": "NB: Exception Handling",
    "section": "Futher Reading",
    "text": "Futher Reading\n\nhttps://www.geeksforgeeks.org/errors-and-exceptions-in-python/\nhttps://www.tutorialspoint.com/python/assertions_in_python.htm"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#unit-testing",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#unit-testing",
    "title": "NB: Unit Testing with Unittest",
    "section": "Unit Testing",
    "text": "Unit Testing\nUnit testing is a testing technique in which individual modules are tested to determine if there are any issues by the developer himself.\nIt is concerned with functional correctness of the stand-alone modules.\nThe main aim is to isolate each unit of the system to identify, analyze and fix the defects.\nThese units are typicallly functions and methods."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "title": "NB: Unit Testing with Unittest",
    "section": "Benefits of Unit Testing",
    "text": "Benefits of Unit Testing\nDevelopers can work in a predictable way on developing code.\nDevelopers can write their own unit tests.\nYou can get a rapid response for testing small changes\nAlso:\nReduces defects in the newly developed features or reduces bugs when changing the existing functionality.\nReduces cost of testing, since defects are captured in very early phase.\nImproves design and allows better refactoring of code.\nTesting in Python is a huge topic and can come with a lot of complexity, but it doesn’t need to be hard. You can get started creating simple tests for your application in a few easy steps and then build on it from there."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "title": "NB: Unit Testing with Unittest",
    "section": "The unittest Framework",
    "text": "The unittest Framework\nOne of the popular unit testing frameworks is Unittest. It is works well and is easy to use.\nThere are other tools, though – here’s a comparison of 6 Python testing frameworks."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Idea",
    "text": "The Basic Idea\nThe Unittest framework provides you with a bunch of assert methods, which are essentially wrappers around Python’s built-in assert function.\nThe basic idea is to write functions that test other functions by using these assert methods instead of peppering your code with them.\nUnittest provides many assert methods – see this cheat sheet for more.\nWe will focus on three: * assertTrue() * assertFalse() * assertEqual()"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Pattern",
    "text": "The Basic Pattern\nThe Unittest framework works as follows:\nChoose on a method or class that you want to test.\nCreate a class that is a subclass of unittest.TestCase.\nIn that class write methods that are designed to test the behavior of methods in the code you want to test.\n\nThese test methods focus on one behavior of one method (or function).\nThere can be many test methods for each target method.\nEach test method name must be prefixed by test_.\nTests are executing in alphabetical order, so name them in the order you want them executed.\nEach test makes use of an assert method. These methods typically compare expected with actual methods and return False if they don’t match and True if they do.\nYou always want tests to pass, so if you want to test if something breaks, you return True for a False condition.\n\nRun the script and see the results.\nUpdate the script as you create new methods or refactor existing ones."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "title": "NB: Unit Testing with Unittest",
    "section": "Assert Methods",
    "text": "Assert Methods\n\n.assertTrue()\n\nNegative Test Case\nRun M08-02-script1.py\nclass TestStringMethods(unittest.TestCase):\n\n    # test function\n    def test_negative(self):\n\n        testValue = False\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue(testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script1.py\n\ntest_negative (__main__.TestStringMethods.test_negative) ... FAIL\n\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M08_PythonTesting/M08-02-script1.py\", line 14, in test_negative\n    self.assertTrue(testValue, message)\nAssertionError: False is not true : Test value is not true.\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    \n    # test function\n    def test_positive(self):\n        \n        testValue = True\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script2.py\n\ntest_positive (__main__.TestStringMethods.test_positive) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\n\n\n\n.assertFalse()\n\nNegative Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_negative(self):\n        testValue = True\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assetFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script3.py\n\nF\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M08_PythonTesting/M08-02-script3.py\", line 10, in test_negative\n    self.assertFalse( testValue, message)\nAssertionError: True is not false : Test value is not false.\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_positive(self):\n        testValue = False\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assertFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script4.py\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\n\n\n\n.assertEqual()\nHere is a case where we expect two values to be equal.\n\nNegative Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_negative(self):\n        firstValue = \"geeks\"\n        secondValue = \"gfg\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script5.py\n\nF\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M08_PythonTesting/M08-02-script5.py\", line 12, in test_negative\n    self.assertEqual(firstValue, secondValue, message)\nAssertionError: 'geeks' != 'gfg'\n- geeks\n+ gfg\n : First value and second value are not equal !\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_positive(self):\n        firstValue = \"geeks\"\n        secondValue = \"geeks\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script6.py\n\ntest_positive (__main__.TestStringMethods.test_positive) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with User-defined Function",
    "text": "Example with User-defined Function\nFunction to test\ndef add_fish_to_aquarium(fish_list):\n    if len(fish_list) > 10:\n        raise ValueError(\"A maximum of 10 fish can be added to the aquarium\")\n    return {\"tank_a\": fish_list}\n\nimport unittest\nClass to test the function\nclass TestAddFishToAquarium(unittest.TestCase):\n    \n    def test_add_fish_to_aquarium_success(self):\n        actual = add_fish_to_aquarium(fish_list=[\"shark\", \"tuna\"])\n        expected = {\"tank_a\": [\"shark\", \"tuna\"]}\n        self.assertEqual(actual, expected)\n\n    def test_add_fish_to_aquarium_exception(self):\n        too_many_fish = [\"shark\"] * 25\n        with self.assertRaises(ValueError) as exception_context:\n            add_fish_to_aquarium(fish_list=too_many_fish)\n        self.assertEqual(\n            str(exception_context.exception),\n            \"A maximum of 10 fish can be added to the aquarium\"\n        )\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script7.py\n\ntest_add_fish_to_aquarium_exception (__main__.TestAddFishToAquarium.test_add_fish_to_aquarium_exception) ... ok\ntest_add_fish_to_aquarium_success (__main__.TestAddFishToAquarium.test_add_fish_to_aquarium_success) ... ok\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with External Class",
    "text": "Example with External Class\nWe create a class called Student and save it in a local file called student.py.\nclass Student:\n    \n    # constructor\n    def __init__(self, name, courses=None):\n        self.name = name # string type\n        self.courses = [] if courses is None else courses # list of strings\n        self.num_courses = len(self.courses)\n        \n    # enroll in a course\n    def enroll_in_course(self, course_name): \n        self.courses.append(course_name)\n        self.num_courses += 1 # increment the number of courses\nThen we create a companion test file for our class, saving it in a file called student_test.py.\nfrom student import Student\nimport unittest\n\nclass EnrollInTestCase(unittest.TestCase): \n    \n    def test_is_incremented_correctly(self):\n        # test if enrollInCourse() method successfully increments the\n        # num_courses attribute of the Student object \n\n        # Create student instance, adding some courses\n        student1 = Student('Katherine', ['DS 5100'])\n        student1.enroll_in_course(\"CS 5050\")\n        student1.enroll_in_course(\"CS 5777\")\n        print(student1.courses)\n        print(student1.num_courses)\n        \n        # Test\n        expected = 3\n        # unittest.TestCase brings in the assertEqual() method\n        self.assertEqual(student1.num_courses, expected)\n        \nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python student_test.py\n\ntest_incremented_correctly (__main__.EnrollInCourseTest.test_incremented_correctly)\nTest if enroll_in_course() method successfully increments the ... ['DS 5100', 'CS 5050', 'CS 5777']\n3\nok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\nThe messages that unittest prints are error messages on Unix, so if we want to direct them to a file, we need to use 2>.\nNotice how this command only shows the print messages contained in the program.\n\n!python student_test.py 2> student_results.txt\n\n['DS 5100', 'CS 5050', 'CS 5777']\n3\n\n\nThis one, on the other hand, captures the print methods and only shows the errors.\n\n!python student_test.py > student_results1.txt\n\ntest_incremented_correctly (__main__.EnrollInCourseTest.test_incremented_correctly)\nTest if enroll_in_course() method successfully increments the ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "title": "NB: Unit Testing with Unittest",
    "section": "Further Reading",
    "text": "Further Reading\n\nunittest — Unit testing framework (Official Docs)\nHow To Use unittest to Write a Test Case for a Function in Python (Digital Ocean)\nA Cheat-sheet of Unittest Assert Methods"
  },
  {
    "objectID": "modules/m09/m09-intro.html#topics",
    "href": "modules/m09/m09-intro.html#topics",
    "title": "M09 Modules",
    "section": "Topics",
    "text": "Topics\n\nHow Python organizes code into modules, packages, and libraries\nHow to write your own modules\nHow to package and share your modules"
  },
  {
    "objectID": "modules/m09/m09-intro.html#readings",
    "href": "modules/m09/m09-intro.html#readings",
    "title": "M09 Modules",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2017, Part V. Modules and Packages → Up to Ch. 24.\n\n\nPython Package Tutorial (Read The Docs)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#modules",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#modules",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Modules",
    "text": "Modules\nIn Python, a module is a file containing Python code – expressions and statements.\nThe module name is just the file name without the .py suffix.\nWhen the file is executed and the program is running,\nthe module’s name is available as the value of the global variable __name__.\n\n__name__\n\n'__main__'\n\n\nFor instance, let’s say we have a file called fibo.py with the following code:\n## Fibonacci numbers module\n\ndef fib(n):    # print Fibonacci series up to n\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\ndef fib2(n):   # return Fibonacci series up to n\n    a, b = 0, 1\n    result = []\n    while a < n:\n        result.append(a)\n        a, b = b, a+b\n    return result\nWe can import it into this notebook and get it’s filename.\n\nimport fibo\n\n\nfibo.__name__\n\n'fibo'\n\n\nAnd here is how we interact with the file as a module:\n\nfibo.fib(1000)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 \n\n\n\nfibo.fib2(100)\n\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#aside-on-namespaces",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#aside-on-namespaces",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Aside on Namespaces",
    "text": "Aside on Namespaces\nYou can see that a python module acts as a single namespace, which is used to organize a collection of values:\n\nfunctions\nconstants\nclass definitions\nreally any old value\n\nA namespace is a collection of currently defined names being used by a program.\n\nYou can think of it as something like a Python dictionary in which the keys are the object names\nand the values are the objects themselves.\n\nIt’s a way of making sure variable and function names do not collide or get confused with each other.\nPython has four namespaces:\n\nBuilt-In: Contains the names of all of Python’s built-in objects. See dir(__builtins__)\nGlobal: Contains any names defined at the level of the main program.\n\n\nA global namespace is also created for any module that your program imports. See globals().\n\n\nEnclosing: The namespaces of a function for any functions defined within that function.\nLocal: Contains any names defined in a function.\n\nNamespaces are related to scope.\nTo know the context in which a name has meaning, Python searches namespaces from the inside out.\nL -> E -> G -> B\n\n\n\nimage.png\n\n\nSee M09-01a-Globals.ipynb for a demo.\nSee Namespaces and Scope in Python (Real Python) for a good primer.\n\ndef foo():\n    x = y = z = 1\n    print(locals())\n    \n    def bar():\n        a = b = c = 2\n        print(locals())\n        \n    bar()\n\n\nfoo()\n\n{'x': 1, 'y': 1, 'z': 1}\n{'a': 2, 'b': 2, 'c': 2}"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Packages",
    "text": "Packages\nA package is a directory that may contain other modules.\nFor a directory to be a package, it must contain an __init__.py file.\nThe __init__.py can be totally empty or it can have some Python code in it. We’ll see why you would do that below.\nIt it will contain other python files or other package directories, too.\nHere is an example directory structure of a package that contains a package:\n## EXAMPLE 1 \na_package_dir\n    __init__.py\n    module_a.py\n    a_sub_package_dir\n        __init__.py\n        module_b.py\nAt a minimum, all you need to do have is this:\n## EXAMPLE 2\na_package_dir\n    __init__.py\n    module_a.py\nHowever, ideally, if you want to have your package installed, you’d include other files, too:\n## EXAMPLE 3\na_package_dir\n    __init__.py\n    module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-and-namespaces",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-and-namespaces",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Packages and Namespaces",
    "text": "Packages and Namespaces\nPackages structure Python’s module namespace by setting up dotted module names.\n\nFile system constructs are mapped onto Python name constructs.\n\nFor example, the module name A.B designates a submodule named B in a package named A.\nThe use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other’s module names."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#importing-packages-and-modules",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#importing-packages-and-modules",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Importing Packages and Modules",
    "text": "Importing Packages and Modules\nSo, given the above directory and file structure, within a Python file you can:\nimport a_package\nThis will run any code in a_package/__init__.py.\nSo, any variable or function names defined in the __init__.py will be available like this:\na_package.a_name\nHowever, no modules will be imported unless explicity commanded to.\nFor example:\na_package.module_a\nwill not be imported.\nTo get modules, you need to explicitly import them:\nimport a_package.module_a\nYou will have noticed this in working with well-known libraries (bundles of packages) like Scikit Learn."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#the-module-search-path",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#the-module-search-path",
    "title": "NB: Packages, Modules, and Imports",
    "section": "The module search path",
    "text": "The module search path\nHow does Python know where to find modules?\nThe interpreter keeps a list of all the places that it looks for modules or packages when you do an import. It is stored in the sys module.\nimport sys\nfor p in sys.path:\n    print p\nYou can edit that list to add or remove paths to let python find modules on a new place.\nsys.path.append(some_local_dir)\nRemember that every module has a __file__ name that points to the path it lives in.\nThis lets you add paths relative to where you are, etc.\nsys.path.append(f\"{__file__}/local_module_directory\")"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#more-info",
    "title": "NB: Packages, Modules, and Imports",
    "section": "More Info",
    "text": "More Info\nThere is, of course, a lot more to this topic than what’s covered here.\nWe’ve covered what you need to know to get started.\nSee the official docs on modules for more depth."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#class-and-globals",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#class-and-globals",
    "title": "NB: More on Classes and Globals",
    "section": "Class and Globals",
    "text": "Class and Globals\nWe experiment to see if classes can see the globals of their surrounding environment.\nWe already know that functions can.\n\nclass Test:\n    \n    # x has not been declared within the class \n    # or any of its methods\n    \n    def static_test():\n        print(x)\n        \n    def method_test(self):\n        print(x)\n\n\nx = 5\n\n\ntry:\n    Test.static_test()\nexcept NameError as e:\n    print(e)\n\n5\n\n\n\nt = Test()\n\n\ntry:\n    t.method_test()\nexcept NameError as e:\n    print(e)\n\n5\n\n\nSo, global variables are also visible within classes.\nThe class can see the globals, even though x was defined after the class definition.\nBut what about imported classes and functions?"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "title": "NB: More on Classes and Globals",
    "section": "Try with Imports",
    "text": "Try with Imports\nNow let’s see how scope works with import.\nHere is the code contained by the file test.py:\ny = 15\n\ndef imported_function_test():\n    print(x)\n\ndef imported_function_test_y():\n    print(y)\n    \nclass ImportedTest:\n    \n    def imported_static_test():\n        print(x)\n    \n    def imported_method_test(self):\n        print(x)\n        \n    def imported_static_test_y():\n        print(y)\n    \n    def imported_method_test_y(self):\n        print(y)\nNow we import the module and all of its defined functions and classes.\n\nfrom test import *\n\n\nImported Function\nNow let’s see if x is in any way visible to module.\n\ntry:\n    imported_function_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    imported_function_test_y()\nexcept NameError as e:\n    print(e)\n\n15\n\n\n\n\nImported Static Method\n\ntry:\n    ImportedTest.imported_static_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    ImportedTest.imported_static_test_y()\nexcept NameError as e:\n    print(e)\n\n15\n\n\n\n\nImported Instance Method\n\nt2 = ImportedTest()\n\n\ntry:\n    t2.imported_method_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    t2.imported_method_test_y()\nexcept NameError as e:\n    print(e)\n\n15"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#conclusion",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#conclusion",
    "title": "NB: More on Classes and Globals",
    "section": "Conclusion",
    "text": "Conclusion\nThe global context of a class or function is the module, i.e. file, in which it is defined,\nnot in which it is called."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#some-examples-of-packages",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#some-examples-of-packages",
    "title": "NB: Building Your Own Package",
    "section": "Some Examples of Packages",
    "text": "Some Examples of Packages\n\nScikit Learn: Repo | Site (Structure models code)\nNLTK Repo | Site (Structure models spaghetti)\nSpaCy Repo | Site (API) (Structure kinda models code)\nhttps://github.com/ontoligent/mazo\nhttps://github.com/ontoligent-design/polo2"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#why-build-a-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#why-build-a-package",
    "title": "NB: Building Your Own Package",
    "section": "Why Build a Package?",
    "text": "Why Build a Package?\nYou package code in order to add it to your python system for general use, and to share it with others.\nIt’s also good to have well organized code.\nThis applies to how to organize your programs internally, and externally as files and directories.\nIt’s easy to do. There are a bunch of nifty tools that help you build, install and distribute packages."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-is-a-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-is-a-package",
    "title": "NB: Building Your Own Package",
    "section": "What is a Package?",
    "text": "What is a Package?\nAgain: A collection of modules (python files) along with: * the documentation * the tests * any top-level scripts * any data files required * instructions and scripts to build and install it"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "title": "NB: Building Your Own Package",
    "section": "What does it mean to build your Package?",
    "text": "What does it mean to build your Package?\nTo build your own package, you of course need some Python files you want to deploy.\nThen you create the following:\n\nCreate the basic package structure, such as EXAMPLE 3 below.\nWrite a setup.py using a package tool (see below).\n\n## EXAMPLE 3\n\na_package_dir\n    __init__.py\n    module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml \nThis will be contained by a project directory."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "title": "NB: Building Your Own Package",
    "section": "About setup.py",
    "text": "About setup.py\nYour setup.py file describes your package, and tells the packaging tool how to package, build, and install it.\nIt is Python code, so you can add anything custom you need to it.\nIn the simple case, it is basically a configuration files with keys and values.\nWhat does setup.py contain?\n\nVersion & package metadata\nList of packages to include\nList of other files to include\nList of dependencies\nList of extensions to be compiled\n\nAbout pyproject.toml\nFor a lot reasons that beyond the scope of this document, setup.py\nis being superceded by the use of pyproject.toml files to store\nsetup configuration information.\nHowever, for now we’re going to stick to the old school approach."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "title": "NB: Building Your Own Package",
    "section": "Example Setup Files",
    "text": "Example Setup Files\n\nExample 1\nfrom distutils.core import setup\n\nsetup(name='mypkg',\n      version='1.0',\n      \n      # list folders, not files\n      packages=['mypkg', 'mypkg.subpkg'], # Include packages in the project\n      install_requires=['click'],         # Required libraries\n)\n\n\nExample 2\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='MyPackageName',\n    version='1.0.0',\n    url='https://github.com/mypackage.git',\n    author='Author Name',\n    author_email='author@gmail.com',\n    description='Description of my package',\n    packages=find_packages(),    \n    install_requires=['numpy >= 1.11.1', 'matplotlib >= 1.5.1'],\n)\n\n\nExample 3\nfrom setuptools import setup\n\nsetup(\n    name = 'PackageName',\n    version = '0.1.0',\n    author = 'An Awesome Coder',\n    author_email = 'aac@example.com',\n    packages = ['package_name', 'package_name.test'],\n    scripts = ['bin/script1','bin/script2'],\n    url = 'http://pypi.python.org/pypi/PackageName/',\n    license = 'LICENSE.txt',\n    description = 'An awesome package that does something',\n    long_description = open('README.txt').read(),\n    install_requires = [\n        \"Django >= 1.1.1\",\n        \"pytest\",\n    ],\n)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "title": "NB: Building Your Own Package",
    "section": "A Summary of Keys",
    "text": "A Summary of Keys\nAs mentioned about, the main content of basic setup files is configuraton information. The keys that you should include in your projects are the following:\n\nname: A string of the package name as title, not a filename.\nversion: A string of the version number expression, typically using the MAJOR.MINOR.PATCH pattern. See Semantic Versioning for more information.\nauthor: A string with the creator’s name.\nauthor_email: A string with the creator’s email address.\npackages: A list of strings of package directories in the project.\nurl: A string of the URL to the code repo.\nlicense: A string of the license file name.\ndescription: A string with a short blurb of the project.\nlong_description: A link to a longer description. Can do something like open('README.txt').read().\ninstall_requires: A list of strings of external libraries that the project requires.\n\n\nPython packaging tools\nIn writing setup.py, you need to use a packaging tool.\nNotice that we’ve imported the setuptools library.\n\nThe package tool distutils is included with Python, but it is not recommended.\nInstead, use setuptools, a third party tool that extends distutils and is used in most modern Python installations.\n\n\n\nSummary of fields"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "title": "NB: Building Your Own Package",
    "section": "Quick Demo",
    "text": "Quick Demo\nSo, let’s look at a simple package.\nSource: Minimal Structure (python-packaging)\n\nDirectory\nHere is our directory structure:\n\n!ls -lR demo_package3/\n\ntotal 8\ndrwxr-xr-x@ 4 rca2t1  staff  128 May  5 09:14 funniest\n-rw-r--r--@ 1 rca2t1  staff  301 May  5 09:14 setup.py\n\ndemo_package3//funniest:\ntotal 16\n-rw-r--r--@ 1 rca2t1  staff   63 May  5 09:14 __init__.py\n-rw-r--r--@ 1 rca2t1  staff  197 May  5 09:14 funniest.py\n\n\n\n\nSetup file\nHere is what out setup.py file has inside:\n\nprint(open('demo_package3/setup.py', 'r').read())\n\nfrom setuptools import setup\n\nsetup(name='funniest',\n      version='0.1',\n      description='The funniest joke in the world',\n      url='http://github.com/storborg/funniest',\n      author='Flying Circus',\n      author_email='flyingcircus@example.com',\n      license='MIT',\n      packages=['funniest'])\n\n\n\n\n__init__.py\n\nprint(open('demo_package3/funniest/__init__.py', 'r').read())\n\nfrom .funniest import joke\n\nprint(\"Have I got a joke for you!\")\n\n\n\n\nfunniest.py\n\nprint(open('demo_package3/funniest/funniest.py', 'r').read())\n\ndef joke():\n    \"This function just tells a joke. Or tries to.\"\n    return (u'Wenn ist das Nunst\\u00fcck git und Slotermeyer? Ja! ... '\n            u'Beiherhund das Oder die Flipperwaldt gersput.')\n\n\n\n\nInstall\n\n!cd demo_package3/; pip install .\n\nProcessing /Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M09_PythonModules/demo_package3\n  Preparing metadata (setup.py) ... done\nBuilding wheels for collected packages: funniest\n  Building wheel for funniest (setup.py) ... done\n  Created wheel for funniest: filename=funniest-0.1-py3-none-any.whl size=1568 sha256=aaf3a17b5850b50aa94726bb270982c8c0ace28842225da3d7758da432279f18\n  Stored in directory: /private/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/pip-ephem-wheel-cache-c5nojes6/wheels/d2/5e/8e/86778a8bd9f4b020fd7742ecb70af3c25ecae45e348d297469\nSuccessfully built funniest\nInstalling collected packages: funniest\nSuccessfully installed funniest-0.1\n\n\n\n\nTry it out\n\nfrom funniest import joke\n\nHave I got a joke for you!\n\n\n\njoke()\n\n'Wenn ist das Nunstück git und Slotermeyer? Ja! ... Beiherhund das Oder die Flipperwaldt gersput.'"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "title": "NB: Building Your Own Package",
    "section": "Many Ways to Install",
    "text": "Many Ways to Install\nRunning setup.py directly with python\npython setup.py sdist   # Builds a source distribution as tar archie\npython setup.py build   # Builds from source\npython setup.py install # Installs to Python\npython setup.py develop # Installs in develop mode (changes are immediately reflected)\nUsing pip\npip install .    # Installs to Python\npip install -e . # To create symlink, so you can keep working on the code (develop mode)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "title": "NB: Building Your Own Package",
    "section": "Testing Code",
    "text": "Testing Code\nAs you work, you will want to write tests and put them somewhere. You have options:\n\nIf your package and test code are small and self contained, put the tests in with the package, e.g. package/test.\nIf the tests are large or complex, or require reading/writing files, or significant sample data, put your tests outside the package.\n\nSee Where to Put Tests?."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-package-structure",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-package-structure",
    "title": "NB: Building Your Own Package",
    "section": "A More Complex Package Structure",
    "text": "A More Complex Package Structure\nproject_name/\n    bin/\n    CHANGES.txt\n    docs/\n    LICENSE.txt\n    MANIFEST.in\n    README.txt\n    setup.py\n    test_module_1.py\n    test_module2.py      \n    package_name/\n        __init__.py\n        module1.py\n        module2.py\nCHANGES.txt: log of changes with each release\nLICENSE.txt: text of the license you choose (do choose one!)\nMANIFEST.in: description of what non-code files to include\nREADME.txt: description of the package should be written in ReST or Markdown (for PyPi):\nsetup.py: the script for building/installing package.\nbin/: This is where you put top-level scripts\n( some folks use scripts )\ndocs/: the documentation\npackage_name/: The main package this is where the code goes.\ntest/: your unit tests. Options here:"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "title": "NB: Building Your Own Package",
    "section": "More Info",
    "text": "More Info\nhttps://packaging.python.org/en/latest/overview/"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02a-InitPyDemo.html",
    "href": "notebooks/M09_PythonModules/M09-02a-InitPyDemo.html",
    "title": "NB: Demonstrations of Import and init.py()",
    "section": "",
    "text": "Demo 1: Empty __init__.py\n\nimport demo_package1.module1 as d1m\n\n\nd1m.welcome1()\n\nHi, I'm from Demo 1!\n\n\n\nfrom demo_package1.module1 import welcome1\n\n\nwelcome1()\n\nHi, I'm from Demo 1!\n\n\n\n\nDemo 2: Edited __init__.py\nYou can allow the users to import a module function directly from a package by simply adding:\nfrom package.module import func # or class\nor\nfrom .module import func # or class\nto your __init__.py file.\nFor example, our Demo2 __init__().py contains:\nfrom demo_package2.module2 import welcome2\nThis allows me to do this:\n\nimport demo_package2 as d2\n\n\nd2.welcome2()\n\nHi, I'm from Demo 2!\n\n\nOr this:\n\nfrom demo_package2 import welcome2\n\n\nwelcome2()\n\nHi, I'm from Demo 2!"
  },
  {
    "objectID": "modules/m09/m09-review.html",
    "href": "modules/m09/m09-review.html",
    "title": "Review",
    "section": "",
    "text": "Method arguments and Class Attributes\n\n\nUnderstanding Modules and Packages\n\n\n\n\n\nModules\n\n\n\n\n\nA module is a single namespace with many possible values (functions, classes, constants, etc.)\n\n\n\n\nUsually corresponds to a file.\n\n\n\n\nAll modules have a name.\n\n\n\n\nPython has only one type of module object.\n\n\n\n\n\nA Package is just a module that may contain other modules (or packages).\n\n\n\n\n\nIt is module with a path attribute.\n\n\n\n\nPackages organize modules into a named hierarchy.\n\n\n\n\nPackages : modules :: directories : files\n\n\n\n\nUsually corresponds to a directory with with an init.py file in it.\n\n\n\n\n\nThere are two kinds of packages (as of 3.3)\n\n\n\n\n\nRegular packages are traditional (2 and up to 3.2), they are a directory with an init.py file. They are dependent on the file system.\n\n\n\n\nNamespace packages are composed of portions. They do not have an init.py file. Portions can be anywhere. They are not dependent on the file system. They may be virtual.\n\n\n\n\n\nImport statements bring modules into modules. Combines two operations:\n\n\n\n\n\nSearches for named module.\n\n\n\n\nBinds results to local name, i.e. the fully qualified path or an alias.\n\n\n\n\nCompiles and runs the files and packages it imports.\n\n\n\n\n\nSome general ideas\n\n\n\n\n\nYou can think of a module as a supplemental file relative to a top-level program or script.\n\n\n\n\nModule files generally don’t do anything when run directly – they are used by other files.\n\n\n\n\nWhen modules are imported, their elements are called attributes\n\n\n\n\nImports execute init.py files from the context of the directory of execution. Think of this as the project directory.\n\n\n\n\nFile and directory names should follow variable and function naming conventions since they will be used to create the names used in the importing program.\n\n\n\n\nGlobal scope is always the file enclosing it, regardless of which module it is ultimately called from."
  },
  {
    "objectID": "modules/m10/m10-intro.html#topics",
    "href": "modules/m10/m10-intro.html#topics",
    "title": "M10 Basic R",
    "section": "Topics",
    "text": "Topics\n\nPresent R basics — syntax, data types, and operators\nPresent R data structures – vectors, lists, matrices, and data frames\nCreate a function in R, and use it in a program"
  },
  {
    "objectID": "modules/m10/m10-intro.html#readings",
    "href": "modules/m10/m10-intro.html#readings",
    "title": "M10 Basic R",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nW3Schools R Tutorial\n\n\nW3Schools R Data Structures\n\n\n\n\nOptional\n\n\nYau, R Tutorial, “R Introduction” ← Super concise"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#preliminaries",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#preliminaries",
    "title": "NB: Getting Started",
    "section": "Preliminaries",
    "text": "Preliminaries\n\nInstalling and Loading Packages\nPackages need to be installed once.\n\n## install.packages(\"tm\")  \n\nYou can also install thing using the Package window.\nOnce they are installed, you import them with the library() function:\n\nlibrary(tm)\n\nLoading required package: NLP\n\n\nNote that the library name is quoted in when installing, but not when using library.\n\n\nR’s Design\n\nDesigned to support statistical computing\nVery strong community\nMany domain-specific functions are built in\nVector first thinking\nEverything is an object\n\n\n\nR Syntax\n\nSyntax loosely follows traditional C-style\n\nBraces { and } are used to form blocks.\nSemi-colons are used optionally to end statements, required if on same line.\n\nAssignments are made with <- or ->\nDots . have no special meaning – they are not operators.\nSingle and double quotes have the same meaning, but double quotes tend to be preferred.\n\nUse single quotes if you expect your string to contain double quotes.\nBackslash escape applies to R strings, although since there are no raw strings – Python’s r\" \" – we often have to supply double backslashes in regular expressions."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "title": "NB: Getting Started",
    "section": "R Data Types",
    "text": "R Data Types\nThere are several basic R data types.\n\nNumeric\nInteger\nComplex\nLogical\nCharacter\n\n\nNumeric\nDecimal values are called “numerics” in R.\nIt is the default data type.\nIf we assign a decimal value to a variable x, x will be of numeric type:\n\nx <- 10.5       # assign a decimal value \nx              # print the value of x \n\n[1] 10.5\n\n\n\nclass(x)      # print the class name of x \n\n[1] \"numeric\"\n\n\nEven if we assign an integer to a variable k, it is will still be saved as a numeric value.\n\nk <- 1\nk              # print the value of k \n\n[1] 1\n\n\n\nclass(k)       # print the class name of k \n\n[1] \"numeric\"\n\n\nThat k is not an integer can be confirmed with is.integer():\n\nis.integer(k)  # is k an integer? \n\n[1] FALSE\n\n\n\n\nIntegers\nTo create an integer variable in R, we use as.integer().\n\ny <- as.integer(3) \ny              # print the value of y \n\n[1] 3\n\n\n\nclass(y)       # print the class name of y \n\n[1] \"integer\"\n\nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can also declare an integer by appending an L suffix.\n\ny <- 3L \nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can coerce, or cast, a numeric value into an integer with as.integer().\n\nas.integer(3.14)    # coerce a numeric value \n\n[1] 3\n\n\nAnd we can parse a string for decimal values in much the same way.\n\nas.integer(\"5.27\")  # coerce a decimal string \n\n[1] 5\n\n\nOn the other hand, it is erroneous trying to parse a non-decimal string.\n\nas.integer(\"Joe\")   # coerce an non-decimal string \n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\nWe can convert booleans to numbers this way, too.\n\nas.integer(TRUE)    # the numeric value of TRUE \n\n[1] 1\n\nas.integer(FALSE)   # the numeric value of FALSE \n\n[1] 0\n\n\n\nMath Operators\n\n\n\nOperator\nDescription\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\nx %% y\nmodulus (x mod y) 5%%2 is 1\n\n\nx %/% y\ninteger division 5%/%2 is 2\n\n\n\n\n\n\nLogical (Boolean)\nA logical value is often created via comparison between variables.\n\nx <- 1\ny <- 2   # sample values \nz <- x > y      # is x larger than y? \nz              # print the logical value \n\n[1] FALSE\n\n\n\nclass(z)       # print the class name of z \n\n[1] \"logical\"\n\n\n\nLogical Operators\nStandard logical operations are & (and), | (or), and ! (negation).\n\nu <- TRUE\nv <- FALSE\nu & v          # u AND v \n\n[1] FALSE\n\n\n\nu | v          # u OR v \n\n[1] TRUE\n\n\n\n!u             # negation of u \n\n[1] FALSE\n\n\nNote that you can use T and F instead of TRUE and FALSE.\n\na <- T\nb <- F\na & b\n\n[1] FALSE\n\n\n\n\n\nCharacters\nA character object is used to represent string values in R.\nWe convert objects into character values with the as.character() function:\n\nx <- as.character(3.14) \nx\n\n[1] \"3.14\"\n\n\n\nclass(x)       # print the class name of x \n\n[1] \"character\"\n\n\n\npaste()\nTwo character values can be concatenated with the paste() function.\n\nfname <- \"Joe\"\nlname <-\"Smith\" \npaste(fname, lname) \n\n[1] \"Joe Smith\"\n\n\npaste() takes a sep argument:\n\npaste(\"A\", \"B\", \"C\", sep=\"--\")\n\n[1] \"A--B--C\"\n\n\n\n\nsprintf()\nHowever, it is often more convenient to create a readable string with the sprintf() function, which has a C language syntax.\n\nsprintf(\"%s has %d dollars\", \"Sam\", 100) \n\n[1] \"Sam has 100 dollars\"\n\n\n\n\nsubstr()\nTo extract a substring, we apply the substr() function.\nHere is an example showing how to extract the substring between the third and twelfth positions in a string.\n\nsubstr(\"Mary has a little lamb.\", start=3, stop=12) \n\n[1] \"ry has a l\"\n\n\n\n\nsub()\nAnd to replace the first occurrence of the word “little” by another word “big” in the string, we apply the sub() function.\n\nsub(\"little\", \"big\", \"Mary has a little lamb.\") \n\n[1] \"Mary has a big lamb.\""
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "title": "NB: Getting Started",
    "section": "R Data Structures",
    "text": "R Data Structures\nBasic R comes with several data structures:\n\nVector\nMatrix\nArray\nList\nData frame\n\nA vector is what is called an array in many other programming languages\n\nA collection of cells with a fixed size where all cells hold the same data type (integers or characters or reals or whatever).\n\nA matrix is a two-dimensional vector (fixed size, all cell types the same).\nAn array is a vector with one or more dimensions.\n\nSo, an array with one dimension is (almost) the same as a vector.\nAn array with two dimensions is (almost) the same as a matrix.\nAn array with three or more dimensions is an n-dimensional array.\n\nA list can hold items of different types and the list size can be increased on the fly.\n\nList contents can be accessed either by index (like mylist[[1]]) or by name (like mylist$age).\n\nA data frame is called a table in many languages.\n\nEach column holds the same type, and the columns can have header names.\nA data frame is essential a kind of a list — a list of vectors each with the same length, but of varying data types.\n\nThe two most frequently used are Vector and Data frame.\nSo, we will look at vectors and data frames.\n\nWe will also look at lists since they are used internally to construct data frames.\n\n\nVectors and c()\nA vector is a sequence of data elements of the same basic type.\nMembers in a vector are officially called components, but many call them members.\nVectors may be created with the c() function (“c” stands for combine).\nHere is a vector of three numeric values 2, 3 and 5.\n\nc(2, 3, 5) \n\n[1] 2 3 5\n\n\nAnd here is a vector of logical values.\n\nc(TRUE, FALSE, TRUE, FALSE, FALSE) \n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n\nA vector can contain character strings.\n\nc(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nVectors from sequences using :, seq(), and rep()\nVectors can be made out of sequences which may be generated in a few ways.\n\ns1 <- 2:5\ns1\n\n[1] 2 3 4 5\n\n\nThe seq() function is like Python’s range().\n\ns2 <- seq(from=1, to=5, by=2)  # You can drop the argument names write seq(1,5,2)\ns2\n\n[1] 1 3 5\n\n\nThe rep() function will create a series of repeated values:\n\ns3 <- rep(1, 5)\ns3\n\n[1] 1 1 1 1 1\n\n\n\n\nlength()\nThe number of members in a vector is given by the length() function.\n\nlength(c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")) \n\n[1] 5\n\n\n\n\nCombining Vectors with c()\nVectors can be combined via the function c().\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n c(n, s) \n\n[1] \"2\"  \"3\"  \"5\"  \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\n\nValue Coercion\nNotice how the numeric values are being coerced into character strings when the two vectors are combined.\nThis is necessary so as to maintain the same primitive data type for members in the same vector.\n\n\nVector Math\nArithmetic operations of vectors are performed member-by-member, i.e., member-wise.\nFor example, suppose we have two vectors a and b.\n\na <- c(1, 3, 5, 7) \nb <- c(1, 2, 4, 8)\n\nThen, if we multiply a by 5, we would get a vector with each of its members multiplied by 5.\n\n5 * a \n\n[1]  5 15 25 35\n\n\nAnd if we add a and b together, the sum would be a vector whose members are the sum of the corresponding members from a and b.\n\na + b\n\n[1]  2  5  9 15\n\n\nSimilarly for subtraction, multiplication and division, we get new vectors via member-wise operations.\n\na - b \n\n[1]  0  1  1 -1\n\n\n\na * b \n\n[1]  1  6 20 56\n\n\n\na / b \n\n[1] 1.000 1.500 1.250 0.875\n\n\n\n\nThe Recycling Rule\nIf two vectors are of unequal length, the shorter one will be recycled in order to match the longer vector.\nFor example, the following vectors u and v have different lengths, and their sum is computed by recycling values of the shorter vector u.\n\nu <- c(10, 20, 30) \nv <- c(1, 2, 3, 4, 5, 6, 7, 8, 9) \nu + v \n\n[1] 11 22 33 14 25 36 17 28 39\n\n\n\n\nVector Indexes\nWe retrieve values in a vector by declaring an index inside a single square bracket index [] operator.\nVector indexes are 1-based.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[3] \n\n[1] \"cc\"\n\n\n\n\nNegative Indexing\nUnlike Python, if the index is negative, it will remove the member whose position has the same absolute value as the negative index.\nIt really does mean subtraction!\nFor example, the following creates a vector slice with the third member removed.\n\ns[-3] \n\n[1] \"aa\" \"bb\" \"dd\" \"ee\"\n\n\n\n\nOut-of-Range Indexes\nValues for out-of-range indexes are reported as NA.\n\ns[10] \n\n[1] NA\n\n\n\n\nNumeric Index Vectors\nA new vector can be sliced from a given vector with a numeric vector passed to the indexing operator.\nIndex vectors consist of member positions of the original vector to be retrieved.\nHere we see how to retrieve a vector slice containing the second and third members of a given vector s.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[c(2, 3)] \n\n[1] \"bb\" \"cc\"\n\n\n\n\nDuplicate Indexes\nThe index vector allows duplicate values. Hence the following retrieves a member twice in one operation.\n\ns[c(2, 3, 3)] \n\n[1] \"bb\" \"cc\" \"cc\"\n\n\n\n\nOut-of-Order Indexes\nThe index vector can even be out-of-order. Here is a vector slice with the order of first and second members reversed.\n\ns[c(2, 1, 3)] \n\n[1] \"bb\" \"aa\" \"cc\"\n\n\n\n\nRange Index\nTo produce a vector slice between two indexes, we can use the colon operator “:”. This can be convenient for situations involving large vectors.\n\ns[2:4] \n\n[1] \"bb\" \"cc\" \"dd\"\n\n\n\n\nLogical Index Vectors\nA new vector can be sliced from a given vector with a logical index vector.\nThe logical vector must the same length as the original vector.\nIts members are TRUE if the corresponding members in the original vector are to be included in the slice, and FALSE if otherwise.\n\nThis is what we called boolean filtering and masking in Python.\n\nFor example, consider the following vector s of length 5.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")\n\nTo retrieve the the second and fourth members of s, we define a logical vector L of the same length, and have its second and fourth members set as TRUE.\n\nL = c(FALSE, TRUE, FALSE, TRUE, FALSE)\ns[L] \n\n[1] \"bb\" \"dd\"\n\n\nThe code can be abbreviated into a single line.\n\ns[c(FALSE, TRUE, FALSE, TRUE, FALSE)]\n\n[1] \"bb\" \"dd\"\n\n\n\n\nNaming Vector Members with names()\nWe can assign names to vector members.\n\nv <- c(\"Mary\", \"Sue\") \nnames(v) <- c(\"First\", \"Last\") \nv \n\n First   Last \n\"Mary\"  \"Sue\" \n\n\nNow we can retrieve the first member by name.\n\nv[\"First\"] \n\n First \n\"Mary\" \n\n\nWe can also reverse the order with a character string index vector.\n\nv[c(\"Last\", \"First\")] \n\n  Last  First \n \"Sue\" \"Mary\" \n\n\n\n\n\nLists\nA list is a generic vector containing other objects.\nThe following variable x is a list containing copies of three vectors n, s, b, and a numeric value 3.\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \nb <- c(TRUE, FALSE, TRUE, FALSE, FALSE) \n\nx <- list(n, s, b, 3)   # x contains copies of n, s, b\nx\n\n[[1]]\n[1] 2 3 5\n\n[[2]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n[[4]]\n[1] 3\n\n\nNote that odd bracket notation.\nEach list member contains a vector.\n\nList Slicing\nWe retrieve a list slice with the single square bracket [] operator.\nThe following is a slice containing the second member of x, which is a copy of s.\n\nx[2] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWith an index vector, we can retrieve a slice with multiple members.\nHere a slice containing the second and fourth members of x.\n\nx[c(2, 4)] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[2]]\n[1] 3\n\n\n\n\nMember Reference with [[]]\nTo reference a list member directly, we use the double square bracket [[]] operator.\nThe following object x[[2]] is the second member of x.\nIn other words, x[[2]] is a copy of s, but is not a slice containing s or its copy.\n\nx[2]\n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nx[[2]]\n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWe can modify its content directly.\n\nx[[2]][1] = \"ta\" \nx[[2]] \n\n[1] \"ta\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nAnd s is unaffected.\n\ns \n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\n\n\nData Frames\nA data frame is used for storing data tables.\nIt is essentially a list of vectors of equal length. For example, the following variable df is a data frame containing three vectors n, s, b.\nYou can think of a data frame is a special kind of list.\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\") \nb <- c(TRUE, FALSE, TRUE) \ndf <- data.frame(n, s, b) # df is a data frame\ndf\n\n  n  s     b\n1 2 aa  TRUE\n2 3 bb FALSE\n3 5 cc  TRUE\n\n\nNotice that data frames are built column-wise – this is true of Pandas data frames as well.\nThe top line of the data frame is the header; it contains the column names.\nThe data type is list below the column name.\nEach horizontal line afterward denotes a data row, which begins with the name of the row, and then followed by the actual data.\nEach data member of a row is called a cell.\n\nBuilt-in Data Frames\nHere is a built-in data frame in R, called mtcars.\n\nmtcars \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nTo retrieve data in a cell, we would enter its row and column coordinates in the single square bracket [ ] operator.\nThe two coordinates are separated by a comma, e.g. [row, col].\nHere is the cell value from the first row, second column of mtcars.\n\nmtcars[1, 2] \n\n[1] 6\n\n\nWe can use names instead of the numeric coordinates.\n\nmtcars[\"Mazda RX4\", \"cyl\"] \n\n[1] 6\n\n\nLastly, the number of data rows in the data frame is given by the nrow() function.\n\nnrow(mtcars)    # number of data rows \n\n[1] 32\n\n\nAnd the number of columns of a data frame is given by the ncol() function.\n\nncol(mtcars)    # number of columns \n\n[1] 11\n\n\n\ndim(mtcars)\n\n[1] 32 11\n\n\nFurther details of the mtcars data set is available in the R documentation.\n\nhelp(mtcars)\n\n\n\nPreview with head()\nInstead of printing out the entire data frame, it is often desirable to preview it with the head function beforehand\n\nhead(mtcars) \n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\nData Frame Column Vectors\nWe reference a data frame column with the double square bracket [[]] operator, just as we do for lists.\nFor example, to retrieve the ninth column vector of the built-in data set mtcars, we write mtcars[[9]]\n\nmtcars[[9]] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can retrieve the same column vector by its name\n\nmtcars[[\"am\"]] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can also retrieve with the “$” operator in lieu of the double square bracket operator\n\nmtcars$am \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nYet another way to retrieve the same column vector is to use the single square bracket “[]” operator. We prepend the column name with a comma character, which signals a wildcard match for the row position\n\nmtcars[, \"am\"] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\n\n\nData Frame Column Slice\nWe retrieve a data frame column slice with the single square bracket [ ] operator.\nNote: This is like a one-column dataframe in Pandas, as opposed to a Series.\n\nNumeric Indexing\nThe following is a slice containing the first column of the built-in data set mtcars\n\nmtcars[1] \n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\n\n\nName Indexing\nWe can retrieve the same column slice by its name\n\nmtcars[\"mpg\"] \n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\nCompare to accessing the column vector data directly:\n\nmtcars[[\"mpg\"]]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\nThis is similar to the .values() method in Pandas, which returns the raw NumPy array\nTo retrieve a data frame slice with the two columns mpg and hp, we pack the column names in an index vector inside the single square bracket operator\n\nmtcars[c(\"mpg\", \"hp\")] \n\n                     mpg  hp\nMazda RX4           21.0 110\nMazda RX4 Wag       21.0 110\nDatsun 710          22.8  93\nHornet 4 Drive      21.4 110\nHornet Sportabout   18.7 175\nValiant             18.1 105\nDuster 360          14.3 245\nMerc 240D           24.4  62\nMerc 230            22.8  95\nMerc 280            19.2 123\nMerc 280C           17.8 123\nMerc 450SE          16.4 180\nMerc 450SL          17.3 180\nMerc 450SLC         15.2 180\nCadillac Fleetwood  10.4 205\nLincoln Continental 10.4 215\nChrysler Imperial   14.7 230\nFiat 128            32.4  66\nHonda Civic         30.4  52\nToyota Corolla      33.9  65\nToyota Corona       21.5  97\nDodge Challenger    15.5 150\nAMC Javelin         15.2 150\nCamaro Z28          13.3 245\nPontiac Firebird    19.2 175\nFiat X1-9           27.3  66\nPorsche 914-2       26.0  91\nLotus Europa        30.4 113\nFord Pantera L      15.8 264\nFerrari Dino        19.7 175\nMaserati Bora       15.0 335\nVolvo 142E          21.4 109\n\n\n\n\n\nData Frame Row Slice\nWe retrieve rows from a data frame with the single square bracket operator, just like what we did with columns. However, in additional to an index vector of row positions, we append an extra comma character. This is important, as the extra comma signals a wildcard match for the second coordinate for column positions.\n\nNumeric Indexing\nFor example, the following retrieves a row record of the built-in data set mtcars. Please notice the extra comma in the square bracket operator, and it is not a typo. It states that the 1974 Camaro Z28 has a gas mileage of 13.3 miles per gallon, and an eight cylinder 245 horse power engine, …, etc\n\nmtcars[24,] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nTo retrieve more than one rows, we use a numeric index vector\n\nmtcars[c(3, 24),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nName Indexing\nWe can retrieve a row by its name.\n\nmtcars[\"Camaro Z28\",] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nAnd we can pack the row names in an index vector in order to retrieve multiple rows.\n\nmtcars[c(\"Datsun 710\", \"Camaro Z28\"),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nLogical Indexing\nLastly, we can retrieve rows with a logical index vector. In the following vector L, the member value is TRUE if the car has automatic transmission, and FALSE if otherwise.\n\nL <- mtcars$am == 0 \nL \n\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nHere is the list of vehicles with automatic transmission\n\nmtcars[L,] \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n\n\nAnd here is the gas mileage data for automatic transmission\n\nmtcars[L,]$mpg \n\n [1] 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 21.5\n[16] 15.5 15.2 13.3 19.2\n\n\n\n\nChange the name of a column\n\nnames(df)[names(df) == 'old.var.name'] <- 'new.var.name'\n\n\n\n\nImporting Data\nIt is often necessary to import sample textbook data into R before you start working on your homework.\nExcel Files\nQuite frequently, the sample data is in Excel format, and needs to be imported into R prior to use. For this, we can use the function read.xls from the gdata package. It reads from an Excel spreadsheet and returns a data frame. The following shows how to load an Excel spreadsheet named “mydata.xls”. This method requires Perl runtime to be present in the system\n\n##library(gdata)                   # load gdata package \n##help(read.xls)                   # documentation \n##mydata <- read.xls(\"mydata.xls\")  # read from first sheet\n\nAlternatively, we can use the function loadWorkbook from the XLConnect package to read the entire workbook, and then load the worksheets with readWorksheet. The XLConnect package requires Java to be pre-installed\n\n##library(XLConnect)               # load XLConnect package \n##wk <- loadWorkbook(\"mydata.xls\") \n##df <- readWorksheet(wk, sheet=\"Sheet1\")\n\nTable Files\nA data table can resides in a text file.\nThe cells inside the table are separated by blank characters.\nHere is an example of a table with 4 rows and 3 columns.\n100 a1 b1 \n200 a2 b2 \n300 a3 b3 \n400 a4 b4\nNow copy and paste the table above in a file named “mydata.txt” with a text editor.\nThen load the data into the workspace with the function read.table\n\nmydata <- read.table(\"mydata.txt\")  # read text file \n\nWarning in read.table(\"mydata.txt\"): incomplete final line found by\nreadTableHeader on 'mydata.txt'\n\nmydata                             # print data frame \n\n   V1 V2 V3\n1 100 a1 b1\n2 200 a2 b2\n3 300 a3 b3\n4 400 a4 b4\n\n\nCSV Files\nThe sample data can also be in comma separated values (CSV) format. Each cell inside such data file is separated by a special character, which usually is a comma, although other characters can be used as well.\nThe first row of the data file should contain the column names instead of the actual data. Here is a sample of the expected format.\nCol1,Col2,Col3 \n100,a1,b1 \n200,a2,b2 \n300,a3,b3\nAfter we copy and paste the data above in a file named “mydata.csv” with a text editor, we can read the data with the function read.csv\n\nmydata <- read.csv(\"mydata.csv\")  # read csv file \n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'mydata.csv'\n\nmydata \n\n  Col1 Col2 Col3\n1  100   a1  b1 \n2  200   a2  b2 \n3  300   a3   b3\n\n\nIn various European locales, as the comma character serves as the decimal point, the function read.csv2 should be used instead. For further detail of the read.csv and read.csv2 functions, please consult the R documentation\n\nhelp(read.csv)\n\n\n\nWorking Directory\nFinally, the code samples above assume the data files are located in the R working directory, which can be found with the function getwd().\nNote that these things can also be set using the RStudio’s GUI.\n\ngetwd()               # get current working directory\n\n[1] \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M10_RBasics\"\n\n\nYou can select a different working directory with the function setwd(), and thus avoid entering the full path of the data files\n\n## setwd(\"<new path>\")   # set working directory\n\nNote that the forward slash should be used as the path separator even on Windows platform\n\n## setwd(\"C:/MyDoc\")"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "title": "NB: Getting Started",
    "section": "Extra",
    "text": "Extra\n\nPlots with plot()\nR is know for its high-quality visualizations, and we’ll explore at these in more detail when we look at GGPlot.\nFor now, consider the plot() function.\nLet’s plot the data from the built in data frame airquality.\n\nairquality\n\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n\n\n\nplot(airquality)\n\n\n\n\n\nplot(airquality[, c(\"Temp\", \"Wind\")])\n\n\n\n\n\nplot(airquality$Temp, type='l')\n\n\n\n\n\n?plot\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  graphics              /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  base                  /Library/Frameworks/R.framework/Resources/library\n\n\nUsing the first match ...\n\n\n\n\nValue Counts with table()\nThis function is like .value_counts() in Pandas. It does a quick count of all the value types of a feature or combination of them.\nHere we get a table of values and their counts for airquality$Temp, convert this into a data frame, and then plot the results.\n\ntemps <- table(airquality$Temp)\ntemps\n\n\n56 57 58 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \n 1  3  2  2  3  2  1  2  2  3  4  4  3  1  3  3  5  4  4  9  7  6  6  5 11  9 \n83 84 85 86 87 88 89 90 91 92 93 94 96 97 \n 4  5  5  7  5  3  2  3  2  5  3  2  1  1 \n\n\n\ntemps.df <- data.frame(temps)\ntemps.df\n\n   Var1 Freq\n1    56    1\n2    57    3\n3    58    2\n4    59    2\n5    61    3\n6    62    2\n7    63    1\n8    64    2\n9    65    2\n10   66    3\n11   67    4\n12   68    4\n13   69    3\n14   70    1\n15   71    3\n16   72    3\n17   73    5\n18   74    4\n19   75    4\n20   76    9\n21   77    7\n22   78    6\n23   79    6\n24   80    5\n25   81   11\n26   82    9\n27   83    4\n28   84    5\n29   85    5\n30   86    7\n31   87    5\n32   88    3\n33   89    2\n34   90    3\n35   91    2\n36   92    5\n37   93    3\n38   94    2\n39   96    1\n40   97    1\n\n\n\nplot(temps.df, xlab=\"Temp\", type=\"b\")"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "title": "NB: Control Structures and Functions",
    "section": "if/else Statements",
    "text": "if/else Statements\nYou’ve seen this in Python.\nThey work the same way in both languages.\nHere’s their syntax in R.\nif(<condition>) {\n        ## do something\n} \n\nif(<condition>) {\n        ## do something\n} \nelse {\n        ## do something else\n}\n\nif(<condition1>) {\n        ## do something\n} else if(<condition2>)  {\n        ## do something different\n} else {\n        ## do something different\n}\nGenerate a uniform random number:\n\nx <- runif(1, 0, 10) # From the Uniform Distribution\n\nif(x > 3) {\n  y <- 10\n} else {\n  y <- 0\n}\n\nx\n\n[1] 8.408442\n\ny\n\n[1] 10\n\n\nYou assign an if statement to a variable.\n\nz <- if(x > 3) {\n  10\n} else { \n  0\n}\n\nz\n\n[1] 10\n\n\nYou can stack if blocks, too.\nif(<condition1>) {\n\n}\n\nif(<condition2>) {\n\n}"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "title": "NB: Control Structures and Functions",
    "section": "Control Structures",
    "text": "Control Structures\n\nfor Loops\nFor loops are straight-forward. The take an interator variable, e.g. i, and assign it successive values from a sequence or vector.\nFor loops are often used to iteratE over the elements of an object (list, vector, etc.).\n\nfor(i in 1:10) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nAccording to Hadley Wickham, loops are pretty much the only looping construct that you will need in R.\nThe following three loops all have the same behavior.\n\nx <- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in 1:4) {\n  # Print out each element of 'x'\n  print(x[i])  \n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nseq_along()\nThe seq_along() function is commonly used in conjunction with for loops in order to generate an integer sequence based on the length of an object (in this case, the object x).\n\nx\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\n\nGenerate a sequence based on length of ‘x’:\n\nfor(i in seq_along(x)) {   \n  print(x[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nIt is not necessary to use an index-type variable.\n\nfor(letter in x) {\n  print(letter)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nFor one line loops, the curly braces are not strictly necessary.\n\nfor(i in 1:4) print(x[i])\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nNested for loops\nDor loops can be nested inside of each other.\n\nx <- matrix(1:6, 2, 3)\nfor(i in seq_len(nrow(x))) {\n  for(j in seq_len(ncol(x))) {\n    print(x[i, j])\n  }   \n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 2\n[1] 4\n[1] 6\n\n\nNested loops are used to generate multidimensional or hierarchical data structures (e.g. matrices, lists)."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "title": "NB: Control Structures and Functions",
    "section": "while Loops",
    "text": "while Loops\nAs with Python, while loops start with a condition. It loops while the condition is true and stops when it is false.\nRemembe, while loops can go on forever is the truth condition is never met.\n\ncount <- 0\nwhile(count < 10) {\n  print(count)\n  count <- count + 1\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "title": "NB: Control Structures and Functions",
    "section": "repeat Loops",
    "text": "repeat Loops\nrepeat loops are using by R. They initiate an infinite loop right from the start.\nThe only way to exit a repeat loop is to call break on an internal condition."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "title": "NB: Control Structures and Functions",
    "section": "next and break",
    "text": "next and break\nnext is used to skip an iteration of a loop. Same as Python continue.\n\nfor (i in 1:100) {\n  if (i <= 20) {\n    # Skip the first 20 iterations\n    next                \n  }      # Do something here\n}\n\nbreak is used to exit a loop immediately.\n\nfor (i in 1:100) {\n  print(i)\n  if (i > 20) {\n    # Stop loop after 20 iterations\n    break  \n  }     \n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "title": "NB: Control Structures and Functions",
    "section": "Functions",
    "text": "Functions\nDefine some data\n\nx <- 5                \nxx <- c(4, 6, 7, 8, 2, 11)\n\nNow, define a function that does the following: - takes a value, vector of values as inputs - normalizes the value against the vector by subtracting the vector mean from value, and dividing by vector standard deviation.\n\ncompute_zscore <- function(val, vec) {\n  z <- (val - mean(vec)) / sd(vec)\n}\n\nprint(compute_zscore(x, xx))\n\n[1] -0.4244764\n\n\nIf vector contains identical values, sd is zero, and so the z-score is undefined.\n\nprint(compute_zscore(x, c(1, 1, 1, 1)))\n\n[1] Inf\n\n\nIf vector contains missing values, the result will be NA.\n\nxx_na <- c(1, NA, 3, 5) \nprint(compute_zscore(x, xx_na))\n\n[1] NA"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "title": "NB: Control Structures and Functions",
    "section": "Using conditions in functions",
    "text": "Using conditions in functions\nA function returns 1 if passed value is odd, 0 if even"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "title": "NB: Control Structures and Functions",
    "section": "%% is mod operator (returns remainder)",
    "text": "%% is mod operator (returns remainder)\n\nis_odd <- function(x){ if (x %% 2 == 1) { \n    return(1) \n  } else { \n    return(0)\n  } \n}\n\nCall to test some cases:\n\nis_odd(4)\n\n[1] 0\n\nis_odd(3)\n\n[1] 1\n\n\nFunction arguments can use default values:\n\nthreshold_vals <- function(p, thresh = 0.5) {\n  # for each element in p, returns TRUE if value > thresh, else FALSE\n  p > thresh\n}\n\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1))\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\nNow, pass a threshhold:\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1), 0.7)\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nAssert important preconditions\n\nadd_vectors <- function(x, y) {\n  # assert the lengths of vectors x and y match\n  # if they do, sum elementwise, else throw error with stop()\n\n  if (length(x) != length(y)) {\n    stop(\"x and y must be the same length\", call. = FALSE)\n  }\n  x + y\n}\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3))\n\n[1] 4 5 6\n\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "title": "NB: Control Structures and Functions",
    "section": "Scoping Rules",
    "text": "Scoping Rules\n\nz <- 4\ntest_fcn <- function(x) {\n  x^z\n}\n\nNow look at this:\n\ntest_fcn(2)\n\n[1] 16\n\n\nIf z isn’t defined in the function, how does this work?\nR’s scoping rules are similar to Python’s.\nSince z isn’t in the function, R looks in the function’s environment for it.\nFor more on scoping rules, see Chapter 15: Scoping Rules of R in Peng’s R Programming For Data Science."
  },
  {
    "objectID": "modules/m11/m11-intro.html#topics",
    "href": "modules/m11/m11-intro.html#topics",
    "title": "M11 Dplyr",
    "section": "Topics",
    "text": "Topics\n\nThe Tidyverse\nTibbles, a ligthweight version of data frames\nData transformations using dplyr verbs"
  },
  {
    "objectID": "modules/m11/m11-intro.html#readings",
    "href": "modules/m11/m11-intro.html#readings",
    "title": "M11 Dplyr",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nRFDS Explore 5 Data Transformation (dplyr)\n\n\nRDFS Wrangle 10 Tibbles\n\n\nRDFS Wrangle 11 Data Import\n\n\nRDFS Wrangle 12 Tidy data\n\n\n\n\nOptional\n\n\nPeng, 2022, “Managing Data Frames with the dplyr package”"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "title": "NB: Introducing Tibbles",
    "section": "",
    "text": "Tibbles\nDplyr can work with different rectangular data structures:\nThe foundational data structure of the Tidyverse is the tibble.\nTibbles are data frames, but they tweak some older behaviors to make your life a little easier.\nTo learn more about tibbles, check out the vignette:\nThere are two main differences in the usage of a tibble vs. a classic data.frame: printing and subsetting."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#the-tidyverse",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#the-tidyverse",
    "title": "NB: Introducing Tibbles",
    "section": "The Tidyverse",
    "text": "The Tidyverse\nTidyverse is a collection of essential R packages for data science.\nThe packages included in the Tidyverse are designed to support the pipeline of activities associated with data science, such as filtering, transforming, visualizing, etc.\n\nTidyverse was created by Hadley Wickham and his team with the aim of providing all these utilities to clean and work with data.\nHere’s a graphic of the packages associated with the Tidyverse:"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "title": "NB: Introducing Tibbles",
    "section": "Dplyr",
    "text": "Dplyr\nDplyr introduces new set of functions that make working with data more intuitive.\n\nIt does this by introducing a set of functions that work together well to produce pipelines of actions.\n\nBut as important, it introduces a vocabulary for talking about data.\n\nThis makes it possible to imagine solutions verbally, and then to implement them in code.\n\nTo use the Tidyverse, we often import everything:\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.5     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.2\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "title": "NB: Introducing Tibbles",
    "section": "Piping with %>%",
    "text": "Piping with %>%\nJust a quick note about this odd looking operator that you will start to see.\nOne of the key elements of the Tidyverse is the use of piping, or the ability of to pass the return values of one function to another, with without have to nest functions.\nFor example, instead of something like this:\n\na <- \"Hello\"\nb <- \"World\"\n\nvar1 <- c(a, b)\nvar2 <- paste(var1)\nprint(var2)\n\n[1] \"Hello\" \"World\"\n\n\nOr this:\n\nprint(paste(c(a,b)))\n\n[1] \"Hello\" \"World\"\n\n\nWe can do:\n\nc(a, b) %>%\n  paste() %>%\n  print()\n\n[1] \"Hello\" \"World\"\n\n\nAlthough the last pattern is longer than the preceding, it is much easier to read and write, especially when we are working with several connected functions.\nThis is similar to method chaining in Python, but is more pervasive.\n\nIn Python you can do it with individual objects that return themselves (as it were).\nIn Tidyverse, you can apply it to any two methods so long as it makes sense to pass the output of as the input of another.\nBasically, the output of one function becomes the first argument of the following the %>%.\n\nIt is similar to the pipe operator | in Unix shells.\nBy the way, the operator comes with the magrittr package, which is a central part of the Tidyverse. It is so central, in fact, that packages in the tidyverse load %>% automatically.\nIt provides a set of operators which make your code more readable."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "title": "NB: Introducing Tibbles",
    "section": "Creating tibbles",
    "text": "Creating tibbles\nIf you need to make a tibble “by hand”, you can use tibble() or tribble() (see below).\ntibble() works by assembling individual vectors, column-wise operation:\n\nx <- c(1, 2, 5)\ny <- c(\"a\", \"b\", \"h\")\ntibble(x, y)\n\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     5 h    \n\n\nYou can also optionally name the inputs, provide data inline with c(), and perform computation:\n\ntibble(\n  x1 = x,\n  x2 = c(10, 15, 25),\n  y = sqrt(x1^2 + x2^2)\n)\n\n# A tibble: 3 × 3\n     x1    x2     y\n  <dbl> <dbl> <dbl>\n1     1    10  10.0\n2     2    15  15.1\n3     5    25  25.5\n\n\nEvery column in a data frame or tibble must be same length, so you’ll get an error if the lengths are different:\nAs the error suggests, individual values will be recycled to the same length as everything else:\n\ntibble(\n  x = 1:5,\n  y = \"a\",\n  z = TRUE\n)\n\n# A tibble: 5 × 3\n      x y     z    \n  <int> <chr> <lgl>\n1     1 a     TRUE \n2     2 a     TRUE \n3     3 a     TRUE \n4     4 a     TRUE \n5     5 a     TRUE"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "title": "NB: Introducing Tibbles",
    "section": "Tribbles",
    "text": "Tribbles\nAnother way to create a tibble is with tribble(), which short for transposed tibble.\ntribble() is customized for data entry in code: column headings start with ~ and entries are separated by commas.\nThis makes it possible to lay out small amounts of data in an easy to read form:\n\ntribble(\n  ~x, ~y, ~z,\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)\n\n# A tibble: 2 × 3\n  x         y     z\n  <chr> <dbl> <dbl>\n1 a         2   3.6\n2 b         1   8.5\n\n\nFinally, if you have a regular data frame you can turn it into to a tibble with as_tibble():\n\nas_tibble(mtcars)\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nThe inverse of as_tibble() is as.data.frame(); it converts a tibble back into a regular data.frame."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "title": "NB: Introducing Tibbles",
    "section": "Non-syntactic names",
    "text": "Non-syntactic names\nIt’s possible for a tibble to have column names that are not valid R variable names, names that are non-syntactic.\nFor example, the variables might not start with a letter or they might contain unusual characters like a space.\nTo refer to these variables, you need to surround them with backticks, `:\n\ntb <- tibble(\n  `:)` = \"smile\", \n  ` ` = \"space\",\n  `2000` = \"number\"\n)\ntb\n\n# A tibble: 1 × 3\n  `:)`  ` `   `2000`\n  <chr> <chr> <chr> \n1 smile space number\n\n\nYou’ll also need the backticks when working with these variables in other packages, like ggplot2, dplyr, and tidyr."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "title": "NB: Introducing Tibbles",
    "section": "Printing",
    "text": "Printing\nThe print method:\n\nOnly the first 10 rows\nAll the columns that fit on screen\n\nThis makes it much easier to work with large data.\n\ntibble(\n  a = lubridate::now() + runif(1e3) * 86400,\n  b = lubridate::today() + runif(1e3) * 30,\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n\n# A tibble: 1,000 × 5\n   a                   b              c      d e    \n   <dttm>              <date>     <int>  <dbl> <chr>\n 1 2023-08-01 19:48:54 2023-08-12     1 0.564  v    \n 2 2023-08-02 00:35:28 2023-08-17     2 0.0967 c    \n 3 2023-08-02 13:42:30 2023-08-19     3 0.453  s    \n 4 2023-08-02 05:56:08 2023-08-21     4 0.709  a    \n 5 2023-08-02 15:22:58 2023-08-07     5 0.177  c    \n 6 2023-08-01 22:38:30 2023-08-08     6 0.797  x    \n 7 2023-08-02 01:17:24 2023-08-08     7 0.0214 b    \n 8 2023-08-02 15:12:09 2023-08-30     8 0.264  m    \n 9 2023-08-02 01:27:14 2023-08-27     9 0.705  c    \n10 2023-08-02 03:44:58 2023-08-08    10 0.638  i    \n# ℹ 990 more rows\n\n\nWhere possible, tibbles also use color to draw your eye to important differences.\nOne of the most important distinctions is between the string \"NA\" and the missing value, NA:\n\ntibble(x = c(\"NA\", NA))\n\n# A tibble: 2 × 1\n  x    \n  <chr>\n1 NA   \n2 <NA> \n\n\nTibbles are designed to avoid overwhelming your console when you print large data frames.\nBut sometimes you need more output than the default display.\nThere are a few options that can help.\nFirst, you can explicitly print() the data frame and control the number of rows (n) and the width of the display. width = Inf will display all columns:\n\nlibrary(nycflights13)\nflights %>%\n  print(n = 10, width = Inf)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n   arr_delay carrier flight tailnum origin dest  air_time distance  hour minute\n       <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>\n 1        11 UA        1545 N14228  EWR    IAH        227     1400     5     15\n 2        20 UA        1714 N24211  LGA    IAH        227     1416     5     29\n 3        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n 4       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45\n 5       -25 DL         461 N668DN  LGA    ATL        116      762     6      0\n 6        12 UA        1696 N39463  EWR    ORD        150      719     5     58\n 7        19 B6         507 N516JB  EWR    FLL        158     1065     6      0\n 8       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0\n 9        -8 B6          79 N593JB  JFK    MCO        140      944     6      0\n10         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0\n   time_hour          \n   <dttm>             \n 1 2013-01-01 05:00:00\n 2 2013-01-01 05:00:00\n 3 2013-01-01 05:00:00\n 4 2013-01-01 05:00:00\n 5 2013-01-01 06:00:00\n 6 2013-01-01 05:00:00\n 7 2013-01-01 06:00:00\n 8 2013-01-01 06:00:00\n 9 2013-01-01 06:00:00\n10 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\nYou can also control the default print behavior by setting options:\n\noptions(tibble.print_max = n, tibble.print_min = m): if more than n rows, print only m rows.\nUse options(tibble.print_min = Inf) to always show all rows.\nUse options(tibble.width = Inf) to always print all columns, regardless of the width of the screen.\n\nYou can see a complete list of options by looking at the package help with package?tibble."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-rstudio-view",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-rstudio-view",
    "title": "NB: Introducing Tibbles",
    "section": "Using RStudio View()",
    "text": "Using RStudio View()\nA final option is to use RStudio’s built-in data viewer to get a scrollable view of the complete dataset. This is also often useful at the end of a long chain of manipulations.\n\nflights %>%\n  View()"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "title": "NB: Introducing Tibbles",
    "section": "Extracting variables",
    "text": "Extracting variables\nSo far all the tools you’ve learned have worked with complete data frames.\nIf you want to pull out a single variable, you can use dplyr::pull():\n\ntb <- tibble(\n  id = LETTERS[1:5],\n  x1  = 1:5,\n  y1  = 6:10\n)\n\n\ntb %>%  \n  pull(x1) # by name\n\n[1] 1 2 3 4 5\n\n\n\ntb %>%  \n  pull(1)  # by position\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\npull() also takes an optional name argument that specifies the column to be used as names for a named vector, which you’ll learn about in ?sec-vectors.\n\ntb %>%  \n  pull(x1, name = id)\n\nA B C D E \n1 2 3 4 5 \n\n\nYou can also use the base R tools $ and [[. [[ can extract by name or position; $ only extracts by name but is a little less typing.\nExtract by name:\n\ntb$x1\n\n[1] 1 2 3 4 5\n\ntb[[\"x1\"]]\n\n[1] 1 2 3 4 5\n\n\nExtract by position:\n\ntb[[1]]\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\nCompared to a data frame, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.\n\n# Tibbles complain a lot:\ntb$x\n\nWarning: Unknown or uninitialised column: `x`.\n\n\nNULL\n\ntb$z\n\nWarning: Unknown or uninitialised column: `z`.\n\n\nNULL\n\n\n\n# Data frame use partial matching and don't complain if a column doesn't exist\ndf <- as.data.frame(tb)\ndf$x\n\n[1] 1 2 3 4 5\n\ndf$z\n\nNULL\n\n\nFor this reason we sometimes joke that tibbles are lazy and surly: they do less and complain more."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "title": "NB: Introducing Tibbles",
    "section": "Subsetting",
    "text": "Subsetting\nLastly, there are some important differences when using [.\nWith data.frames, [ sometimes returns a data.frame, and sometimes returns a vector.\n\nThis is a common source of bugs.\n\nWith tibbles, [ always returns another tibble.\n\nThis can sometimes cause problems when working with older code.\nIf you hit one of those functions, just use as.data.frame() to turn your tibble back to a data.frame."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "title": "NB: The dplyr package",
    "section": "",
    "text": "Core Methods\nThe dplyr package provides a concise set of operations for managing data frames and tibbles.\nIt allows us to perform a number of complex operations in just a few lines of code.\nIn particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of group_by() and summarize().\nOnce you learn the dplyr grammar there are a few additional benefits — dplyr can work with other data frame “back ends” such as SQL databases. There is an SQL interface for relational databases via the DBI package — dplyr can be integrated with the data.table package for large fast tables\nThe dplyr package is handy way to both simplify and speed up your data frame management code. It’s rare that you get such a combination at the same time!"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "title": "NB: The dplyr package",
    "section": "dplyr Grammar",
    "text": "dplyr Grammar\nSome of the key “verbs” provided by the dplyr package are:\n\nselect: return a subset of the columns of a data frame, using a flexible notation\nfilter: extract a subset of rows from a data frame based on logical conditions\narrange: reorder rows of a data frame\nrename: rename variables in a data frame\nmutate: add new variables/columns or transform existing variables\nsummarise / summarize: generate summary statistics of different variables in the data frame, possibly within strata\n%>%: the “pipe” operator is used to connect multiple verb actions together into a pipeline"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "title": "NB: The dplyr package",
    "section": "Common dplyr Function Properties",
    "text": "Common dplyr Function Properties\nAll of the functions that we will discuss in this Chapter will have a few common characteristics. In particular,\n\nThe first argument is a data frame.\nThe subsequent arguments describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly without using the $ operator (just use the column names).\nThe return result of a function is a new data frame.\nData frames must be properly formatted and annotated for this to all be useful.\n\nIn particular, the data must be tidy The main principles of tidy data are:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "title": "NB: The dplyr package",
    "section": "Installing the dplyr package",
    "text": "Installing the dplyr package\nThe dplyr package can be installed from CRAN or from GitHub using the devtools package and the install_github() function.\nThe GitHub repository will usually contain the latest updates to the package and the development version.\nTo install from CRAN, just run\n\ninstall.packages(\"dplyr\")\n\nTo install from GitHub you can run\n\ninstall_github(\"hadley/dplyr\")\n\nAfter installing the package it is important that you load it into your R session with the library() function.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nYou may get some warnings when the package is loaded because there are functions in the dplyr package that have the same name as functions in other packages. For now you can ignore the warnings."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "title": "NB: The dplyr package",
    "section": "Getting a dataset",
    "text": "Getting a dataset\nLet’s use a dataset containing air pollution and temperature data for the city of Chicago in the U.S.\nYou will find the data in the directory for this module.\nLoad the data into R using the readRDS() function.\n\nchicago <- readRDS(\"chicago.rds\")\n\nYou can see some basic characteristics of the dataset with the dim() and str() functions.\n\ndim(chicago)\n\n[1] 6940    8\n\n\n\nstr(chicago)\n\n'data.frame':   6940 obs. of  8 variables:\n $ city      : chr  \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date, format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num  34 NA 34.2 47 NA ...\n $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...\n\n\n\nhead(chicago)\n\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#select",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#select",
    "title": "NB: The dplyr package",
    "section": "select()",
    "text": "select()\nWe use the select() function to select columns you want to focus on.\nSuppose we wanted to take the first 3 columns only.\nThere are a few ways to do this.\nWe could for example use numerical indices.\n\nhead(chicago[names(chicago)[1:3]])\n\n  city tmpd   dptp\n1 chic 31.5 31.500\n2 chic 33.0 29.875\n3 chic 33.0 27.375\n4 chic 29.0 28.625\n5 chic 32.0 28.875\n6 chic 40.0 35.125\n\n\nBut we can also use the names directly.\n\nchicago %>%\n  select(city:dptp) %>%\n  head(10)\n\n   city tmpd   dptp\n1  chic 31.5 31.500\n2  chic 33.0 29.875\n3  chic 33.0 27.375\n4  chic 29.0 28.625\n5  chic 32.0 28.875\n6  chic 40.0 35.125\n7  chic 34.5 26.750\n8  chic 29.0 22.000\n9  chic 26.5 29.000\n10 chic 32.5 27.750\n\n\nNote the use of : inside the select() — you can use it to specify a range of variable names.\nYou can also omit variables using the select() function by using the negative sign.\nWith select() you can do:\n\nselect(chicago, -(city:dptp)) %>% head(10)\n\n         date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  1987-01-01         NA   34.00000  4.250000  19.98810\n2  1987-01-02         NA         NA  3.304348  23.19099\n3  1987-01-03         NA   34.16667  3.333333  23.81548\n4  1987-01-04         NA   47.00000  4.375000  30.43452\n5  1987-01-05         NA         NA  4.750000  30.33333\n6  1987-01-06         NA   48.00000  5.833333  25.77233\n7  1987-01-07         NA   41.00000  9.291667  20.58171\n8  1987-01-08         NA   36.00000 11.291667  17.03723\n9  1987-01-09         NA   33.28571  4.500000  23.38889\n10 1987-01-10         NA         NA  4.958333  19.54167\n\n\nThis indicates that we should include every variable except the variables city through dptp.\nThe equivalent code in base R would be\n\ni <- match(\"city\", names(chicago))\nj <- match(\"dptp\", names(chicago))\nhead(chicago[, -(i:j)])\n\n        date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 1987-01-01         NA   34.00000 4.250000  19.98810\n2 1987-01-02         NA         NA 3.304348  23.19099\n3 1987-01-03         NA   34.16667 3.333333  23.81548\n4 1987-01-04         NA   47.00000 4.375000  30.43452\n5 1987-01-05         NA         NA 4.750000  30.33333\n6 1987-01-06         NA   48.00000 5.833333  25.77233\n\n\nNot super intuitive, right?\nThe select() function also allows a special syntax that allows you to specify variable names based on patterns.\nSo, for example, if you wanted to keep every variable that ends with a “2”, we could do\n\nchicago %>%\n  select(ends_with(\"2\")) %>%\n  head(10)\n\n   pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1          NA   34.00000  4.250000  19.98810\n2          NA         NA  3.304348  23.19099\n3          NA   34.16667  3.333333  23.81548\n4          NA   47.00000  4.375000  30.43452\n5          NA         NA  4.750000  30.33333\n6          NA   48.00000  5.833333  25.77233\n7          NA   41.00000  9.291667  20.58171\n8          NA   36.00000 11.291667  17.03723\n9          NA   33.28571  4.500000  23.38889\n10         NA         NA  4.958333  19.54167\n\n\nOr if we wanted to keep every variable that starts with a “d”, we could do\n\nchicago %>%\n  select(starts_with(\"d\")) %>%\n  head(10)\n\n     dptp       date\n1  31.500 1987-01-01\n2  29.875 1987-01-02\n3  27.375 1987-01-03\n4  28.625 1987-01-04\n5  28.875 1987-01-05\n6  35.125 1987-01-06\n7  26.750 1987-01-07\n8  22.000 1987-01-08\n9  29.000 1987-01-09\n10 27.750 1987-01-10\n\n\nThis is super useful if you have a table with prefixes, such as doc_.\nYou can also use more general regular expressions if necessary.\nSee ?select for more info.\n\n?select"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#aside-helper-functions",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#aside-helper-functions",
    "title": "NB: The dplyr package",
    "section": "Aside: Helper Functions",
    "text": "Aside: Helper Functions\nNote the use the function ends_with() inside of the argument space for the function select() above.\nends_with() is an example of a “helper function” — a function that helps make dplyr functions more effective.\nThere are many of these introduced by dplyer. Here is a set of helper functions that can be especially useful with select() and related functions to specify variable names based on certain patterns or characteristics:\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nstarts_with()\nMatches variable names that start with a given prefix\nselect(data, starts_with(\"X\"))\n\n\nends_with()\nMatches variable names that end with a given suffix\nselect(data, ends_with(\"_2019\"))\n\n\ncontains()\nMatches variable names that contain a given string\nselect(data, contains(\"income\"))\n\n\nmatches()\nMatches variable names that match a given regular expression\nselect(data, matches(\"^X[1-3]$\"))\n\n\nnum_range()\nMatches variable names that match a pattern of prefix + number\nselect(data, num_range(\"X\", 1:3))\n\n\none_of()\nMatches variable names that are in a given set of names\nselect(data, one_of(c(\"var1\", \"var2\")))\n\n\neverything()\nMatches all variable names (used to reorder variables)\nselect(data, starts_with(\"X\"), everything())"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#filter",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#filter",
    "title": "NB: The dplyr package",
    "section": "filter()",
    "text": "filter()\nThe filter() function extracts subsets of rows from a data frame.\n\n\n\n\n\n\nNote\n\n\n\nselect() is a column-wise operation, filter() is row-wise.\n\n\nThis function is similar to the existing subset() function in R but is quite a bit faster.\nSuppose we wanted to extract the rows of the chicago data frame where the levels of PM2.5 are greater than 30 (which is a reasonably high level), we could do\n\nchicago %>%\n  filter(pm25tmean2 > 30) %>%\n  head(10)\n\n   city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  chic   23 21.9 1998-01-17      38.10   32.46154  3.180556  25.30000\n2  chic   28 25.8 1998-01-23      33.95   38.69231  1.750000  29.37630\n3  chic   55 51.3 1998-04-30      39.40   34.00000 10.786232  25.31310\n4  chic   59 53.7 1998-05-01      35.40   28.50000 14.295125  31.42905\n5  chic   57 52.0 1998-05-02      33.30   35.00000 20.662879  26.79861\n6  chic   57 56.0 1998-05-07      32.10   34.50000 24.270422  33.99167\n7  chic   75 65.8 1998-05-15      56.50   91.00000 38.573007  29.03261\n8  chic   61 59.0 1998-06-09      33.80   26.00000 17.890810  25.49668\n9  chic   73 60.3 1998-07-13      30.30   64.50000 37.018865  37.93056\n10 chic   78 67.1 1998-07-14      41.40   75.00000 40.080902  32.59054\n\n\nYou can see that there are now only 194 rows in the data frame and the distribution of the pm25tmean2 values is.\n\nsummary(chicago$pm25tmean2)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.70    9.70   14.66   16.23   20.60   61.50    4447 \n\n\nWe can place an arbitrarily complex logical sequence inside of filter(), so we could for example extract the rows where PM2.5 is greater than 30 and temperature is greater than 80 degrees Fahrenheit.\n\nchicago %>%\n  filter(pm25tmean2 > 30 & tmpd > 80) %>%\n  select(date, tmpd, pm25tmean2)\n\n         date tmpd pm25tmean2\n1  1998-08-23   81   39.60000\n2  1998-09-06   81   31.50000\n3  2001-07-20   82   32.30000\n4  2001-08-01   84   43.70000\n5  2001-08-08   85   38.83750\n6  2001-08-09   84   38.20000\n7  2002-06-20   82   33.00000\n8  2002-06-23   82   42.50000\n9  2002-07-08   81   33.10000\n10 2002-07-18   82   38.85000\n11 2003-06-25   82   33.90000\n12 2003-07-04   84   32.90000\n13 2005-06-24   86   31.85714\n14 2005-06-27   82   51.53750\n15 2005-06-28   85   31.20000\n16 2005-07-17   84   32.70000\n17 2005-08-03   84   37.90000\n\n\n\n?filter\n\nHelp on topic 'filter' was found in the following packages:\n\n  Package               Library\n  dplyr                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  stats                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n\n\nUsing the first match ...\n\n\nHere’s a table of helper functions specifically associated with filter():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nbetween()\nCheck if a value lies between two other values.\nfilter(data, between(age, 18, 30))\n\n\nnear()\nCheck for near equality (useful for floating-point numbers).\nfilter(data, near(price, 19.99, tolerance = 0.01))\n\n\nisin() (or %in%)\nCheck if a value is in a set of values.\nfilter(data, region %in% c(\"East\", \"West\"))\n\n\nall_of()\nCheck for all of the variables, even if some don’t exist. Useful with character vectors.\nfilter(data, all_of(variables))\n\n\nany_of()\nCheck for any of the variables. Useful with character vectors.\nfilter(data, any_of(variables))\n\n\ncur_group_id()\nIdentify the current group inside group_by(). Useful for more complex filtering with groups.\nfilter(data, cur_group_id() == 1)"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#arrange",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#arrange",
    "title": "NB: The dplyr package",
    "section": "arrange()",
    "text": "arrange()\nUse arrange() to reorder rows of a data frame according to one or more of the columns.\n\nThis normally called sorting, but this word is already used in R.\n\nReordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R.\nThe arrange() function simplifies the process quite a bit.\nHere we order the rows of the data frame by date in ascending order:\n\nchicago_by_date <- chicago %>%\n  arrange(date)\n\nhead(chicago_by_date)\n\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233\n\n\nWe can now check the first few rows\n\nchicago_by_date %>%\n  select(date, pm25tmean2) %>%\n  head(3)\n\n        date pm25tmean2\n1 1987-01-01         NA\n2 1987-01-02         NA\n3 1987-01-03         NA\n\n\nand the last few rows.\n\nchicago_by_date %>%\n  select(date, pm25tmean2) %>%\n  tail(3)\n\n           date pm25tmean2\n6938 2005-12-29    7.45000\n6939 2005-12-30   15.05714\n6940 2005-12-31   15.00000\n\n\nColumns can be arranged in descending order too by using the special desc() operator.\n\nchicago %>%\n  arrange(desc(date)) %>%\n  head()\n\n  city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1 chic   35 30.1 2005-12-31   15.00000       23.5  2.531250  13.25000\n2 chic   36 31.0 2005-12-30   15.05714       19.2  3.034420  22.80556\n3 chic   35 29.4 2005-12-29    7.45000       23.5  6.794837  19.97222\n4 chic   37 34.5 2005-12-28   17.75000       27.5  3.260417  19.28563\n5 chic   40 33.6 2005-12-27   23.56000       27.0  4.468750  23.50000\n6 chic   35 29.6 2005-12-26    8.40000        8.5 14.041667  16.81944\n\n\nHere’s a table of helper functions specifically associated with arrange():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\ndesc()\nOrder by descending instead of default ascending.\narrange(data, desc(salary))\n\n\nacross()\nApply to multiple columns, especially with c_across() in dplyr 1.0.0 and later.\narrange(data, across(starts_with(\"X\")))\n\n\nrow_number()\nCreate an index based on the order of rows.\nmutate(data, idx = row_number())\n\n\n\nNote that while row_number() can be used in conjunction with arrange(), it’s often seen in mutate() for creating an index column based on ordering.\nThe across() function, introduced in dplyr version 1.0.0, provides a more concise syntax for working with multiple columns. It can be especially useful in arrange() when you’re trying to order rows based on a selection of columns that match a certain criterion.\nNote that most of the magic with arrange() happens through the way you structure its arguments and not necessarily through a large set of helper functions."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#rename",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#rename",
    "title": "NB: The dplyr package",
    "section": "rename()",
    "text": "rename()\nRenaming a variable in a data frame in R is surprisingly hard to do!\nThe rename() function is designed to make this process easier.\nHere we the names of the first five variables in the chicago data frame.\n\nhead(chicago[, 1:5], 3)\n\n  city tmpd   dptp       date pm25tmean2\n1 chic 31.5 31.500 1987-01-01         NA\n2 chic 33.0 29.875 1987-01-02         NA\n3 chic 33.0 27.375 1987-01-03         NA\n\n\nThe dptp column is supposed to represent the dew point temperature and the pm25tmean2 column provides the PM2.5 data.\nHowever, these names are awkward and should be renamed to something more sensible.\n\nchicago <- chicago %>%\n  rename(dewpoint = dptp, pm25 = pm25tmean2)\n  \nchicago %>%  \n  head(3)\n\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548\n\n\nThe syntax inside the rename() function is to have the new name on the left-hand side of the = sign and the old name on the right-hand side.\nI leave it as an exercise for the reader to figure how you do this in base R without dplyr.\nHere’s a table of helper functions that can be used with rename():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nstarts_with()\nMatch columns that start with a given prefix.\nrename(data, start_X = starts_with(\"X\")) (Note: This example would rename the first column that starts with “X” to “start_X”)\n\n\nends_with()\nMatch columns that end with a given suffix.\nrename(data, end_year = ends_with(\"_2021\"))\n\n\ncontains()\nMatch columns that contain a given string.\nrename(data, has_rate = contains(\"rate\"))\n\n\nmatches()\nMatch columns that match a given regular expression.\nrename(data, match_num = matches(\"^X[1-3]$\"))\n\n\neverything()\nMatch all columns.\nRarely used with rename(), but possible.\n\n\n\nIt’s worth noting that these helper functions will typically target the first column that meets the specified criterion. If there are multiple columns that match the criterion (e.g., multiple columns that start with “X”), you’ll need to use these helpers with more precision or utilize other techniques.\nAlso, remember to always refer to the official dplyr documentation as the package continues to evolve and new functionalities might be added over time."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#mutate",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#mutate",
    "title": "NB: The dplyr package",
    "section": "mutate()",
    "text": "mutate()\nThe mutate() function creates new columns based on computations usually involving the other columns.\nFor example, with air pollution data, we often want to de-trend the data by subtracting the mean from the data.\nThat way we can look at whether a given day’s air pollution level is higher than or less than average (as opposed to looking at its absolute level).\nHere we create a pm25detrend variable that subtracts the mean from the pm25 variable.\n\nchicago <- chicago %>%\n  mutate(pm25detrend = pm25 - mean(pm25, na.rm = TRUE))\nchicago %>%\n  head()\n\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2 pm25detrend\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810          NA\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099          NA\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548          NA\n4 chic 29.0   28.625 1987-01-04   NA   47.00000 4.375000  30.43452          NA\n5 chic 32.0   28.875 1987-01-05   NA         NA 4.750000  30.33333          NA\n6 chic 40.0   35.125 1987-01-06   NA   48.00000 5.833333  25.77233          NA\n\n\nThere is also the related transmute() function, which does the same thing as mutate() but then drops all non-transformed variables.\nHere we detrend the PM10 and ozone (O3) variables.\n\nchicago %>%\n  transmute(pm10detrend = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE), \n            o3detrend = o3tmean2 - mean(o3tmean2, na.rm = TRUE))\n\n      pm10detrend     o3detrend\n1      0.10479387 -1.518551e+01\n2              NA -1.613117e+01\n3      0.27146054 -1.610218e+01\n4     13.10479387 -1.506051e+01\n5              NA -1.468551e+01\n6     14.10479387 -1.360218e+01\n7      7.10479387 -1.014385e+01\n8      2.10479387 -8.143846e+00\n9     -0.60949184 -1.493551e+01\n10             NA -1.447718e+01\n11   -11.89520613 -1.893846e+00\n12    -7.89520613 -1.143551e+01\n13    19.10479387 -1.447718e+01\n14     9.10479387 -1.522718e+01\n15    -5.06187279 -1.497718e+01\n16   -14.89520613 -1.151885e+01\n17             NA -1.360218e+01\n18     5.10479387 -1.306051e+01\n19    -1.89520613 -4.560513e+00\n20     4.10479387 -1.218551e+01\n21    -1.03806327 -1.052247e+01\n22    18.10479387 -8.935513e+00\n23    21.10479387 -4.810513e+00\n24     4.10479387 -9.352180e+00\n25             NA -1.276885e+01\n26    37.10479387 -1.485218e+01\n27     5.43812721 -1.343551e+01\n28    13.10479387 -1.256051e+01\n29     1.10479387 -1.651885e+01\n30    25.10479387 -1.064385e+01\n31     2.10479387 -9.060513e+00\n32             NA -1.139385e+01\n33     7.27146054 -1.339385e+01\n34    25.10479387 -1.139385e+01\n35     3.10479387 -8.935513e+00\n36    36.10479387 -1.370635e+01\n37    29.10479387 -1.302066e+01\n38    10.10479387 -1.368551e+01\n39   -15.64520613  5.501987e+00\n40     8.10479387 -1.022718e+01\n41     2.10479387 -1.112301e+01\n42    49.10479387 -1.131397e+01\n43    50.10479387 -1.174801e+01\n44     5.10479387 -9.065948e+00\n45    -9.03806327 -8.268846e+00\n46   -21.89520613  8.668654e+00\n47   -19.89520613  4.751987e+00\n48   -10.89520613  5.501987e+00\n49    -6.89520613  4.734777e+00\n50    15.10479387 -3.933701e+00\n51    35.96193673 -1.093551e+01\n52    25.10479387 -1.485218e+01\n53    12.10479387 -8.602180e+00\n54    13.10479387 -6.393846e+00\n55    14.10479387 -6.206346e+00\n56    14.10479387 -2.310513e+00\n57    -4.89520613 -3.435513e+00\n58    22.10479387 -5.227180e+00\n59    -2.89520613 -1.256051e+01\n60   -18.89520613 -3.814680e+00\n61     2.10479387  1.376987e+00\n62    -1.89520613  3.144870e-01\n63     5.53336530 -1.393551e+01\n64    -3.89520613 -5.852180e+00\n65    42.10479387 -1.035943e+01\n66    15.10479387  5.981154e+00\n67    27.10479387  1.173115e+01\n68    -8.89520613  1.039782e+01\n69   -14.32377755  8.939487e+00\n70     4.10479387  3.353204e-01\n71    38.10479387  1.001987e+00\n72    13.10479387  3.043654e+00\n73    15.10479387 -1.706346e+00\n74             NA  1.746032e+01\n75    -6.89520613  1.693677e+01\n76    21.10479387  8.376987e+00\n77    29.10479387 -7.688463e-01\n78    -1.89520613  1.224008e+01\n79    -5.89520613  1.718949e+01\n80     6.10479387  1.877282e+01\n81     3.96193673  1.823115e+01\n82    36.10479387  1.201865e+01\n83    24.10479387  6.189487e+00\n84   -19.89520613 -4.560513e+00\n85     9.10479387 -4.318089e+00\n86    13.10479387 -2.998013e+00\n87     0.60479387  6.686537e-01\n88     3.10479387  1.536709e+00\n89    -6.89520613  1.100199e+01\n90     9.10479387  4.609359e+00\n91     2.10479387  2.017612e+00\n92    10.10479387  3.130837e+00\n93   -11.46663470 -2.565721e+00\n94    -7.89520613  8.955112e+00\n95   -15.89520613  1.659574e+01\n96   -14.89520613  1.236657e+01\n97    -5.89520613  6.059279e+00\n98   -14.89520613  1.574904e+00\n99    44.39050816 -4.034471e+00\n100   35.10479387  2.423862e+00\n101   -9.89520613  9.538445e+00\n102    3.10479387  6.243058e+00\n103   13.10479387 -1.667656e+00\n104   -0.89520613 -6.191465e+00\n105   -3.89520613 -2.292656e+00\n106   -5.89520613  2.671630e+00\n107    9.10479387 -1.259892e-01\n108   72.10479387  1.209425e+01\n109            NA  1.340377e+01\n110   21.10479387  2.195511e+01\n111    2.30479387  1.033237e+00\n112   -5.89520613 -1.035739e+01\n113   -7.89520613 -9.340857e+00\n114  -17.89520613  8.137404e+00\n115   -3.89520613  8.626987e+00\n116   24.10479387  1.371032e+01\n117    3.43812721  1.649209e+01\n118   38.10479387  3.210320e+00\n119   27.10479387  1.541676e+01\n120  -14.89520613  1.605407e+01\n121   32.10479387  1.260812e-01\n122   -3.89520613  4.749011e+00\n123  -13.60949184  7.766868e+00\n124   -7.89520613  1.178885e+01\n125   26.10479387  4.001987e+00\n126            NA  1.293506e+01\n127    7.10479387  1.075380e+01\n128   20.10479387 -2.630688e+00\n129   22.27146054  2.336136e+01\n130            NA  2.357699e+01\n131   47.10479387  2.555076e+01\n132  -21.89520613  5.903029e+00\n133  -13.89520613  7.123590e+00\n134            NA  1.941345e+01\n135  -12.32377755  4.585320e+00\n136   13.10479387  1.224002e+01\n137   29.10479387  3.101263e+01\n138            NA  5.398160e+00\n139    8.10479387  6.636660e+00\n140   13.10479387 -4.160785e+00\n141   12.27146054  1.381630e+01\n142            NA -7.114861e+00\n143  -20.89520613 -8.857388e+00\n144            NA -4.511380e-01\n145   16.10479387 -6.426584e+00\n146   -5.89520613  1.043570e+01\n147    6.70479387  1.111136e+01\n148   15.10479387  9.476715e+00\n149   16.10479387  6.694695e+00\n150    1.10479387  2.423862e+00\n151   -1.89520613  1.200794e+01\n152   -3.89520613  1.475199e+01\n153   -0.22853946 -1.096971e+00\n154    8.10479387  3.877848e+00\n155   11.10479387  9.917145e-01\n156   27.10479387  1.375720e+01\n157   23.10479387  2.430928e+01\n158   12.10479387  3.135615e+01\n159   17.60479387  2.977667e+01\n160  -18.89520613  1.017567e+01\n161   16.10479387  9.297503e+00\n162   12.10479387  8.310604e+00\n163    7.10479387  9.855256e+00\n164   39.10479387  2.021553e+01\n165    9.77146054  2.598636e+01\n166   -5.89520613  1.431856e+01\n167   12.10479387  1.376588e+01\n168   37.10479387  3.552638e+01\n169   56.10479387  4.353414e+01\n170   46.10479387  2.783340e+01\n171   25.93812721  2.626240e+01\n172    8.10479387  1.334276e+01\n173   18.10479387  5.618422e+00\n174   15.10479387  1.278294e+01\n175   29.10479387  2.964470e+01\n176   19.10479387  1.444315e+01\n177   -2.09520613  1.033237e+00\n178    2.10479387  2.184279e+00\n179    0.10479387  1.252826e+01\n180    9.10479387  8.345737e+00\n181    9.10479387 -9.667630e-01\n182  -11.89520613  1.286136e+01\n183   11.60479387  1.683153e+01\n184   14.10479387  2.348115e+01\n185   -9.89520613  1.246032e+01\n186            NA  3.194695e+00\n187   -0.89520613  1.167633e+01\n188            NA  1.490710e+01\n189    4.10479387  1.141616e+01\n190   -2.89520613  5.512404e+00\n191   -0.89520613  3.944695e+00\n192   45.10479387  9.689487e+00\n193   13.10479387  1.020511e+01\n194   -0.89520613 -9.744293e+00\n195  -12.49520613  2.428326e+00\n196  -16.89520613  3.746779e+00\n197   -5.89520613  1.208532e+01\n198    5.10479387  2.343725e+01\n199   17.10479387  2.835615e+01\n200   38.10479387  2.761657e+01\n201   31.53336530  2.106345e+01\n202   24.10479387  3.873240e+01\n203   64.10479387  2.584723e+01\n204   83.10479387  3.972074e+01\n205   45.10479387  1.625470e+01\n206   19.10479387  2.437996e+01\n207   -4.39520613  8.338297e+00\n208   -1.89520613 -3.661703e+00\n209    3.10479387  8.323442e-01\n210   -8.89520613  5.593499e+00\n211   41.10479387  3.093353e+01\n212   14.10479387  1.898167e+01\n213   23.67622245  2.079663e+01\n214   12.10479387  2.721925e+01\n215   20.10479387  1.153905e+01\n216  -12.89520613  1.113766e+00\n217  -18.89520613  8.561537e-01\n218   16.10479387  1.014113e+01\n219   17.39050816  2.588740e+01\n220   22.10479387  3.595737e+00\n221   -4.89520613  7.319695e+00\n222   -9.89520613  9.975201e+00\n223    7.10479387  1.440824e+01\n224   46.10479387  1.765303e+01\n225   29.50479387  1.676240e+01\n226   15.60479387  4.797330e+00\n227    7.10479387  1.393949e+01\n228   10.60479387  1.283745e+01\n229    5.10479387  7.240826e+00\n230   14.10479387 -5.376733e+00\n231   -2.22853946 -1.046624e+00\n232   15.10479387  1.108324e+01\n233    9.10479387  1.850720e+01\n234   -1.89520613  4.429070e+00\n235   -9.89520613 -1.707705e+00\n236    9.10479387 -6.840529e+00\n237    2.10479387 -1.276989e+01\n238   16.10479387 -1.122799e+01\n239  -13.89520613 -5.716763e+00\n240   -1.89520613  2.507195e+00\n241            NA -1.279263e+00\n242    1.10479387  3.187223e+00\n243   -8.89520613 -3.513638e+00\n244    4.60479387 -1.503221e+00\n245  -16.89520613  1.725945e+00\n246   -9.89520613  8.665704e-01\n247            NA  1.190303e+01\n248            NA  2.662178e+01\n249   26.77146054  1.876240e+01\n250            NA  3.351398e+00\n251            NA  5.965529e+00\n252            NA -6.021796e-01\n253            NA  7.069695e+00\n254            NA  3.004704e+00\n255   -0.39520613 -3.623013e+00\n256            NA -7.076138e+00\n257            NA -5.396796e-01\n258            NA -4.000730e+00\n259   -0.89520613 -9.230803e+00\n260   -3.89520613 -5.911703e+00\n261   -8.64520613 -1.254266e+01\n262            NA -6.792656e+00\n263            NA -1.203075e+01\n264   -4.89520613 -1.448313e+01\n265            NA -1.217154e+01\n266    4.10479387 -6.298608e+00\n267  -10.89520613 -3.304561e+00\n268   21.10479387 -5.417656e+00\n269    8.10479387  3.058535e+00\n270   15.10479387  8.112106e+00\n271   23.10479387  1.058234e+01\n272    0.10479387 -6.703370e+00\n273   -7.09520613 -8.525791e+00\n274   10.10479387 -2.131942e+00\n275   18.10479387 -4.407304e+00\n276   18.10479387 -4.042656e+00\n277   16.10479387 -2.867035e-01\n278   14.10479387 -4.622418e+00\n279   -9.72853946 -1.246257e+01\n280    2.10479387 -6.120037e+00\n281    7.10479387 -8.917397e+00\n282    4.10479387 -7.871848e+00\n283   -5.89520613 -1.069742e+01\n284   -1.89520613 -4.802180e+00\n285    7.60479387 -7.020830e+00\n286            NA -4.319904e+00\n287    7.10479387 -8.636920e+00\n288   18.10479387  5.012080e+00\n289   24.10479387  9.129963e+00\n290  -14.89520613 -1.021527e+01\n291   -7.03806327 -3.465275e+00\n292  -22.89520613 -5.664654e-01\n293   -9.89520613 -4.154414e+00\n294  -13.39520613 -1.296756e+01\n295   -8.89520613 -1.268227e+01\n296   16.10479387 -1.112063e+01\n297   -5.49520613 -1.189980e+01\n298            NA -8.310513e+00\n299   -0.89520613 -1.436408e+01\n300   -2.89520613 -9.259788e+00\n301   -2.89520613 -1.436418e+01\n302   14.10479387 -1.217857e+01\n303   16.77146054 -2.500989e+00\n304   26.10479387 -6.864084e+00\n305   -3.89520613 -9.690948e+00\n306   12.10479387 -7.884647e+00\n307            NA  1.002282e+01\n308   13.10479387 -2.688463e-01\n309   -8.39520613  7.311537e-01\n310    9.10479387 -9.935513e+00\n311   12.10479387 -1.668551e+01\n312   32.10479387  3.856154e+00\n313  -15.89520613  6.231154e+00\n314  -21.89520613  8.314487e+00\n315   -2.60949184 -1.147718e+01\n316   13.10479387 -1.243551e+01\n317   21.10479387 -1.656051e+01\n318  -15.89520613 -9.560513e+00\n319   17.10479387 -1.855130e-01\n320    0.10479387 -1.768846e+00\n321  -15.56187279 -6.727180e+00\n322            NA -9.087687e+00\n323   -4.89520613 -8.602180e+00\n324    0.10479387  5.606154e+00\n325   -6.89520613 -8.143846e+00\n326            NA -8.102180e+00\n327   -3.56187279 -1.066279e+01\n328   18.10479387 -1.060218e+01\n329  -23.89520613 -6.310513e+00\n330  -18.89520613  4.147820e+00\n331            NA -8.435513e+00\n332            NA -1.497718e+01\n333  -21.75234898 -1.731051e+01\n334            NA -1.526885e+01\n335   -5.89520613 -5.957252e+00\n336  -10.89520613 -1.018551e+01\n337   -3.89520613 -1.281051e+01\n338    1.10479387 -6.893846e+00\n339   -9.22853946 -5.560513e+00\n340  -11.89520613 -4.143846e+00\n341   -8.89520613 -1.301885e+01\n342   -5.89520613 -1.647718e+01\n343  -12.89520613 -1.039385e+01\n344   -1.89520613 -1.218551e+01\n345  -10.89520613 -1.685218e+01\n346   -4.89520613 -8.393846e+00\n347    0.10479387 -6.268846e+00\n348    9.10479387 -6.435513e+00\n349  -14.89520613 -1.038288e+01\n350    2.10479387 -7.352180e+00\n351   -6.69520613 -1.134856e+01\n352    2.10479387 -1.656504e+01\n353  -12.39520613 -1.703968e+01\n354   -8.89520613 -9.623013e+00\n355            NA -1.256051e+01\n356            NA -1.669638e+01\n357    2.10479387 -1.593551e+01\n358            NA -1.703968e+01\n359  -17.89520613 -4.289680e+00\n360            NA -8.105130e-01\n361   11.10479387 -9.393846e+00\n362            NA -1.206346e+00\n363  -13.22853946 -1.884631e-02\n364            NA -1.508968e+01\n365  -12.89520613 -3.352180e+00\n366            NA  5.228204e-01\n367            NA -1.162301e+01\n368   -8.89520613 -1.078968e+01\n369   -7.89520613 -1.224203e+00\n370   -9.89520613 -6.268846e+00\n371   41.10479387 -1.228968e+01\n372   40.10479387 -1.691468e+01\n373   53.10479387 -1.477609e+01\n374   14.10479387 -1.203968e+01\n375    2.43812721 -1.251885e+01\n376    5.10479387 -1.295635e+01\n377    9.10479387 -2.498013e+00\n378   17.10479387 -5.581346e+00\n379   12.10479387 -1.597718e+01\n380   -5.89520613 -1.520635e+01\n381   -1.89520613 -5.289680e+00\n382   -7.89520613 -1.308135e+01\n383            NA -1.071841e+01\n384    5.10479387 -6.310513e+00\n385  -10.39520613 -1.292857e+01\n386  -13.89520613 -3.206346e+00\n387   -6.72853946 -1.281051e+01\n388  -10.89520613 -1.243551e+01\n389   -7.89520613 -1.193551e+01\n390    0.10479387 -1.272718e+01\n391   11.10479387 -1.256051e+01\n392   17.10479387 -1.213117e+01\n393   12.10479387 -1.010218e+01\n394    3.10479387 -5.977180e+00\n395  -10.89520613  7.106154e+00\n396    8.10479387 -3.105130e-01\n397  -20.89520613  4.689487e+00\n398  -10.89520613  9.647820e+00\n399    2.10479387 -6.143846e+00\n400   18.10479387 -5.810513e+00\n401    3.10479387 -1.227180e+00\n402    5.10479387  3.978204e-01\n403   -1.89520613  9.394870e-01\n404    9.10479387 -7.018846e+00\n405    4.90479387 -6.768846e+00\n406    2.10479387  5.439487e+00\n407   -5.89520613  8.606154e+00\n408   10.10479387  9.394870e-01\n409    8.10479387 -6.352180e+00\n410            NA -9.602180e+00\n411   -4.89520613  1.231154e+00\n412    0.10479387 -1.301885e+01\n413   26.10479387 -9.477180e+00\n414   28.10479387 -1.018551e+01\n415   43.10479387 -1.076885e+01\n416    3.10479387  4.856154e+00\n417  -10.56187279 -1.602180e+00\n418  -10.89520613 -2.081346e+00\n419   10.10479387  3.564487e+00\n420   31.10479387  2.814487e+00\n421            NA -4.435513e+00\n422   20.10479387 -4.352180e+00\n423   -8.22853946  1.793949e+01\n424   20.10479387 -1.438463e-01\n425   -4.89520613 -2.435513e+00\n426   -3.89520613  6.272820e+00\n427   -0.89520613  8.772820e+00\n428  -16.89520613  1.793949e+01\n429   -9.69520613  1.485615e+01\n430    6.10479387 -7.602180e+00\n431            NA -1.060513e+00\n432   24.10479387 -8.143846e+00\n433            NA -3.478991e+00\n434            NA -8.938463e-01\n435   10.10479387  2.606154e+00\n436    2.10479387 -8.852180e+00\n437  -10.89520613  3.106154e+00\n438            NA  7.689487e+00\n439   -6.89520613  6.689487e+00\n440    3.10479387  2.272820e+00\n441   -6.06187279  5.228204e-01\n442            NA -7.581346e+00\n443   13.10479387 -2.123013e+00\n444   -3.89520613  2.647820e+00\n445  -25.89520613  1.591865e+01\n446   -9.89520613  1.712699e+01\n447   25.77146054 -6.299574e-01\n448   50.10479387  1.095338e+01\n449   18.10479387  4.854170e+00\n450   -8.89520613  2.566902e+00\n451   25.10479387  9.614168e-01\n452   21.10479387  3.203376e+00\n453   -2.89520613 -9.816465e+00\n454   -4.89520613 -5.870037e+00\n455   -0.89520613 -7.986082e-01\n456    9.10479387 -2.417656e+00\n457   -3.89520613  1.839057e+01\n458    6.10479387 -1.002480e+01\n459  -13.72853946  3.231154e+00\n460            NA  8.030843e+00\n461    8.10479387  1.123115e+01\n462  -15.89520613  1.183234e+01\n463   -1.89520613  4.001858e+00\n464   -1.89520613 -5.605130e-01\n465   19.85479387  5.109156e-01\n466    1.10479387 -1.971227e+00\n467   -2.89520613  9.437786e+00\n468    4.10479387  8.254963e+00\n469            NA  9.147820e+00\n470   -8.89520613  6.620609e+00\n471   -6.89520613  4.676826e+00\n472    9.10479387  2.338297e+00\n473   42.10479387  1.956449e+01\n474    7.10479387  1.066568e+01\n475   18.10479387  2.338297e+00\n476   18.10479387  1.558535e+00\n477    1.70479387 -9.414654e-01\n478   17.10479387  6.124011e+00\n479   10.10479387  1.879963e+00\n480    0.10479387  5.451392e+00\n481   10.10479387  2.100201e+00\n482  -14.89520613  2.947639e+00\n483  -17.09520613  5.523597e+00\n484   -0.89520613  6.880222e+00\n485   14.10479387  2.910575e+00\n486   -0.89520613  3.522820e+00\n487   -0.89520613  1.283830e+01\n488   16.10479387  1.588592e+01\n489   12.10479387  1.585615e+01\n490   14.10479387  1.400319e+01\n491   19.10479387  8.673485e+00\n492   26.10479387  7.033690e+00\n493   49.10479387  1.462699e+01\n494  331.10479387  2.937004e+01\n495   -5.89520613  6.265876e+00\n496    2.10479387 -2.938463e-01\n497   25.10479387  5.114487e+00\n498   21.10479387  1.432838e+01\n499   -3.89520613  1.060020e+01\n500   26.10479387  9.018058e+00\n501   27.70479387  1.645734e+01\n502            NA  4.439487e+00\n503   -4.89520613  7.434570e+00\n504    1.10479387  8.237106e+00\n505    9.10479387  1.108830e+01\n506   29.10479387  1.002696e+01\n507   14.35479387  2.203473e+01\n508            NA  2.195338e+01\n509    9.10479387  5.525823e-01\n510   -7.89520613  1.285933e+01\n511   -8.89520613  4.641868e+00\n512   18.10479387  8.433535e+00\n513   29.85479387  2.213592e+01\n514            NA  2.232044e+01\n515            NA  2.715377e+01\n516   41.10479387  3.331449e+01\n517  114.10479387  3.146925e+01\n518  108.10479387  2.976617e+01\n519   12.70479387  1.170649e+01\n520   -5.89520613  7.340885e+00\n521   20.10479387  4.985405e+00\n522   34.10479387  2.508830e+01\n523            NA  3.100108e+01\n524  105.10479387  3.474306e+01\n525   36.90479387  1.158234e+01\n526            NA  1.224798e+01\n527   -3.89520613  6.683535e+00\n528   16.10479387  1.471330e+01\n529   16.10479387  2.824678e+01\n530   41.10479387  2.992108e+01\n531   54.35479387  3.467282e+01\n532   44.10479387  2.800720e+01\n533    5.10479387  9.266868e+00\n534   12.10479387  1.289261e+01\n535   21.10479387  2.179589e+01\n536            NA  3.968949e+01\n537   54.10479387  4.224157e+01\n538   47.10479387  3.344039e+01\n539   50.10479387  3.520566e+01\n540   -7.89520613  9.409725e+00\n541            NA  1.659053e+01\n542            NA  3.963220e+01\n543  -13.29520613  5.981154e+00\n544  -12.89520613 -1.006198e+00\n545            NA  1.658348e+01\n546  -16.89520613  7.546630e+00\n547  -22.89520613  4.184279e+00\n548  -14.89520613  3.330112e+00\n549   -7.29520613  3.095737e+00\n550            NA  1.894470e+01\n551   17.10479387  2.764035e+01\n552            NA  3.831290e+01\n553   82.10479387  3.565061e+01\n554   82.10479387  3.945091e+01\n555   72.90479387  2.945511e+01\n556   51.10479387  2.959053e+01\n557            NA  2.198711e+01\n558    8.10479387  1.543745e+01\n559  -19.89520613  8.106154e+00\n560   16.10479387  1.317386e+01\n561   28.10479387  2.649021e+01\n562   44.10479387  2.252650e+01\n563   19.10479387  1.829365e+01\n564  -11.89520613  1.104886e+01\n565            NA  3.757195e+00\n566    1.10479387  6.585320e+00\n567   -0.39520613  7.728436e+00\n568   -1.89520613  5.621779e+00\n569  -18.89520613  7.241570e+00\n570   -5.89520613  8.137404e+00\n571   20.10479387  1.649678e+01\n572    5.10479387  1.952424e+01\n573  -11.89520613  3.574904e+00\n574   25.10479387  1.289986e+01\n575   34.10479387  2.966345e+01\n576   39.10479387  4.010615e+01\n577    6.10479387  2.877282e+01\n578            NA  2.292907e+01\n579   33.30479387  2.471440e+01\n580   33.10479387  3.041397e+01\n581   31.10479387  2.120624e+01\n582   32.10479387  2.274904e+01\n583   30.10479387  1.706970e+01\n584            NA  1.712699e+01\n585    4.43812721  2.244790e+01\n586   33.10479387  3.453150e+01\n587   34.10479387  1.148115e+01\n588    2.10479387  1.104365e+01\n589            NA  9.032019e+00\n590   32.10479387  7.173862e+00\n591   36.30479387  1.648636e+01\n592            NA  2.091345e+01\n593   -1.89520613  1.916247e+01\n594   35.10479387  1.495511e+01\n595   37.10479387  1.987688e+01\n596   29.10479387  1.526172e+01\n597   -5.14520613 -4.508430e+00\n598   -2.89520613  1.767907e+01\n599            NA  7.793654e+00\n600    5.10479387  5.257195e+00\n601   13.10479387  1.327282e+01\n602   55.10479387  2.361362e+00\n603   16.50479387  1.949904e+00\n604    7.10479387 -2.925096e+00\n605            NA -8.268846e+00\n606   55.10479387  2.564487e+00\n607   -4.89520613  4.321954e-01\n608    3.10479387  7.415704e-01\n609   13.50479387  1.145511e+01\n610   14.10479387  1.742386e+01\n611   31.10479387  1.489941e+01\n612    4.10479387  1.322074e+01\n613   -5.89520613  1.433234e+01\n614            NA  4.766868e+00\n615   -3.14520613 -3.524055e+00\n616   -0.89520613  8.017612e+00\n617   20.10479387  1.623636e+01\n618   32.10479387 -2.029263e+00\n619   43.10479387 -1.698880e-01\n620            NA  1.078845e+01\n621   -0.56187279 -7.584296e-01\n622   24.10479387 -4.209471e+00\n623   24.10479387  4.348917e+00\n624    4.10479387  1.471410e-01\n625   21.10479387 -4.050096e+00\n626            NA  5.804070e+00\n627    9.50479387  3.249037e-01\n628   -7.89520613 -2.352180e+00\n629    0.10479387 -5.563985e+00\n630            NA -1.011111e+01\n631            NA -1.952620e+00\n632            NA -2.600148e-01\n633   15.10479387 -3.961555e+00\n634            NA  4.349998e+00\n635            NA  1.546330e+01\n636            NA  7.572424e+00\n637            NA -1.914680e+00\n638            NA -1.940721e+00\n639   17.10479387 -6.706346e+00\n640  -21.89520613 -8.879957e+00\n641  -11.89520613  2.155287e-01\n642            NA -1.007277e+01\n643   -0.89520613 -7.715275e+00\n644   -3.89520613 -8.833029e+00\n645   -0.56187279 -9.792656e+00\n646            NA -7.572418e+00\n647   22.10479387 -6.816465e+00\n648            NA -7.495037e+00\n649    5.10479387  1.314487e+00\n650   14.10479387 -5.941465e+00\n651   -5.29520613 -4.919888e+00\n652            NA -7.907983e+00\n653   25.10479387 -1.206346e+00\n654   17.10479387  1.560020e+01\n655    9.10479387  6.624011e+00\n656            NA -1.451885e+01\n657  -10.29520613 -8.237732e+00\n658   -5.89520613 -7.864923e+00\n659   -9.89520613 -1.281051e+01\n660   -2.89520613 -1.250843e+01\n661   -1.89520613 -9.169888e+00\n662   -3.89520613 -9.185513e+00\n663   -6.49520613 -1.231523e+01\n664    0.10479387 -1.083655e+01\n665    0.10479387 -1.238343e+01\n666            NA -9.591763e+00\n667    5.10479387 -5.914680e+00\n668   -5.89520613 -6.310513e+00\n669   -7.89520613 -8.893846e+00\n670    2.10479387 -9.915424e+00\n671    1.10479387 -6.878221e+00\n672   -5.89520613 -7.228653e+00\n673    0.10479387 -1.606051e+01\n674   -5.89520613 -1.678845e+01\n675  -18.29520613 -1.664385e+01\n676            NA -5.810513e+00\n677  -21.89520613 -1.356595e+01\n678    6.10479387 -1.489385e+01\n679   -8.89520613 -1.706051e+01\n680  -18.89520613 -1.239385e+01\n681  -10.69520613 -1.047718e+01\n682  -18.89520613 -1.489385e+01\n683  -21.89520613 -8.852180e+00\n684            NA -1.435218e+01\n685            NA -1.651885e+01\n686  -10.89520613 -7.810513e+00\n687   -9.69520613 -9.143846e+00\n688  -24.89520613 -1.672718e+01\n689  -19.89520613 -1.706051e+01\n690  -12.89520613 -1.318551e+01\n691  -12.89520613 -1.401885e+01\n692   -2.89520613 -1.468551e+01\n693    5.10479387 -1.601885e+01\n694  -11.89520613 -1.164385e+01\n695   -5.89520613 -6.393846e+00\n696  -20.89520613 -7.518846e+00\n697  -24.89520613 -4.477180e+00\n698  -27.89520613 -1.160218e+01\n699   -7.69520613 -1.231051e+01\n700  -11.89520613 -1.481051e+01\n701   -6.89520613 -1.122718e+01\n702   -4.89520613 -1.485218e+01\n703            NA -1.014385e+01\n704  -10.89520613 -1.051885e+01\n705    5.10479387 -1.556051e+01\n706    6.10479387 -1.443551e+01\n707   -3.89520613 -1.278968e+01\n708    6.10479387 -9.768846e+00\n709    3.10479387 -1.301885e+01\n710            NA -1.051885e+01\n711   -3.89520613 -1.235218e+01\n712   -4.89520613 -1.318551e+01\n713   14.10479387 -1.410218e+01\n714            NA -1.351885e+01\n715            NA -5.085513e+00\n716    1.10479387 -1.289385e+01\n717   -8.49520613 -1.189385e+01\n718    5.10479387 -1.456051e+01\n719            NA -8.643846e+00\n720            NA -6.826817e+00\n721            NA -8.935513e+00\n722            NA -1.514385e+01\n723  -10.89520613 -7.870296e+00\n724            NA -1.489385e+01\n725            NA -9.352180e+00\n726            NA -1.043551e+01\n727   -6.89520613 -1.493551e+01\n728  -16.89520613 -6.310513e+00\n729   -4.22853946 -1.248814e+01\n730            NA -1.376885e+01\n731   27.10479387 -1.668551e+01\n732   32.10479387 -1.004421e+01\n733   -5.89520613 -8.102180e+00\n734            NA -1.156051e+01\n735    9.50479387 -1.431051e+01\n736  -13.89520613 -1.631051e+01\n737   -6.89520613 -1.743551e+01\n738            NA -1.656051e+01\n739            NA -1.477180e+00\n740   18.10479387 -5.968846e+00\n741    3.53336530 -1.456885e+01\n742   -2.89520613 -1.093551e+01\n743            NA -1.043551e+01\n744            NA -1.300694e+01\n745  -13.89520613 -1.585218e+01\n746            NA -1.176885e+01\n747   -6.75234898 -1.318551e+01\n748   -9.89520613 -1.247718e+01\n749            NA -9.739861e+00\n750            NA -8.227180e+00\n751            NA -3.810513e+00\n752   -6.89520613 -1.106051e+01\n753  -11.02020613 -1.068551e+01\n754  -16.89520613 -1.451885e+01\n755   11.10479387 -1.320824e+01\n756    2.10479387 -1.401885e+01\n757    3.10479387 -1.118551e+01\n758   -8.89520613 -1.193551e+01\n759   -6.77020613 -1.285218e+01\n760            NA -1.593551e+01\n761            NA -1.164385e+01\n762            NA -9.602180e+00\n763  -21.89520613 -4.355130e-01\n764   15.10479387 -3.393846e+00\n765  -13.32377755 -8.046624e+00\n766   11.10479387 -1.284728e+01\n767            NA -1.335218e+01\n768   -1.89520613 -7.435513e+00\n769   22.10479387 -4.685513e+00\n770   52.10479387 -2.435513e+00\n771    0.96193673 -3.162786e+00\n772    2.10479387 -5.060513e+00\n773   -0.89520613 -4.018846e+00\n774   -7.89520613 -4.393846e+00\n775            NA -1.156051e+01\n776   18.10479387 -1.438463e-01\n777   -3.77020613 -1.081051e+01\n778   -8.89520613 -7.959323e+00\n779  -20.89520613 -4.810513e+00\n780  -10.89520613 -2.518846e+00\n781            NA -7.143846e+00\n782            NA -2.477180e+00\n783    9.85479387  5.228204e-01\n784   22.10479387  1.939487e+00\n785    3.10479387 -6.102180e+00\n786   27.10479387 -6.727180e+00\n787            NA -4.185513e+00\n788            NA  9.314487e+00\n789   -0.18092041 -4.364084e+00\n790   23.10479387 -1.393846e+00\n791            NA  6.233105e-01\n792   -1.89520613 -2.768846e+00\n793            NA -8.102180e+00\n794   -3.89520613 -1.222718e+01\n795  -20.27020613  6.939487e+00\n796  -13.89520613  1.393949e+01\n797    7.10479387  9.856154e+00\n798   34.10479387 -9.560513e+00\n799   43.10479387 -1.089385e+01\n800            NA -6.018846e+00\n801   39.43812721 -1.743551e+01\n802   -3.89520613  1.683721e+01\n803    9.10479387 -5.799149e+00\n804            NA -1.135218e+01\n805            NA -9.771796e-01\n806    2.10479387 -7.102180e+00\n807  -14.39520613  7.522820e+00\n808  -10.89520613  7.397820e+00\n809            NA -2.768846e+00\n810   -2.89520613  2.791760e+00\n811  -11.89520613  4.981154e+00\n812   -6.89520613 -7.393846e+00\n813   24.53336530 -6.893846e+00\n814    6.10479387 -8.060513e+00\n815    7.10479387  3.981154e+00\n816            NA  1.593949e+01\n817  -11.89520613 -1.856346e+00\n818   -5.89520613 -6.574402e+00\n819  -18.89520613  7.605677e+00\n820    0.10479387 -1.943846e+00\n821   -1.89520613  6.408237e+00\n822  -10.89520613  3.689487e+00\n823            NA  2.689487e+00\n824            NA -6.227180e+00\n825   -1.27020613 -6.094260e-01\n826   -0.89520613 -7.837012e-02\n827   16.10479387  1.736263e-01\n828    8.10479387  2.760916e+00\n829    1.10479387  4.701392e+00\n830            NA  8.262404e+00\n831   -4.52020613 -2.899281e+00\n832   10.10479387  3.850201e+00\n833   -2.89520613  7.593990e+00\n834   15.10479387  2.362616e+00\n835    5.10479387  6.891868e+00\n836   20.10479387  6.088297e+00\n837   12.22979387  7.397820e+00\n838  -10.89520613  1.148685e+01\n839   15.10479387 -2.489084e+00\n840   22.10479387 -6.021796e-01\n841   35.10479387  7.579803e+00\n842   15.10479387  1.205853e+01\n843   10.47979387  1.111657e+01\n844   27.10479387  1.403845e+01\n845   40.10479387  1.283617e+01\n846            NA  1.693405e+01\n847            NA  2.618115e+01\n848   35.10479387  1.521330e+01\n849    5.81907959 -1.358132e+00\n850            NA  1.894870e-01\n851            NA  1.515377e+01\n852   -9.89520613  1.264782e+01\n853   -7.89520613  6.816652e+00\n854            NA  5.337473e+00\n855   12.35479387  5.752893e+00\n856            NA  1.150496e+01\n857   -0.89520613  8.978204e-01\n858            NA -1.195930e+00\n859            NA  5.885916e+00\n860  -13.89520613  1.446386e+01\n861   -6.89520613  1.627877e+01\n862            NA  1.427877e+01\n863            NA  9.129963e+00\n864  -16.89520613  1.097123e+01\n865   31.10479387  1.312996e+01\n866            NA  8.247482e+00\n867   45.97979387  1.619689e+01\n868   64.10479387  2.768370e+01\n869   65.10479387  1.773342e+01\n870    1.10479387  1.060095e+01\n871            NA  7.215529e+00\n872   13.10479387  1.415824e+01\n873   31.35479387  1.007604e+01\n874   34.10479387  1.837699e+01\n875            NA  2.415745e+01\n876   -0.89520613  6.867991e+00\n877            NA  5.901766e+00\n878    0.10479387  6.757195e+00\n879   -0.89520613  1.180076e+01\n880            NA  1.960963e+01\n881   -8.89520613  1.981733e+01\n882            NA  6.937902e+00\n883   -5.89520613 -4.409471e+00\n884            NA  1.018949e+01\n885   -4.89520613  2.374011e+00\n886            NA  8.302582e+00\n887   45.10479387  6.564487e+00\n888            NA  1.230905e+01\n889   55.10479387  2.211988e+01\n890            NA  2.449306e+01\n891    4.85479387  3.836808e+00\n892            NA  1.564487e+00\n893    1.10479387  7.757195e+00\n894    9.10479387  4.220737e+00\n895   11.10479387  8.052650e+00\n896            NA  1.145108e+01\n897   -6.18092041 -5.747066e+00\n898    1.10479387 -4.769526e+00\n899    9.10479387  9.308332e+00\n900            NA  1.342244e+01\n901   -7.89520613  1.981023e+01\n902   -5.89520613  3.017733e+01\n903   23.53336530  4.029176e+01\n904            NA  2.825429e+01\n905            NA  1.763592e+01\n906            NA  1.602197e+01\n907   19.10479387  1.484306e+01\n908   55.10479387  1.297520e+01\n909   17.53336530  1.629446e+00\n910   -0.89520613  1.158237e+00\n911   -5.89520613  3.626534e+00\n912            NA  1.341865e+01\n913            NA  3.273991e+01\n914   31.10479387  2.792957e+01\n915   23.39050816  2.119144e+01\n916            NA  1.576356e+01\n917   25.10479387  2.097189e+01\n918   51.10479387  2.859226e+01\n919   22.10479387  1.329465e+01\n920   16.10479387  1.400893e+01\n921   23.85479387  3.218486e+01\n922    9.10479387  2.716171e+01\n923            NA  8.712635e+00\n924            NA  6.888561e+00\n925  -12.89520613  7.638561e+00\n926  -21.89520613  3.619841e+00\n927   -3.89520613  6.272820e+00\n928   -1.89520613  1.670640e+01\n929   34.10479387  9.225201e+00\n930   22.10479387  1.672442e+01\n931   13.10479387  1.970440e+01\n932   -7.89520613  1.205523e+01\n933    7.60479387  1.376819e+01\n934    5.10479387  1.702745e+01\n935   20.10479387  1.894875e+01\n936   43.10479387  2.396545e+01\n937   21.10479387  2.033532e+01\n938   27.10479387  1.269424e+00\n939    9.10479387  1.382988e+01\n940    3.60479387  1.130928e+01\n941   -4.89520613  2.242386e+01\n942   12.10479387  2.547595e+01\n943   35.10479387  3.787178e+01\n944   14.10479387  3.228845e+01\n945   40.72979387  1.598636e+01\n946   18.10479387  8.330112e+00\n947   30.10479387  1.055931e+01\n948    4.10479387  1.868949e+01\n949   -8.89520613  2.300598e+00\n950   -4.89520613  3.903773e+00\n951   16.60479387 -2.709323e+00\n952   13.10479387  2.144844e+00\n953   16.10479387  8.013500e+00\n954   62.10479387  1.168367e+01\n955   52.10479387  8.871779e+00\n956   19.10479387  1.582490e+01\n957   24.47979387  3.488281e+00\n958  -15.89520613  1.438540e+00\n959            NA  4.631248e+00\n960    0.10479387  5.203527e+00\n961            NA  7.427526e+00\n962            NA  1.669122e+01\n963    3.67622245  1.095085e+01\n964   25.10479387  8.439487e+00\n965   -2.89520613 -5.303952e-01\n966   -8.89520613  8.669601e+00\n967    3.10479387  1.259365e+01\n968            NA  1.234817e+01\n969   15.39050816  1.377282e+01\n970   16.10479387  1.637178e+01\n971   15.10479387  6.842787e-01\n972   16.10479387 -2.701138e+00\n973   20.10479387  1.429070e+00\n974    1.10479387 -2.532213e-01\n975  -12.02020613  7.491570e+00\n976  -18.89520613  4.653029e+00\n977  -10.89520613  3.059279e+00\n978    3.10479387  9.283237e+00\n979            NA  6.455112e+00\n980    9.10479387 -3.982388e+00\n981   23.24765102  2.454200e-01\n982    4.10479387 -1.893846e+00\n983            NA -3.105130e-01\n984  -10.89520613 -2.706346e+00\n985    6.10479387 -2.998013e+00\n986   -1.89520613 -5.688093e-01\n987  -19.89520613  1.117929e+00\n988  -18.89520613  2.257195e+00\n989            NA  4.222157e+00\n990   -0.89520613  3.392612e+00\n991   17.10479387  7.391868e+00\n992   15.10479387  1.230683e+01\n993   13.60479387  4.269574e+00\n994   27.10479387  7.929070e+00\n995   42.10479387  5.960320e+00\n996   81.10479387  5.762404e+00\n997    1.10479387 -2.373013e+00\n998   -9.89520613 -6.581346e+00\n999   12.72979387 -3.623013e+00\n1000  -9.89520613  7.490369e-02\n1001   7.10479387 -2.445930e+00\n1002  19.10479387 -3.030848e+00\n1003   3.10479387 -3.053046e-01\n1004  11.10479387  5.909725e+00\n1005  17.81907959 -8.432250e-02\n1006  20.60479387 -1.123239e+01\n1007   7.60479387 -7.232388e+00\n1008  35.10479387 -8.835608e+00\n1009  12.10479387 -1.354301e+01\n1010  -8.89520613 -7.735986e+00\n1011 -10.03806327 -7.998013e+00\n1012 -11.39520613 -5.076138e+00\n1013           NA -5.008430e+00\n1014   5.10479387 -6.805305e+00\n1015  18.10479387 -6.959296e-01\n1016  24.10479387 -9.563463e-01\n1017  57.97979387 -8.393846e+00\n1018  28.10479387  4.356154e+00\n1019  13.60479387  9.699904e+00\n1020  -6.89520613  1.002013e-01\n1021 -24.39520613 -1.734755e+00\n1022 -20.39520613  3.993058e+00\n1023 -24.52020613  1.701651e+00\n1024 -14.89520613 -1.038401e+01\n1025  -4.89520613 -7.703370e+00\n1026 -13.39520613 -8.560513e+00\n1027   6.10479387 -9.399799e+00\n1028  13.60479387 -7.649734e+00\n1029  18.72979387 -4.018846e+00\n1030  30.10479387 -8.790948e-01\n1031  32.60479387 -1.381942e+00\n1032  18.60479387 -2.390844e-01\n1033  10.60479387  6.129963e+00\n1034   8.10479387 -2.509892e-01\n1035  -9.89520613 -1.468551e+01\n1036  -1.89520613 -1.406051e+01\n1037  -8.89520613 -1.060218e+01\n1038  -6.89520613 -1.347718e+01\n1039  -6.39520613 -1.114385e+01\n1040   1.60479387 -6.021796e-01\n1041  -7.64520613 -1.304421e+01\n1042  -5.89520613 -1.189385e+01\n1043  -7.89520613 -1.351885e+01\n1044 -13.89520613 -1.097718e+01\n1045  -8.89520613 -1.147718e+01\n1046  -5.89520613 -1.335218e+01\n1047 -14.89520613 -9.852180e+00\n1048           NA  3.397820e+00\n1049  -7.39520613 -1.160218e+01\n1050 -18.89520613 -1.599107e+01\n1051 -22.89520613 -3.810513e+00\n1052   0.60479387 -9.602180e+00\n1053 -12.32377755 -9.206346e+00\n1054  -8.39520613 -9.477180e+00\n1055   9.60479387 -6.998013e+00\n1056  -4.89520613 -7.688463e-01\n1057  -9.89520613 -9.268846e+00\n1058  -4.89520613 -9.185513e+00\n1059  -4.60949184 -1.281051e+01\n1060  -2.39520613 -1.306051e+01\n1061 -10.89520613 -1.476885e+01\n1062           NA -1.264385e+01\n1063  -8.39520613 -4.355130e-01\n1064 -13.89520613 -1.031051e+01\n1065  -1.39520613 -1.335218e+01\n1066  15.10479387 -1.406051e+01\n1067  18.10479387 -3.310513e+00\n1068 -19.89520613  8.144870e-01\n1069  -2.89520613 -1.439385e+01\n1070   4.10479387 -1.710218e+01\n1071  -9.64520613 -5.768846e+00\n1072  -1.89520613 -2.643846e+00\n1073   3.60479387 -1.893846e+00\n1074  -3.39520613 -1.422718e+01\n1075  -7.89520613 -6.185513e+00\n1076   1.10479387 -7.893846e+00\n1077   4.81907959 -1.114385e+01\n1078   9.10479387 -1.314385e+01\n1079   0.10479387 -1.397718e+01\n1080  11.60479387 -1.056051e+01\n1081  -0.89520613 -1.147718e+01\n1082  -2.89520613 -1.310218e+01\n1083   9.97979387 -1.335218e+01\n1084   5.10479387 -1.039385e+01\n1085 -11.39520613 -8.935513e+00\n1086  15.10479387 -2.768846e+00\n1087  15.10479387 -1.001885e+01\n1088   4.10479387 -1.418551e+01\n1089  -8.72853946 -1.114385e+01\n1090           NA -6.227180e+00\n1091           NA -3.477180e+00\n1092   0.10479387 -7.185513e+00\n1093 -13.89520613 -1.385218e+01\n1094   6.10479387 -1.368551e+01\n1095   4.10479387 -1.726885e+01\n1096   8.10479387 -1.197718e+01\n1097           NA -3.018846e+00\n1098           NA -1.289385e+01\n1099   3.10479387 -1.364385e+01\n1100 -10.39520613 -1.118551e+01\n1101   1.24765102 -1.497718e+01\n1102   8.60479387 -1.151885e+01\n1103  -6.89520613 -1.297718e+01\n1104  -5.89520613 -1.331051e+01\n1105  -3.89520613 -1.014385e+01\n1106  -5.89520613 -1.239385e+01\n1107  70.72979387 -1.560513e+00\n1108  21.10479387  6.478204e-01\n1109 -15.89520613 -1.218551e+01\n1110 -10.89520613 -1.331051e+01\n1111  10.10479387 -1.489385e+01\n1112           NA -1.635218e+01\n1113  -6.89520613 -6.977180e+00\n1114   3.10479387 -7.393846e+00\n1115  14.10479387 -9.477180e+00\n1116  -2.39520613 -1.464385e+01\n1117 -17.89520613 -1.199801e+01\n1118 -14.39520613 -1.412301e+01\n1119   0.35479387 -1.164385e+01\n1120 -15.39520613 -1.164385e+01\n1121 -11.89520613 -8.379957e+00\n1122  -3.89520613 -1.093551e+01\n1123  -8.89520613 -2.435513e+00\n1124  -6.89520613 -1.239385e+01\n1125  16.22979387 -1.614385e+01\n1126  -5.39520613 -1.034856e+01\n1127   1.10479387 -1.097718e+01\n1128  -1.89520613 -4.477180e+00\n1129  -1.89520613  1.397820e+00\n1130  -8.39520613 -1.156051e+01\n1131 -13.02020613  6.061537e-01\n1132  -9.89520613 -1.089385e+01\n1133  -2.39520613 -1.693551e+01\n1134   2.60479387 -1.397718e+01\n1135  -2.89520613  1.814487e+00\n1136   6.10479387 -1.893846e+00\n1137 -10.52020613 -6.935513e+00\n1138  -4.39520613 -3.560513e+00\n1139   2.10479387 -1.201885e+01\n1140           NA  1.439487e+00\n1141 -19.89520613  9.481154e+00\n1142 -11.39520613  3.314487e+00\n1143 -10.39520613 -2.143846e+00\n1144 -11.89520613 -3.143846e+00\n1145  -5.89520613  7.311537e-01\n1146  -3.39520613  2.856154e+00\n1147  19.10479387 -1.095932e+01\n1148  -3.39520613 -1.231051e+01\n1149 -10.89520613 -7.518846e+00\n1150 -14.89520613  1.606154e+00\n1151  41.10479387  9.689487e+00\n1152 -10.39520613  4.064487e+00\n1153  -8.89520613 -8.060513e+00\n1154   0.10479387 -2.602180e+00\n1155  -2.39520613  2.311537e-01\n1156   1.10479387 -3.977180e+00\n1157  10.10479387 -5.768846e+00\n1158 -13.39520613  6.731154e+00\n1159  -0.89520613 -3.393846e+00\n1160  -9.39520613  2.606154e+00\n1161  -5.56187279  1.281449e+01\n1162   7.60479387  4.856154e+00\n1163  -4.89520613 -1.107188e+01\n1164  -0.89520613 -9.477180e+00\n1165   2.10479387 -1.314385e+01\n1166  -7.39520613 -2.727180e+00\n1167  -7.03806327  6.439487e+00\n1168  -5.39520613 -7.546624e+00\n1169  -6.89520613  1.397820e+00\n1170 -13.39520613  4.481154e+00\n1171  -5.89520613  7.189487e+00\n1172  -7.89520613  1.177282e+01\n1173 -17.60949184  1.010615e+01\n1174  -6.39520613  2.374011e+00\n1175   1.10479387 -4.637533e+00\n1176  10.10479387  8.665704e-01\n1177   2.10479387 -3.688463e-01\n1178  -5.89520613  9.294226e+00\n1179  -8.27020613  5.179070e+00\n1180  -7.89520613  2.830112e+00\n1181 -14.89520613  3.534725e+00\n1182  24.10479387 -5.906833e+00\n1183   7.10479387 -2.843181e+00\n1184   5.10479387 -6.245037e+00\n1185   4.10479387  1.094681e-01\n1186  23.10479387 -2.107388e+00\n1187   0.10479387 -4.477180e+00\n1188 -16.39520613 -2.465275e+00\n1189  -6.89520613  2.481154e+00\n1190  12.10479387 -7.732591e+00\n1191  -4.27020613 -1.387894e+00\n1192   3.60479387 -2.000989e+00\n1193 -10.89520613 -1.233132e+00\n1194  -5.89520613  1.927582e+00\n1195   2.10479387 -1.779263e+00\n1196 -10.89520613  6.121061e-01\n1197  -8.46663470 -4.375834e-01\n1198  -5.39520613 -5.605130e-01\n1199  -1.89520613 -3.250989e+00\n1200  -1.89520613  2.207344e+00\n1201   3.10479387  5.260916e+00\n1202           NA  1.989953e+00\n1203  -8.14520613  6.842696e+00\n1204  -3.89520613  2.361330e+00\n1205   6.10479387 -4.552498e-01\n1206  -4.39520613 -1.219455e+01\n1207  -5.89520613 -1.536703e+00\n1208  61.10479387  5.254963e+00\n1209  16.22979387  1.034425e+01\n1210   7.60479387  9.939487e+00\n1211  24.10479387  5.713297e+00\n1212  19.10479387  1.188592e+01\n1213  27.10479387  1.608830e+01\n1214  -7.89520613  5.510916e+00\n1215  -0.75234898 -2.608132e+00\n1216  13.10479387 -3.643846e+00\n1217  21.10479387  6.711485e+00\n1218  27.60479387  4.439487e+00\n1219  21.10479387  3.397820e+00\n1220 -12.39520613  1.433532e+01\n1221   0.22979387  1.400720e+01\n1222  -7.89520613  5.330112e+00\n1223  15.10479387  1.495217e+01\n1224  29.10479387  2.529663e+01\n1225  46.10479387  1.121471e+01\n1226 -16.89520613 -1.055305e+00\n1227  -1.64520613  4.923862e+00\n1228  -7.39520613  7.845737e+00\n1229  -0.89520613  2.424678e+01\n1230  -6.39520613  4.037701e+00\n1231  17.60479387 -3.890532e+00\n1232  -7.39520613  5.455586e+00\n1233  37.10479387  8.819695e+00\n1234  26.10479387  1.268700e+01\n1235  -8.89520613  8.423862e+00\n1236 -16.89520613  1.679070e+00\n1237 -18.89520613  1.679070e+00\n1238 -15.39520613  3.506969e+00\n1239  18.72979387  2.603436e+00\n1240  13.10479387  1.156029e+01\n1241   5.10479387  6.982286e+00\n1242  12.60479387  1.987653e+01\n1243   7.10479387  3.098115e+01\n1244  -5.89520613  2.137178e+01\n1245  -5.02020613  1.117613e+01\n1246   7.10479387  1.079886e+01\n1247  34.10479387  9.158395e+00\n1248  25.10479387  1.743428e+01\n1249  51.10479387  1.106970e+01\n1250  69.10479387  6.407493e+00\n1251  -8.60949184  3.279964e+00\n1252   4.10479387 -5.424252e+00\n1253  16.10479387  9.423279e-01\n1254  12.60479387  4.208900e+00\n1255  17.10479387 -5.485805e-03\n1256  -0.39520613  1.294470e+01\n1257 -16.02020613  1.242386e+01\n1258   7.60479387  1.097074e+01\n1259  58.10479387  2.719233e+01\n1260  26.10479387  2.928679e+01\n1261  -6.89520613  1.283441e+01\n1262   6.60479387  1.625991e+01\n1263  20.97979387  1.592907e+01\n1264   3.60479387  2.228324e+01\n1265   0.10479387  1.436544e+01\n1266  -2.39520613 -1.068733e-01\n1267  -1.89520613  2.085320e+00\n1268   7.60479387  5.665659e-04\n1269  -9.32377755  8.457370e-01\n1270  -5.39520613 -4.563463e-01\n1271  -6.89520613  3.814487e+00\n1272   3.10479387  4.085320e+00\n1273   8.10479387  1.049831e+01\n1274   9.10479387  1.129365e+01\n1275  18.47979387  9.913445e+00\n1276 -12.39520613  1.409990e+01\n1277   6.10479387  1.589261e+01\n1278 -15.89520613  1.278029e+00\n1279   2.10479387  9.593020e+00\n1280  17.60479387  2.796678e+01\n1281  26.72979387  3.279365e+01\n1282  -0.89520613  9.590529e+00\n1283 -17.89520613  1.831244e+00\n1284  -5.89520613  1.229365e+01\n1285  19.10479387  2.581449e+01\n1286   4.60479387  1.793428e+01\n1287   3.60479387  4.340076e+00\n1288 -16.89520613  8.871779e+00\n1289 -15.89520613  5.027206e+00\n1290 -20.89520613  3.538445e+00\n1291  -5.89520613 -2.227486e+00\n1292  -4.89520613 -3.367805e+00\n1293  -1.64520613  7.673183e+00\n1294   7.10479387  2.198636e+01\n1295  13.10479387  6.944815e+00\n1296  13.60479387 -9.453814e-01\n1297 -13.89520613  1.165704e-01\n1298  -9.89520613  4.188743e+00\n1299 -18.52020613  9.939487e+00\n1300   2.60479387  7.755789e-01\n1301  14.10479387 -8.157213e-01\n1302   3.60479387  5.447607e+00\n1303  17.10479387  1.182653e+01\n1304  40.10479387  2.810615e+01\n1305  53.85479387  3.164782e+01\n1306  21.10479387  1.372074e+01\n1307 -10.89520613 -8.596201e-01\n1308 -19.39520613 -5.299423e-01\n1309   8.10479387  3.695439e+00\n1310   4.10479387  1.172669e+01\n1311  32.10479387  1.883416e+01\n1312 -14.89520613  9.460320e+00\n1313 -20.89520613  6.096259e-01\n1314 -24.39520613 -2.068325e+00\n1315   4.10479387  3.182749e-01\n1316  14.60479387  2.013504e+00\n1317  21.96193673  1.435615e+01\n1318  11.10479387  1.871032e+01\n1319  26.60479387  2.871032e+01\n1320  -4.89520613  1.179365e+01\n1321 -13.39520613 -2.239456e+00\n1322  -7.89520613 -2.252089e+00\n1323  20.39050816  8.975201e+00\n1324  21.10479387  1.152877e+01\n1325   6.60479387 -4.352180e+00\n1326  -8.89520613  1.572595e+01\n1327 -15.39520613  1.200199e+01\n1328 -17.89520613 -7.294888e+00\n1329 -15.39520613 -9.602180e+00\n1330 -12.39520613  5.495905e+00\n1331   5.10479387  4.716208e+00\n1332  -5.89520613  6.482512e+00\n1333  16.10479387  1.031426e+01\n1334  48.10479387  2.268353e+01\n1335  56.39050816  1.687427e+01\n1336  19.60479387  1.396925e+01\n1337   2.10479387  1.005087e+01\n1338  -8.39520613  2.148115e+01\n1339  24.10479387  3.120338e+01\n1340  30.10479387  2.044470e+01\n1341   0.27146054  4.805558e+00\n1342 -10.39520613  3.421630e+00\n1343  50.10479387  9.129963e+00\n1344  18.10479387  1.145734e+01\n1345  22.60479387  1.123830e+01\n1346 -20.39520613  9.142612e+00\n1347   7.10479387  3.092787e-01\n1348   9.10479387  3.262404e+00\n1349  35.10479387  1.673810e+01\n1350  24.60479387  1.093677e+01\n1351  60.10479387  8.945556e+00\n1352  35.60479387  5.703527e+00\n1353   4.72979387 -4.149055e+00\n1354 -10.39520613 -4.138638e+00\n1355 -23.39520613  9.290704e-01\n1356 -14.89520613 -1.685513e+00\n1357 -16.89520613 -7.539340e+00\n1358  -5.89520613 -1.392888e+01\n1359   3.53336530 -2.153295e+00\n1360  -7.89520613 -8.881942e+00\n1361 -12.89520613 -1.038789e+01\n1362 -16.39520613 -4.108132e+00\n1363   0.10479387 -2.537554e+00\n1364   8.10479387  1.528773e+00\n1365  12.97979387 -4.756942e+00\n1366  11.60479387  1.652364e-01\n1367  14.10479387 -1.253922e+00\n1368 -21.39520613 -4.161703e+00\n1369 -16.89520613 -7.691465e+00\n1370   9.60479387 -9.955441e+00\n1371  13.85479387 -3.968380e+00\n1372  -5.39520613  2.221319e+00\n1373  -1.89520613 -9.167656e+00\n1374  -4.89520613  4.909725e+00\n1375   5.10479387  1.551092e+01\n1376 -28.39520613  8.025823e-01\n1377 -25.89520613 -6.411703e+00\n1378           NA  6.928514e-01\n1379 -23.89520613 -8.191465e+00\n1380  12.60479387 -1.001386e+01\n1381  31.10479387 -9.809219e+00\n1382  16.60479387 -4.596227e+00\n1383  -8.03806327 -1.114084e+00\n1384  -3.39520613 -1.441596e+01\n1385  -6.89520613 -6.191465e+00\n1386  11.10479387  1.523711e+01\n1387 -17.39520613 -5.875989e+00\n1388 -12.89520613 -1.150694e+01\n1389  -7.27020613 -5.560513e+00\n1390  -8.89520613 -3.881942e+00\n1391  13.10479387 -1.103075e+01\n1392  15.10479387 -1.270121e+01\n1393   2.10479387 -1.037418e+01\n1394 -11.89520613 -9.655751e+00\n1395  11.72979387 -1.320415e+01\n1396  17.10479387 -5.798608e+00\n1397 -16.89520613 -6.518846e+00\n1398  -4.39520613 -1.172123e+01\n1399  24.10479387 -2.668173e+00\n1400  29.60479387 -9.149799e+00\n1401  26.53336530  3.606154e+00\n1402  15.60479387  7.106154e+00\n1403  10.10479387 -2.271796e-01\n1404 -29.89520613  2.311537e-01\n1405 -24.89520613 -3.102180e+00\n1406  -9.89520613 -1.418551e+01\n1407  -7.18092041 -9.143846e+00\n1408  -0.39520613 -1.610218e+01\n1409  -4.89520613 -1.731051e+01\n1410  -6.89520613 -1.168551e+01\n1411 -13.89520613 -1.231051e+01\n1412           NA -9.477180e+00\n1413   9.35479387 -1.160218e+01\n1414   6.60479387 -1.351885e+01\n1415  13.10479387  6.606154e+00\n1416   4.10479387 -6.060513e+00\n1417  -8.89520613 -9.227180e+00\n1418  -2.89520613 -1.131051e+01\n1419  24.67622245 -1.635218e+01\n1420  14.10479387 -1.322718e+01\n1421   1.10479387 -8.393846e+00\n1422  -6.39520613 -1.126885e+01\n1423 -15.89520613 -4.018846e+00\n1424           NA -1.560218e+01\n1425  -7.27020613 -7.477180e+00\n1426           NA -1.143551e+01\n1427 -21.89520613 -1.293551e+01\n1428 -16.89520613 -1.048097e+01\n1429  -2.89520613 -1.418551e+01\n1430 -12.39520613 -9.810513e+00\n1431 -14.89520613 -1.060218e+01\n1432 -19.89520613 -1.855130e-01\n1433  -9.89520613 -4.560513e+00\n1434  -9.89520613 -7.271796e-01\n1435  -6.89520613 -1.389385e+01\n1436  -3.39520613 -1.131051e+01\n1437  -5.03806327 -1.521812e+01\n1438  -1.39520613 -1.568551e+01\n1439  -5.89520613 -1.301885e+01\n1440  -9.39520613 -8.018846e+00\n1441  -0.89520613 -1.147899e+01\n1442   1.10479387 -5.141395e+00\n1443 -17.32377755 -4.227180e+00\n1444 -14.39520613 -8.218122e+00\n1445 -15.89520613 -1.543551e+01\n1446 -11.39520613 -7.685513e+00\n1447 -17.89520613 -1.631051e+01\n1448  -9.39520613 -1.406051e+01\n1449  -5.56187279 -1.293551e+01\n1450  -8.89520613 -1.276885e+01\n1451  -4.39520613 -1.601885e+01\n1452  -9.89520613 -9.602180e+00\n1453   6.10479387 -2.018846e+00\n1454           NA -5.018846e+00\n1455 -13.46663470 -5.560513e+00\n1456           NA -7.602180e+00\n1457 -15.89520613 -7.977180e+00\n1458  -5.89520613 -1.664385e+01\n1459 -21.39520613 -1.581051e+01\n1460           NA -7.331346e+00\n1461  -7.64520613 -7.662229e+00\n1462           NA -8.358590e+00\n1463           NA -9.560513e+00\n1464           NA -1.018551e+01\n1465   9.10479387 -1.256051e+01\n1466           NA -1.547718e+01\n1467  -6.89520613 -4.810513e+00\n1468           NA  2.564487e+00\n1469  -5.39520613 -8.143846e+00\n1470   3.10479387 -1.464385e+01\n1471   1.60479387 -9.310513e+00\n1472  -9.89520613 -1.081051e+01\n1473 -10.89520613 -1.026885e+01\n1474  -0.89520613 -8.727180e+00\n1475  10.60479387 -1.172718e+01\n1476  12.10479387 -1.476885e+01\n1477  -2.39520613 -8.477180e+00\n1478   0.10479387 -7.102180e+00\n1479  -0.46663470 -1.001885e+01\n1480 -14.89520613 -4.935513e+00\n1481  -8.89520613 -6.438463e-01\n1482  -6.89520613  8.561537e-01\n1483  21.10479387 -1.156051e+01\n1484   0.10479387 -5.268846e+00\n1485   0.85479387 -5.518846e+00\n1486  21.10479387 -9.518846e+00\n1487   7.10479387 -6.893846e+00\n1488  -8.89520613 -6.727180e+00\n1489  20.10479387 -7.227180e+00\n1490 -21.89520613  9.811537e-01\n1491   8.22979387 -7.477180e+00\n1492   6.10479387 -4.768846e+00\n1493  18.60479387 -1.151885e+01\n1494           NA -7.393846e+00\n1495   5.10479387 -2.768846e+00\n1496  -1.89520613 -6.852180e+00\n1497  13.35479387 -6.393846e+00\n1498   5.10479387 -4.102180e+00\n1499  -5.89520613 -1.110218e+01\n1500   8.10479387 -1.285218e+01\n1501   1.60479387 -1.060218e+01\n1502  -0.89520613 -1.018846e+00\n1503  -9.89520613 -1.060513e+00\n1504   1.10479387 -1.143551e+01\n1505   3.10479387 -1.097718e+01\n1506   1.10479387 -3.352180e+00\n1507   5.60479387  2.731154e+00\n1508 -10.89520613 -6.852180e+00\n1509  -4.52020613 -3.935513e+00\n1510   5.10479387 -1.114385e+01\n1511           NA -8.560513e+00\n1512   2.60479387 -3.060513e+00\n1513  12.10479387 -8.768846e+00\n1514  -6.89520613 -3.521796e-01\n1515 -11.02020613  1.397820e+00\n1516  -7.89520613 -4.477180e+00\n1517  -8.89520613 -2.018846e+00\n1518   7.10479387 -5.477180e+00\n1519   3.10479387 -4.685513e+00\n1520   6.10479387 -6.102180e+00\n1521  -4.32377755  2.064487e+00\n1522  -7.89520613 -2.060513e+00\n1523 -18.89520613  1.939487e+00\n1524  -3.89520613 -8.768846e+00\n1525  19.10479387 -1.256051e+01\n1526   1.10479387 -4.268846e+00\n1527 -11.75234898 -1.852180e+00\n1528           NA -7.227180e+00\n1529   4.60479387 -7.271796e-01\n1530   6.10479387  8.978204e-01\n1531  23.60479387 -1.477180e+00\n1532  -0.89520613 -3.227180e+00\n1533 -18.89520613  6.231154e+00\n1534 -22.89520613  7.314487e+00\n1535  -8.89520613 -2.435513e+00\n1536  -7.89520613  3.064487e+00\n1537  -0.39520613 -8.935513e+00\n1538  17.10479387 -4.362143e+00\n1539   9.81907959 -6.518846e+00\n1540  -0.89520613 -7.833391e-01\n1541  29.10479387  5.607965e+00\n1542 -16.89520613 -1.018846e+00\n1543 -12.89520613  1.981154e+00\n1544 -12.89520613 -1.685513e+00\n1545   6.67622245 -1.006051e+01\n1546  -2.89520613  2.679624e+00\n1547  38.10479387 -3.749005e+00\n1548  -5.89520613  5.222028e+00\n1549 -19.39520613  9.085320e+00\n1550 -12.89520613  6.147820e+00\n1551  -7.60949184  4.046673e+00\n1552           NA  4.282105e+00\n1553  -5.89520613  3.902731e-01\n1554  14.10479387 -1.471227e+00\n1555   1.10479387 -4.366635e+00\n1556   7.10479387  5.738304e+00\n1557  -0.14520613  1.922934e+01\n1558  -5.89520613  6.814487e+00\n1559  10.60479387 -4.022832e+00\n1560 -20.89520613 -8.957462e+00\n1561 -15.89520613  9.142612e+00\n1562 -18.89520613  3.945148e+00\n1563  -6.60949184  2.540356e-01\n1564  -8.89520613 -6.471227e+00\n1565 -21.39520613 -1.054561e+00\n1566  -6.89520613  7.156878e+00\n1567           NA  2.739026e-01\n1568 -16.89520613  1.232777e+00\n1569  -3.89520613  6.135374e+00\n1570 -11.89520613  6.539125e+00\n1571 -19.89520613  1.117758e+01\n1572 -18.89520613  1.093121e+01\n1573  11.60479387  3.632514e+00\n1574  -1.89520613  5.969546e-01\n1575   1.47979387 -1.203370e+00\n1576           NA  6.635916e+00\n1577  38.60479387  8.405937e+00\n1578   6.10479387 -7.430305e+00\n1579   2.10479387 -4.288774e+00\n1580 -13.89520613  1.207344e+00\n1581   2.96193673  5.015574e+00\n1582   8.10479387  1.731412e+00\n1583  25.60479387  6.201933e+00\n1584 -24.89520613  2.029290e+00\n1585  -4.39520613 -2.840275e+00\n1586  -7.89520613  5.704394e-01\n1587 -11.77020613 -2.642207e-02\n1588  -6.89520613  6.612106e+00\n1589  13.10479387 -3.700368e-01\n1590  12.10479387  1.089782e+01\n1591  37.10479387  9.970261e+00\n1592  25.10479387  1.187401e+01\n1593  11.10479387  9.195439e+00\n1594  46.10479387  1.272412e+01\n1595  36.10479387  3.514021e+00\n1596  51.10479387  1.569395e+01\n1597  54.60479387  3.262404e+00\n1598  -1.89520613 -3.285418e+00\n1599  -9.52020613 -1.441465e+00\n1600 -17.89520613  9.374011e+00\n1601   8.10479387  1.030983e+01\n1602  59.10479387  1.571458e+01\n1603  29.10479387 -6.126410e+00\n1604   3.10479387 -1.324718e+00\n1605   0.81907959  8.574904e+00\n1606  -7.89520613 -4.338166e+00\n1607  -4.39520613  9.115729e+00\n1608           NA  1.341568e+01\n1609  64.10479387  8.586097e+00\n1610  10.10479387  9.918654e+00\n1611   2.72979387  1.102441e+01\n1612  14.10479387  6.529387e+00\n1613   7.10479387  1.458532e+01\n1614  14.10479387  1.902877e+01\n1615  -2.39520613  1.616960e+01\n1616 -17.89520613  1.262695e+01\n1617 -11.32377755  6.393806e+00\n1618  -7.89520613  7.815619e+00\n1619  11.10479387  9.600945e+00\n1620  14.10479387  1.436136e+01\n1621  25.60479387  2.867907e+01\n1622  52.10479387  2.323115e+01\n1623   4.22979387  6.304070e+00\n1624  -8.89520613  3.142612e+00\n1625  18.60479387  2.229796e+01\n1626   8.10479387  2.333011e+01\n1627  -0.39520613  1.869990e+01\n1628 -12.89520613  1.363265e+01\n1629  -3.39520613  8.779840e+00\n1630  -0.89520613  2.567386e+01\n1631   9.10479387  3.247074e+01\n1632  26.10479387  4.366865e+01\n1633  51.10479387  2.639782e+01\n1634 -15.89520613  2.025945e+00\n1635 -17.27020613  1.245511e+01\n1636  -0.89520613  2.086068e+01\n1637  18.60479387  3.443564e+01\n1638  62.10479387  3.024261e+01\n1639  61.10479387  2.925199e+01\n1640  15.10479387  2.365303e+01\n1641  17.60479387  2.347595e+01\n1642           NA  1.472595e+01\n1643  35.10479387  1.234884e+01\n1644   0.10479387  1.192080e+01\n1645  27.60479387  4.703300e+00\n1646           NA  5.557920e+00\n1647   1.72979387  1.195511e+01\n1648  -1.89520613  2.117386e+01\n1649   3.60479387  2.024157e+01\n1650           NA  1.151082e+01\n1651   4.10479387  4.532331e+00\n1652 -11.89520613  1.605928e+01\n1653  10.60479387  2.278052e+01\n1654  24.10479387  1.527622e+01\n1655 -11.39520613  1.242907e+01\n1656           NA  5.538445e+00\n1657  16.60479387  1.161657e+01\n1658  23.10479387  2.110095e+01\n1659  49.10479387  3.096032e+01\n1660  42.10479387  3.347595e+01\n1661  51.60479387  3.860999e+01\n1662  15.10479387  3.335020e+01\n1663  20.10479387  2.883579e+01\n1664  36.10479387  1.542229e+01\n1665  -3.89520613  1.163877e+01\n1666  17.10479387  6.084188e+00\n1667 -17.89520613  3.817091e+00\n1668  -9.39520613  5.013892e+00\n1669 -15.39520613  1.010568e+01\n1670           NA  2.221553e+01\n1671   4.47979387  1.555060e+01\n1672  -6.89520613  6.735783e+00\n1673  30.60479387  1.618521e+01\n1674           NA  1.489782e+01\n1675  97.10479387  2.008301e+01\n1676 -18.89520613  1.132375e+01\n1677 -19.60949184  3.013561e+00\n1678           NA  8.425177e+00\n1679   5.60479387  1.193949e+01\n1680   8.10479387  6.893191e+00\n1681  -1.39520613  8.279798e+00\n1682 -18.89520613  9.823142e+00\n1683  -9.39520613  4.008511e+00\n1684  -5.89520613  8.745043e+00\n1685   2.60479387  5.083006e+00\n1686  -2.89520613  8.523533e+00\n1687  31.10479387  9.359942e+00\n1688  29.10479387  1.151578e+01\n1689  24.60479387  1.452745e+01\n1690   1.10479387  1.119412e+01\n1691   0.60479387  6.587635e+00\n1692 -15.89520613 -1.915311e+00\n1693  -8.39520613 -6.827352e-01\n1694  14.10479387  3.273626e+00\n1695   8.10479387  1.215708e+01\n1696 -15.89520613  3.136512e+00\n1697   9.60479387  2.086596e+01\n1698  28.10479387  3.335092e+01\n1699  46.60479387  2.361568e+01\n1700   8.10479387  8.591603e+00\n1701  35.96193673  1.232838e+01\n1702  39.10479387  1.189782e+01\n1703  13.60479387 -2.463291e+00\n1704  -4.89520613  1.970737e+00\n1705  -9.39520613  1.051240e+01\n1706           NA  1.168353e+01\n1707   0.85479387 -3.971971e+00\n1708 -20.89520613  1.897216e+00\n1709  28.10479387 -2.129980e-01\n1710 -14.89520613  5.100945e+00\n1711  29.60479387  1.164374e+01\n1712   7.10479387  1.857490e+01\n1713  16.72979387  7.319695e+00\n1714 -18.89520613  1.251987e+00\n1715 -12.89520613 -1.207289e+00\n1716   0.10479387  7.777204e-02\n1717  19.60479387  5.163445e+00\n1718  -0.89520613 -1.982388e+00\n1719   0.39050816  2.778029e+00\n1720   9.10479387 -1.315721e+00\n1721   6.60479387 -8.055305e+00\n1722   8.10479387 -5.473104e+00\n1723   4.10479387 -6.805883e+00\n1724  -5.89520613 -7.568889e+00\n1725   0.10479387  1.894870e-01\n1726  -8.89520613 -7.093225e-01\n1727  -1.89520613 -9.686097e+00\n1728  -5.89520613 -1.376905e+01\n1729   2.10479387 -1.130327e+01\n1730   6.10479387 -8.307896e+00\n1731  -0.27020613 -1.049696e+01\n1732 -17.89520613 -4.069772e+00\n1733  -1.89520613  1.064487e+00\n1734  42.10479387  7.202715e+00\n1735  26.10479387 -3.501133e+00\n1736  13.10479387  2.074764e-01\n1737  -2.52020613 -2.810780e+00\n1738 -18.89520613 -4.070930e+00\n1739 -14.89520613 -2.643846e+00\n1740 -17.89520613 -9.039680e+00\n1741  -5.39520613 -1.097797e+01\n1742  -4.89520613  3.479946e+00\n1743  17.53336530 -2.276093e+00\n1744  29.10479387 -5.413095e+00\n1745   4.10479387 -8.120698e+00\n1746  -8.89520613 -5.079031e+00\n1747 -16.39520613 -6.278106e+00\n1748           NA -1.333366e+01\n1749  -6.27020613 -1.345445e+01\n1750   3.10479387 -9.643846e+00\n1751  44.60479387 -4.249523e+00\n1752  -7.89520613 -4.436776e+00\n1753  -6.39520613 -6.139217e+00\n1754 -13.89520613 -7.551254e+00\n1755  12.10479387 -4.541994e+00\n1756  12.10479387  5.512051e+00\n1757  27.60479387 -4.236582e-02\n1758  -8.89520613 -1.017028e+01\n1759 -17.89520613 -1.370114e+01\n1760 -13.89520613 -1.037301e+01\n1761 -23.89520613 -1.140426e+01\n1762 -31.89520613 -1.201885e+01\n1763   5.10479387 -1.423239e+01\n1764 -25.89520613 -1.366795e+01\n1765           NA -1.167956e+01\n1766           NA -9.143846e+00\n1767 -10.89520613 -6.646796e-01\n1768 -16.89520613 -3.373013e+00\n1769  11.60479387 -7.956346e+00\n1770  -7.89520613 -1.408859e+01\n1771   1.10479387 -7.914680e+00\n1772  -3.89520613 -1.297718e+01\n1773   5.35479387 -1.441468e+01\n1774 -26.89520613 -1.296825e+01\n1775  11.10479387 -1.601885e+01\n1776           NA -1.726885e+01\n1777   5.60479387 -1.656051e+01\n1778  -5.89520613 -1.558135e+01\n1779   2.10479387 -1.556051e+01\n1780   4.10479387 -1.001885e+01\n1781  -5.39520613 -1.646796e-01\n1782           NA -7.143846e+00\n1783   2.10479387 -1.064385e+01\n1784  -5.89520613 -1.022718e+01\n1785 -12.02020613 -1.389385e+01\n1786           NA -1.524801e+01\n1787  11.60479387 -1.710218e+01\n1788 -13.89520613 -1.318551e+01\n1789  -0.89520613 -4.331346e+00\n1790  -6.89520613 -1.300694e+01\n1791   3.47979387 -1.587301e+01\n1792   1.10479387 -1.271088e+01\n1793 -23.89520613 -7.706346e+00\n1794           NA -8.706346e+00\n1795 -14.89520613 -5.435513e+00\n1796 -14.89520613 -1.353968e+01\n1797 -17.27020613 -8.081346e+00\n1798 -11.89520613 -1.099801e+01\n1799   1.10479387 -1.128968e+01\n1800 -10.89520613 -1.422084e+01\n1801  -0.39520613 -1.385218e+01\n1802 -13.89520613 -1.456051e+01\n1803  -9.60949184 -1.316468e+01\n1804   8.10479387 -1.543551e+01\n1805  -8.39520613 -1.612301e+01\n1806  -5.89520613 -1.599801e+01\n1807  -6.89520613 -1.558135e+01\n1808   7.10479387 -1.656051e+01\n1809   2.85479387 -5.602180e+00\n1810  -7.89520613 -7.373013e+00\n1811  -6.39520613 -1.458135e+01\n1812  12.10479387 -1.191468e+01\n1813  -2.89520613 -1.068551e+01\n1814   3.10479387 -1.562301e+01\n1815  -4.52020613 -1.731051e+01\n1816 -13.89520613 -1.743551e+01\n1817 -22.39520613 -1.618551e+01\n1818 -11.89520613 -1.314385e+01\n1819  -4.89520613 -1.489385e+01\n1820   5.10479387 -1.612301e+01\n1821  -0.89520613 -1.533135e+01\n1822  -2.89520613 -1.024801e+01\n1823  -6.89520613 -1.199801e+01\n1824   8.10479387 -1.570635e+01\n1825  -4.89520613 -1.438968e+01\n1826 -12.89520613 -1.333859e+01\n1827  -0.46663470 -1.397718e+01\n1828  -2.89520613 -1.701885e+01\n1829  -1.89520613 -1.731051e+01\n1830 -11.89520613 -1.331051e+01\n1831  -8.39520613 -1.143551e+01\n1832  -3.89520613 -1.639385e+01\n1833   7.53336530 -1.695635e+01\n1834  -7.39520613 -1.606051e+01\n1835  -0.39520613 -1.743551e+01\n1836  -1.89520613 -1.495725e+01\n1837  -8.89520613 -1.445635e+01\n1838 -10.89520613 -1.201885e+01\n1839 -15.77020613 -1.266468e+01\n1840  -9.89520613 -7.873013e+00\n1841   4.10479387 -1.118362e+01\n1842   5.10479387 -1.162112e+01\n1843   0.60479387 -8.268846e+00\n1844           NA -7.810513e+00\n1845  -6.39520613 -1.220635e+01\n1846   8.10479387 -1.310218e+01\n1847  10.10479387 -1.493551e+01\n1848   0.10479387 -1.510218e+01\n1849  16.10479387 -1.084027e+01\n1850  31.10479387 -7.539680e+00\n1851  -9.14520613 -1.220635e+01\n1852  -4.89520613 -1.166468e+01\n1853  11.60479387 -1.572718e+01\n1854   7.10479387 -1.401885e+01\n1855  12.60479387 -1.324801e+01\n1856   6.60479387 -1.714385e+01\n1857 -13.77020613 -9.581346e+00\n1858   7.60479387 -3.123013e+00\n1859 -10.39520613 -1.501885e+01\n1860  48.60479387 -1.685218e+01\n1861  -7.39520613 -1.026885e+01\n1862 -10.89520613 -1.145635e+01\n1863   3.10479387 -1.401885e+01\n1864   0.60479387 -8.706346e+00\n1865  -8.89520613 -6.206346e+00\n1866   9.60479387 -1.191468e+01\n1867  44.10479387 -1.622718e+01\n1868 -14.89520613 -8.914680e+00\n1869  -2.52020613 -5.539680e+00\n1870   3.60479387 -1.722718e+01\n1871  -2.39520613 -1.307301e+01\n1872  -8.39520613 -1.572718e+01\n1873  -7.89520613 -1.243551e+01\n1874   2.10479387 -9.977180e+00\n1875   3.96193673 -1.573760e+01\n1876  -7.89520613 -1.375172e+01\n1877   3.10479387 -9.554561e+00\n1878  -8.89520613 -4.687407e+00\n1879  -3.89520613 -8.602180e+00\n1880   1.10479387 -1.768846e+00\n1881   4.22979387 -8.956346e+00\n1882   2.60479387 -8.130589e+00\n1883   2.10479387 -5.956346e+00\n1884   0.10479387 -1.145824e+01\n1885  -6.89520613 -5.977180e+00\n1886 -11.89520613  3.272820e+00\n1887   2.47979387 -1.018846e+00\n1888  10.60479387 -8.081346e+00\n1889  25.10479387 -1.253968e+01\n1890  43.10479387 -1.068551e+01\n1891  65.10479387 -1.260218e+01\n1892  16.10479387 -1.131051e+01\n1893   9.81907959 -1.589385e+01\n1894  -6.39520613 -1.043551e+01\n1895   0.10479387 -4.977180e+00\n1896  -1.39520613  3.585320e+00\n1897   0.10479387  1.751987e+00\n1898  -2.39520613 -1.352180e+00\n1899  -0.14520613 -1.685513e+00\n1900  -6.89520613  3.561537e-01\n1901  -5.39520613 -4.980130e-01\n1902  -5.39520613 -7.238543e+00\n1903  -7.39520613  1.897820e+00\n1904 -13.39520613  7.106154e+00\n1905  -9.89520613  9.327168e+00\n1906   6.10479387 -3.602180e+00\n1907  -0.89520613  1.010615e+01\n1908 -14.39520613  6.085320e+00\n1909  20.10479387 -5.998013e+00\n1910  24.10479387 -2.839680e+00\n1911   6.85479387 -7.248013e+00\n1912  12.60479387 -3.602180e+00\n1913  -7.39520613  4.397820e+00\n1914   5.60479387 -1.414680e+00\n1915  -8.89520613  7.835320e+00\n1916   0.10479387  1.043654e+00\n1917   1.47979387 -2.768846e+00\n1918 -13.89520613  3.789834e+00\n1919  -1.89520613 -9.193417e-01\n1920  11.60479387 -5.945930e+00\n1921 -13.89520613  7.501987e+00\n1922  -4.89520613  1.470737e+00\n1923   8.22979387 -1.591763e+00\n1924  42.60479387 -4.939301e+00\n1925  19.10479387 -6.288040e-02\n1926   3.10479387  7.487185e+00\n1927  11.10479387  5.483444e-01\n1928 -15.89520613 -2.284471e+00\n1929 -19.03806327  1.262178e+01\n1930  -1.89520613 -3.516952e+00\n1931  10.60479387 -9.670341e+00\n1932  19.10479387 -9.161703e+00\n1933  -7.89520613 -2.195930e+00\n1934 -10.89520613  3.486362e+00\n1935   6.60479387 -8.982388e+00\n1936  -9.89520613  4.304070e+00\n1937 -11.39520613  2.147820e+00\n1938   0.60479387 -6.503853e+00\n1939   3.10479387 -1.890126e+00\n1940   6.60479387 -1.145521e+01\n1941  -0.32377755 -1.091407e+01\n1942 -19.89520613 -2.072418e+00\n1943 -22.39520613  8.234416e-02\n1944 -13.89520613  5.043065e+00\n1945  21.10479387 -1.341537e+00\n1946  18.60479387 -3.029942e+00\n1947  21.47979387 -4.298511e+00\n1948 107.10479387  1.348183e+01\n1949  33.10479387  8.147820e+00\n1950   0.60479387 -1.340275e+00\n1951 -10.39520613 -4.842554e-02\n1952  22.10479387  1.186976e+01\n1953  -2.03806327  1.904855e+00\n1954  66.10479387  2.306723e+00\n1955  31.10479387  1.556449e+01\n1956  15.10479387  2.617386e+01\n1957  19.10479387  2.192386e+01\n1958  50.10479387  1.432252e+01\n1959  13.67622245  6.981154e+00\n1960           NA  3.543427e+00\n1961 -14.89520613 -5.932375e+00\n1962  47.10479387 -7.117811e-01\n1963  33.10479387  2.192163e+01\n1964   1.10479387  1.558830e+01\n1965 -12.77020613  2.440231e+00\n1966   4.10479387  2.669107e+00\n1967           NA  1.670307e+01\n1968  58.10479387  1.416629e+01\n1969  49.10479387  5.342155e+00\n1970  20.10479387 -4.290430e-01\n1971 -23.02020613  9.808535e+00\n1972           NA  9.695439e+00\n1973 -15.89520613  5.798026e+00\n1974   4.10479387 -2.873013e+00\n1975  36.10479387  3.012404e+00\n1976  22.10479387  1.294130e+01\n1977  -0.27020613  2.126602e+01\n1978   8.10479387  1.668949e+01\n1979   9.10479387  3.511498e+00\n1980 -12.89520613  2.958056e+00\n1981  21.10479387  2.325720e+01\n1982  17.10479387  5.236362e+00\n1983  19.81907959  1.285710e+01\n1984  19.10479387  1.367386e+01\n1985 -14.89520613  1.396032e+01\n1986 -14.89520613  3.512404e+00\n1987 -15.89520613  6.592114e+00\n1988  -6.89520613  8.615747e+00\n1989   7.96193673  7.620129e+00\n1990   1.10479387  2.128764e+01\n1991  27.10479387  2.589261e+01\n1992  11.10479387  2.180928e+01\n1993  11.10479387  1.359483e+01\n1994  42.10479387  2.495511e+01\n1995  38.39050816  8.319559e+00\n1996   8.10479387  8.189317e+00\n1997           NA -2.066482e-01\n1998 -31.89520613  1.057385e+00\n1999 -24.89520613  1.246779e+00\n2000  28.10479387 -5.774799e+00\n2001  14.24765102  1.170245e+01\n2002   6.10479387  1.254891e+01\n2003  16.10479387  4.387957e+00\n2004   7.10479387  6.685421e+00\n2005 -16.89520613  2.158237e+00\n2006   4.10479387  5.684279e+00\n2007  19.60479387  1.397387e+01\n2008 -15.89520613  9.578376e+00\n2009  41.10479387  3.139319e+01\n2010  45.10479387  2.755985e+00\n2011  -9.89520613 -3.313463e-01\n2012  -9.89520613  1.009574e+01\n2013 -14.18092041  2.142612e+00\n2014           NA -7.015245e-01\n2015  25.10479387 -3.681729e-01\n2016  32.10479387  9.722498e+00\n2017  -1.89520613 -5.540585e+00\n2018  -1.89520613  4.667949e+00\n2019  -2.27020613  6.476524e+00\n2020  -8.89520613 -3.886380e-01\n2021 -19.89520613  1.299390e+00\n2022 -22.89520613 -7.707031e-01\n2023 -14.89520613  4.103208e+00\n2024   7.10479387 -6.037566e+00\n2025  -5.89520613 -1.685513e+00\n2026 -10.89520613 -2.041994e+00\n2027  -9.89520613  7.208006e+00\n2028 -15.89520613 -4.882505e-01\n2029 -26.89520613  1.309254e+00\n2030  -4.89520613 -5.462215e-01\n2031  -4.89520613  6.846561e-01\n2032  -9.89520613  7.494201e+00\n2033  -0.89520613 -1.291994e+00\n2034   1.10479387  8.561537e-01\n2035  -4.89520613 -2.235116e+00\n2036   8.10479387  1.162917e+00\n2037 -10.77020613 -5.023275e+00\n2038 -16.89520613 -5.944772e+00\n2039 -14.89520613  9.779331e-01\n2040           NA  4.184857e+00\n2041 -10.89520613  3.370043e+00\n2042   0.10479387 -7.797832e+00\n2043 -11.39520613 -6.139217e+00\n2044  -9.89520613  2.951584e+00\n2045  -5.89520613  1.092882e+01\n2046  27.60479387  1.093611e+01\n2047  11.10479387  1.300720e+01\n2048  12.10479387  8.824904e+00\n2049  -0.64520613  3.835320e+00\n2050  -7.89520613  4.051092e+00\n2051  -7.89520613 -9.066405e+00\n2052 -11.39520613 -2.846932e-01\n2053  -7.89520613 -2.206246e+00\n2054 -20.89520613  7.453376e+00\n2055  -9.60949184  6.860783e+00\n2056  48.10479387  3.073746e+00\n2057  22.60479387  2.525035e+00\n2058 -15.89520613 -4.245094e+00\n2059  29.10479387 -3.863250e+00\n2060  42.60479387  3.895002e+00\n2061  22.10479387  1.411078e+01\n2062  25.60479387  1.113856e+01\n2063  43.60479387  1.247806e+00\n2064  12.10479387  4.522820e+00\n2065 -14.39520613 -7.259647e+00\n2066  -2.89520613 -1.097423e+01\n2067 -11.14520613 -7.868502e+00\n2068  17.60479387  3.934857e+00\n2069  -2.89520613  2.684857e+00\n2070   4.10479387 -6.625328e+00\n2071  29.10479387 -2.824402e+00\n2072  22.10479387 -2.538774e+00\n2073  -1.60949184 -3.060421e+00\n2074  -0.89520613 -2.179204e-01\n2075   0.60479387  3.923862e+00\n2076   2.10479387  8.444695e+00\n2077   0.60479387  1.209800e+01\n2078  20.10479387 -2.919783e+00\n2079 -15.14520613 -1.310983e+01\n2080   7.60479387 -8.417525e+00\n2081   4.60479387 -9.321383e+00\n2082   5.10479387  1.286709e+00\n2083  16.10479387  1.397189e+01\n2084  35.60479387  4.226524e+00\n2085  10.96193673  5.195997e-01\n2086  69.60479387  1.427000e+01\n2087  32.10479387  1.306435e+00\n2088   7.60479387 -1.919908e-01\n2089  -3.39520613 -5.475857e+00\n2090  -6.89520613 -1.320930e+00\n2091   2.24765102 -1.312664e+01\n2092   3.10479387 -7.255939e+00\n2093  -8.89520613 -6.508430e+00\n2094   2.60479387 -4.237596e+00\n2095  19.60479387 -3.096518e+00\n2096  -5.89520613 -4.873013e+00\n2097 -15.77020613 -5.732388e+00\n2098   3.60479387 -7.402225e+00\n2099  42.60479387 -1.070295e+01\n2100  61.60479387 -7.627542e+00\n2101  55.60479387 -3.910151e+00\n2102  52.10479387  1.968875e+00\n2103   6.96193673  1.023578e+01\n2104  -3.39520613  4.217265e+00\n2105 -10.89520613 -3.977180e+00\n2106  38.10479387 -8.293678e+00\n2107  53.10479387  2.241269e-01\n2108  12.10479387 -3.099764e+00\n2109 -14.60949184 -1.227053e+01\n2110  16.10479387 -7.523476e+00\n2111  25.60479387 -5.963291e+00\n2112  23.10479387 -4.449402e+00\n2113  30.10479387 -1.012701e+01\n2114  10.60479387 -9.448079e+00\n2115 -14.89520613 -1.457242e+01\n2116  -2.39520613 -1.263922e+01\n2117  -1.39520613 -1.047255e+01\n2118   3.10479387 -3.671624e+00\n2119  -3.89520613 -1.013922e+01\n2120   7.10479387 -9.656893e+00\n2121   9.35479387 -9.505232e+00\n2122  29.10479387 -7.569557e+00\n2123  95.10479387 -2.176229e+00\n2124  -3.39520613 -1.846971e+00\n2125   3.10479387 -7.241069e+00\n2126   6.60479387 -4.195376e+00\n2127  43.53336530 -1.325033e+01\n2128  85.10479387 -1.143815e+01\n2129  -3.89520613 -4.910151e+00\n2130  -9.39520613 -6.074402e+00\n2131 -15.89520613 -5.884587e+00\n2132  -3.89520613 -7.320930e+00\n2133 -22.18092041 -1.597492e+01\n2134 -18.89520613 -1.357093e+01\n2135 -20.89520613 -1.424208e+01\n2136  -7.89520613 -1.510976e+01\n2137 -12.89520613 -1.466196e+01\n2138  -6.39520613 -1.383551e+01\n2139  -6.77020613 -1.533135e+01\n2140  -1.89520613 -1.222718e+01\n2141   3.10479387 -1.410218e+01\n2142  -9.89520613 -1.322718e+01\n2143           NA -1.259460e+01\n2144  -6.39520613 -7.685513e+00\n2145 -15.18092041 -1.176885e+01\n2146  -6.89520613 -1.189385e+01\n2147  -0.89520613 -1.568551e+01\n2148   8.60479387 -1.565774e+01\n2149  -5.39520613 -1.035097e+01\n2150  -0.39520613 -1.171834e+01\n2151  -1.03806327 -1.322718e+01\n2152 -13.39520613 -1.406051e+01\n2153 -22.39520613 -7.602180e+00\n2154   0.60479387 -1.568551e+01\n2155  -7.89520613 -1.576430e+01\n2156   3.60479387 -1.701885e+01\n2157 -22.18092041 -1.174107e+01\n2158  -3.39520613 -1.386607e+01\n2159  -1.39520613 -1.453274e+01\n2160  -5.89520613 -1.311607e+01\n2161  19.10479387 -1.524711e+01\n2162 -15.89520613 -1.574107e+01\n2163 -12.46663470 -1.223563e+01\n2164 -12.89520613 -1.292876e+01\n2165  14.10479387 -1.225496e+01\n2166  -8.89520613 -1.186607e+01\n2167 -10.39520613 -1.669940e+01\n2168   2.60479387 -1.442162e+01\n2169  -1.89520613 -1.284713e+01\n2170   8.10479387 -1.618189e+01\n2171  13.60479387 -1.739203e+01\n2172  -1.39520613 -1.743551e+01\n2173  -1.89520613 -1.083829e+01\n2174  -7.89520613 -1.035218e+01\n2175   3.39050816 -1.683104e+01\n2176  -5.89520613 -1.614890e+01\n2177  -7.89520613 -1.676885e+01\n2178   2.10479387 -1.643551e+01\n2179  -3.39520613 -1.703274e+01\n2180  -1.89520613 -1.689385e+01\n2181 -10.02020613 -1.233829e+01\n2182  12.60479387 -1.718551e+01\n2183  10.60479387 -1.743551e+01\n2184  19.10479387 -1.490411e+01\n2185   5.10479387 -1.261607e+01\n2186  41.10479387 -5.213291e+00\n2187  -6.75234898 -1.221329e+01\n2188  -2.89520613 -1.500496e+01\n2189   2.10479387 -1.743551e+01\n2190   9.10479387 -1.743551e+01\n2191   9.10479387 -1.743551e+01\n2192  10.10479387 -1.735218e+01\n2193 -15.75234898 -1.512996e+01\n2194 -16.39520613 -1.789385e+01\n2195 -12.39520613 -1.890774e+01\n2196 -16.89520613 -1.860218e+01\n2197 -21.89520613 -1.848223e+01\n2198   0.10479387 -1.765774e+01\n2199 -14.02020613 -1.774546e+01\n2200 -19.89520613 -5.184909e+00\n2201 -30.89520613  5.522820e+00\n2202 -25.89520613  4.731154e+00\n2203 -19.39520613 -6.616069e+00\n2204  -1.89520613 -1.790774e+01\n2205 -13.02020613 -1.638627e+01\n2206 -21.39520613 -1.541136e+01\n2207  -2.39520613 -1.365395e+01\n2208  -8.39520613 -1.619940e+01\n2209 -11.89520613 -1.838291e+00\n2210  17.10479387 -1.137996e+01\n2211  15.67622245 -1.340653e+01\n2212   7.60479387 -1.504662e+01\n2213 -14.89520613 -1.878274e+01\n2214  -9.39520613 -1.349107e+01\n2215 -13.89520613 -9.838291e+00\n2216  -7.89520613 -2.907735e+00\n2217  -4.02020613 -1.168551e+01\n2218  18.60479387 -1.285822e+01\n2219  -2.39520613 -1.170423e+01\n2220   2.60479387 -1.220047e+01\n2221 -14.39520613 -7.685513e+00\n2222   7.60479387 -5.046624e+00\n2223 -13.39520613 -6.227180e+00\n2224 -20.39520613  1.258931e+00\n2225 -21.89520613 -1.222295e+01\n2226  30.10479387 -1.633577e+01\n2227  62.60479387 -1.214385e+01\n2228  40.60479387 -1.157682e+01\n2229 -21.52020613 -1.949402e+00\n2230  -7.39520613 -1.262996e+01\n2231 -22.39520613 -3.754957e+00\n2232   6.60479387 -1.838627e+01\n2233 -13.89520613 -1.258044e+01\n2234 -17.39520613 -4.977180e+00\n2235 -13.52020613 -5.529957e+00\n2236 -22.89520613 -1.193551e+01\n2237 -10.89520613 -1.768846e+00\n2238   3.10479387 -9.560513e+00\n2239 -11.89520613 -4.020109e+00\n2240   5.10479387 -3.671624e+00\n2241  -6.14520613 -5.559909e+00\n2242  32.60479387 -1.004662e+01\n2243  10.60479387 -6.296624e+00\n2244 -10.89520613 -8.060513e+00\n2245 -15.39520613 -6.616069e+00\n2246   2.60479387 -7.449402e+00\n2247   5.85479387 -1.032061e+01\n2248   3.10479387 -7.018846e+00\n2249 -17.39520613 -9.222280e-01\n2250  18.60479387 -9.074402e+00\n2251  10.60479387  9.008931e+00\n2252  13.10479387  4.258931e+00\n2253  18.10479387 -1.121726e+01\n2254  -6.89520613  1.193043e+01\n2255 -13.39520613  1.089782e+01\n2256   2.10479387 -2.479897e+00\n2257 -13.89520613 -9.893846e+00\n2258  -6.89520613 -9.123013e+00\n2259  -9.27020613 -8.935513e+00\n2260  -7.89520613 -1.299574e-01\n2261 -11.39520613 -1.203021e+01\n2262   1.10479387 -9.921624e+00\n2263  14.10479387 -7.843341e+00\n2264   9.10479387 -1.977180e+00\n2265  -9.02020613 -3.546624e+00\n2266  51.10479387 -2.664680e+00\n2267  -9.89520613 -2.060513e+00\n2268  -7.89520613  6.902094e+00\n2269 -23.89520613  7.002618e+00\n2270  -4.89520613 -1.131304e+01\n2271   6.67622245 -1.531776e+01\n2272   8.10479387 -7.046624e+00\n2273  -7.39520613 -1.835875e+00\n2274  -6.89520613 -1.243154e+01\n2275  -0.89520613 -1.351885e+01\n2276   2.60479387 -1.074348e+01\n2277  -0.52020613  5.351927e+00\n2278 -14.89520613  9.647820e+00\n2279 -16.89520613  8.258931e+00\n2280   6.10479387  4.217265e+00\n2281   7.60479387  4.826564e+00\n2282  -2.39520613  2.401025e+00\n2283 -22.27020613  7.499672e+00\n2284   7.10479387 -5.534679e-01\n2285  -9.39520613 -1.717920e+00\n2286  -1.39520613  4.434857e+00\n2287  -1.89520613  1.659092e+00\n2288   0.10479387  2.075357e+00\n2289  23.35479387 -3.500364e+00\n2290  11.60479387 -5.131385e+00\n2291   1.10479387  7.774500e-01\n2292  -7.39520613  2.703376e+00\n2293 -18.89520613  3.978204e-01\n2294 -13.89520613  8.500935e+00\n2295  -2.46663470  5.833701e+00\n2296   7.10479387 -8.128552e-01\n2297 -11.39520613 -8.996014e+00\n2298  -9.89520613 -2.611439e+00\n2299   3.10479387  4.087635e+00\n2300  -5.89520613  1.033764e+01\n2301  -3.02020613 -4.717920e+00\n2302  -5.89520613  4.809052e+00\n2303   9.60479387  8.597058e-01\n2304  29.60479387 -1.217259e+00\n2305  29.60479387  5.202735e+00\n2306  66.10479387  1.474967e+01\n2307 -15.89520613  1.165708e+01\n2308 -15.39520613  1.875514e+00\n2309  33.10479387  1.930228e+00\n2310  12.10479387  1.605349e+00\n2311  14.60479387 -1.191540e+01\n2312   8.60479387 -7.329031e+00\n2313   1.10479387  1.129134e+01\n2314  -2.89520613  5.711709e+00\n2315  -2.39520613  6.347941e-01\n2316   0.10479387 -3.203867e+00\n2317  19.60479387 -6.545896e+00\n2318  37.60479387 -3.760429e+00\n2319  26.47979387  1.425190e+01\n2320  18.10479387  2.486541e+01\n2321  25.10479387  1.752282e+01\n2322  38.10479387  1.673532e+01\n2323   3.60479387  8.927538e+00\n2324  16.60479387  2.015278e+00\n2325 -10.77020613 -2.443484e+00\n2326  18.10479387  4.884777e+00\n2327  39.60479387  9.376987e+00\n2328  10.60479387  8.856154e+00\n2329  -3.39520613 -2.277542e+00\n2330  17.10479387 -6.100601e-01\n2331  -9.27020613 -2.401998e+00\n2332  27.60479387 -8.717656e+00\n2333  19.10479387 -2.281709e+00\n2334   9.10479387  7.710320e+00\n2335 -13.89520613  1.044782e+01\n2336   0.10479387  1.365885e-01\n2337  -5.89520613 -2.752740e+00\n2338  16.10479387  2.061537e-01\n2339  73.10479387  6.575719e+00\n2340  58.60479387 -8.130492e-01\n2341 -17.89520613  4.027450e+00\n2342  -5.89520613 -3.185513e+00\n2343 -22.39520613  6.601524e+00\n2344  -2.89520613 -5.262786e+00\n2345  -1.89520613 -3.120281e-01\n2346  -2.39520613  4.185549e-01\n2347 -14.39520613 -1.544390e+00\n2348 -10.89520613  3.451987e+00\n2349  -2.27020613  6.976987e+00\n2350   2.10479387 -1.330589e+01\n2351  -8.89520613 -5.971287e+00\n2352   0.10479387  7.390245e+00\n2353  29.10479387  5.214487e+00\n2354   2.10479387  1.607383e+01\n2355   6.67622245  1.628532e+01\n2356  18.10479387  1.321032e+01\n2357   9.10479387  6.332939e+00\n2358  -0.89520613  4.582551e-01\n2359           NA  8.863713e+00\n2360  28.10479387  2.474474e+01\n2361  -1.39520613  1.101032e+01\n2362  -5.89520613  6.518191e+00\n2363 -15.89520613  5.633931e+00\n2364  -3.89520613 -3.711046e+00\n2365  13.10479387  6.461226e+00\n2366  25.10479387  1.860833e+01\n2367  15.97979387  1.162888e+01\n2368   0.10479387 -2.692199e+00\n2369   1.10479387  8.086537e-01\n2370  -6.89520613  7.043654e+00\n2371 -14.89520613 -8.305699e-01\n2372  -9.89520613  2.762862e+00\n2373  -0.64520613 -2.955906e+00\n2374   2.10479387 -9.387506e+00\n2375           NA -7.583619e+00\n2376           NA  7.272820e+00\n2377  36.10479387  9.918654e+00\n2378           NA  1.421865e+01\n2379 -10.14520613  5.671552e+00\n2380  -2.89520613 -2.098815e+00\n2381  13.10479387  4.495646e+00\n2382           NA  4.149813e+00\n2383  -8.89520613  1.443654e+00\n2384  -4.89520613  4.972820e+00\n2385  -5.60949184  7.139487e+00\n2386   6.10479387  1.072699e+01\n2387           NA  8.557241e+00\n2388 -18.89520613  1.108740e+01\n2389  13.10479387  1.551032e+01\n2390  26.10479387  1.033949e+01\n2391   4.72979387  5.620169e+00\n2392   9.10479387  9.389487e+00\n2393  -0.89520613  2.487835e+00\n2394  -4.89520613 -1.945296e+00\n2395  -9.89520613  1.158871e+00\n2396  23.10479387  6.728436e+00\n2397  12.60479387  4.783146e+00\n2398   2.10479387  1.027282e+01\n2399  -0.89520613  1.146371e+00\n2400  32.10479387  4.983690e+00\n2401  17.10479387  6.405274e+00\n2402   0.10479387 -1.518105e+00\n2403  -2.27020613 -4.096895e-01\n2404  12.10479387  5.022820e+00\n2405  -7.39520613  8.122820e+00\n2406   8.60479387 -3.535513e+00\n2407   8.60479387 -3.862687e+00\n2408   4.60479387 -3.750977e+00\n2409   2.97979387 -5.822832e+00\n2410  -1.89520613 -3.941672e+00\n2411  -7.89520613  3.493654e+00\n2412   3.60479387  1.650905e+01\n2413  21.10479387  4.894870e-01\n2414  33.60479387  6.818529e+00\n2415  45.35479387  1.418880e+01\n2416  25.10479387  5.052843e+00\n2417  37.10479387  1.942666e+01\n2418  49.60479387  1.265274e+01\n2419  18.60479387  4.644870e-01\n2420   7.10479387  1.101323e+00\n2421   6.39050816  1.936058e+01\n2422  22.10479387  1.844818e+01\n2423  23.60479387 -6.523013e+00\n2424  -5.89520613 -4.070710e-01\n2425 -13.89520613  1.514487e+00\n2426  -7.39520613  2.822820e+00\n2427  21.35479387  1.093608e+01\n2428   6.10479387 -1.127056e-02\n2429  18.10479387  5.238729e+00\n2430  32.60479387  4.774336e+00\n2431  51.60479387  1.109077e+01\n2432 -19.89520613 -1.746434e-01\n2433  -7.60949184  5.561537e-01\n2434  44.10479387  6.356930e+00\n2435  -9.89520613 -3.934323e+00\n2436  -2.39520613 -2.576326e+00\n2437   2.10479387 -1.672334e+01\n2438   2.10479387 -7.385513e+00\n2439  -9.89520613 -6.398013e+00\n2440 -15.89520613 -7.102180e+00\n2441 -15.89520613 -7.014680e+00\n2442  31.10479387 -8.255968e+00\n2443   4.10479387 -7.881709e+00\n2444   6.10479387 -5.350763e+00\n2445   0.39050816 -6.784755e+00\n2446   6.60479387 -6.823013e+00\n2447  10.60479387  1.424365e+01\n2448   2.10479387  9.814668e+00\n2449 -10.89520613 -1.160508e+01\n2450 -18.89520613 -1.201468e+01\n2451  -4.02020613 -1.493611e+01\n2452   2.10479387 -8.827180e+00\n2453   5.10479387 -9.489680e+00\n2454  -7.89520613  1.101987e+00\n2455  10.60479387 -1.082301e+01\n2456  -2.39520613 -1.280864e+01\n2457  -0.64520613 -1.303831e+01\n2458  -9.39520613 -1.088135e+01\n2459  16.10479387 -1.121486e+01\n2460  -0.39520613 -9.662706e+00\n2461  -7.89520613 -5.234759e-01\n2462  -3.89520613 -1.420277e+01\n2463  -8.14520613 -1.213775e+01\n2464  -2.89520613 -1.584006e+01\n2465  11.10479387 -8.243096e+00\n2466   3.10479387 -3.505441e+00\n2467  -3.39520613 -6.843846e+00\n2468  -0.89520613  3.519870e-01\n2469 -10.39520613 -5.727930e+00\n2470  23.10479387 -1.218142e+01\n2471  11.10479387 -4.782666e-01\n2472  57.60479387  7.210502e+00\n2473  48.60479387  5.019197e+00\n2474 -26.39520613  5.320796e-01\n2475 -15.46663470 -9.839680e+00\n2476  53.10479387 -8.493846e+00\n2477  -9.89520613 -8.594571e+00\n2478   7.60479387 -7.964641e+00\n2479  35.60479387 -1.408533e+01\n2480  24.10479387 -5.173476e+00\n2481  -3.14520613 -1.030635e+01\n2482 -18.39520613 -1.823013e+00\n2483  36.60479387 -1.239185e+01\n2484   3.10479387 -1.287990e+01\n2485   5.10479387 -1.829116e+01\n2486  -6.89520613 -7.689498e+00\n2487   6.85479387 -1.349385e+01\n2488  11.10479387 -5.581346e+00\n2489  -1.89520613 -3.664680e+00\n2490  47.10479387 -1.025761e+01\n2491  21.10479387 -1.188673e+01\n2492   2.60479387 -1.121385e+01\n2493  13.22979387 -1.103736e+01\n2494   5.60479387 -8.463412e+00\n2495 -12.89520613 -8.241640e+00\n2496 -17.39520613 -7.623013e+00\n2497  14.10479387 -1.358950e+01\n2498  17.60479387 -1.631730e+01\n2499   2.53336530 -1.487827e+01\n2500   2.10479387 -1.226657e+01\n2501  -8.89520613 -1.577718e+01\n2502 -16.39520613 -7.085513e+00\n2503   2.60479387 -9.668846e+00\n2504  31.60479387 -1.570218e+01\n2505  13.53336530 -1.548391e+01\n2506  22.60479387 -1.613796e+01\n2507  33.10479387 -1.010218e+01\n2508  17.60479387 -9.404263e+00\n2509 -12.39520613 -7.685513e+00\n2510 -22.39520613 -1.280218e+01\n2511 -16.32377755 -1.477718e+01\n2512   8.10479387 -1.414486e+01\n2513  -9.89520613 -1.043732e+01\n2514   9.10479387 -1.490385e+01\n2515  -2.89520613 -1.093551e+01\n2516 -12.89520613 -1.063551e+01\n2517 -16.77020613 -8.502180e+00\n2518  14.60479387 -1.626051e+01\n2519  -6.89520613 -1.697930e+01\n2520  14.60479387 -1.247174e+01\n2521 -13.89520613 -7.035513e+00\n2522 -18.39520613 -1.424385e+01\n2523 -13.46663470 -1.181885e+01\n2524  -8.89520613 -9.077180e+00\n2525   1.10479387 -1.336051e+01\n2526   6.10479387 -1.573551e+01\n2527   1.10479387 -1.650656e+01\n2528   0.10479387 -1.228841e+01\n2529  10.10479387 -1.622718e+01\n2530 -14.39520613 -1.279021e+01\n2531 -10.39520613 -1.512718e+01\n2532 -12.39520613 -1.586885e+01\n2533   2.10479387 -1.666051e+01\n2534   3.60479387 -1.766127e+01\n2535   2.35479387 -1.677566e+01\n2536   0.60479387 -1.316468e+01\n2537 -16.39520613 -1.085218e+01\n2538 -14.89520613 -1.535218e+01\n2539  -9.39520613 -1.717510e+01\n2540 -10.39520613 -1.691487e+01\n2541 -26.32377755 -4.450459e+00\n2542 -15.89520613 -1.020635e+01\n2543 -17.89520613 -1.900843e+01\n2544 -17.39520613 -1.655010e+01\n2545 -19.39520613 -1.638343e+01\n2546 -12.39520613 -1.551885e+01\n2547 -13.52020613 -1.679964e+01\n2548  -8.89520613 -1.751024e+01\n2549  -2.39520613 -1.443551e+01\n2550 -15.89520613 -1.374801e+01\n2551  -7.89520613 -5.175096e+00\n2552   8.60479387 -8.883430e+00\n2553  10.10479387 -1.474801e+01\n2554  12.10479387 -1.658229e+01\n2555  25.10479387 -1.084474e+01\n2556  10.10479387 -1.337238e+01\n2557 -14.39520613 -1.594940e+01\n2558 -20.39520613 -9.824402e+00\n2559 -20.14520613 -3.748013e+00\n2560 -17.89520613 -1.025843e+01\n2561  -0.39520613 -8.595839e+00\n2562  -8.39520613 -1.215805e+01\n2563 -10.89520613 -1.585535e+01\n2564  -9.89520613 -1.399801e+01\n2565  -9.03806327 -1.262301e+01\n2566   1.60479387 -1.606051e+01\n2567  -6.89520613 -1.705010e+01\n2568  -5.89520613 -1.041468e+01\n2569  -0.39520613 -1.498443e+01\n2570   9.10479387 -1.444669e+01\n2571   2.22979387 -7.528357e+00\n2572   2.10479387 -7.425096e+00\n2573 -11.89520613 -1.593551e+01\n2574   5.10479387 -9.158339e+00\n2575  -6.89520613 -4.779263e+00\n2576  -9.39520613 -1.457093e+01\n2577   9.22979387 -1.667604e+01\n2578   4.10479387 -1.523760e+01\n2579  14.10479387 -1.589385e+01\n2580 -10.89520613 -1.347718e+01\n2581  -5.39520613 -1.461894e+01\n2582 -13.89520613 -1.087754e+01\n2583 -19.64520613 -1.178073e+00\n2584  -8.89520613 -1.724892e+01\n2585 -10.89520613 -1.702066e+01\n2586 -17.39520613 -1.198968e+01\n2587 -22.89520613 -2.688463e-01\n2588  -1.89520613 -1.214144e+01\n2589   0.47979387 -1.467162e+01\n2590   4.10479387 -1.012799e+01\n2591   1.60479387 -7.838922e+00\n2592   1.10479387 -8.675096e+00\n2593  -8.39520613 -9.050096e+00\n2594  -3.89520613 -6.133430e+00\n2595 -11.52020613 -4.862596e+00\n2596 -15.89520613 -1.857614e+00\n2597  -3.39520613 -1.000345e+01\n2598   1.10479387 -8.758430e+00\n2599   1.10479387 -8.748013e+00\n2600   3.10479387 -1.519593e+01\n2601  -0.02020613 -4.841763e+00\n2602  67.10479387 -1.168551e+01\n2603  -4.89520613 -7.824265e+00\n2604   2.10479387 -1.226930e+01\n2605   9.60479387 -1.410218e+01\n2606  16.10479387 -6.195930e+00\n2607  -7.64520613 -4.414680e+00\n2608 -11.89520613 -5.758430e+00\n2609 -11.89520613 -4.248013e+00\n2610 -15.89520613  2.728204e-01\n2611 -25.89520613 -6.310513e+00\n2612  -9.89520613 -7.316401e+00\n2613  -1.60949184 -9.592669e+00\n2614  -6.39520613 -9.091763e+00\n2615  -2.89520613 -7.039680e+00\n2616  -3.39520613 -9.581346e+00\n2617  -6.39520613  3.317698e+00\n2618  -1.89520613 -2.112596e+00\n2619  34.85479387 -1.078470e+01\n2620   5.10479387 -9.723556e+00\n2621   8.60479387 -8.449402e+00\n2622  -6.39520613 -7.852180e+00\n2623   1.10479387 -6.987596e+00\n2624  -7.89520613 -8.588084e-01\n2625  -9.89520613 -4.064589e+00\n2626  11.10479387 -9.362596e+00\n2627   2.10479387  3.731154e+00\n2628   8.60479387 -5.352180e+00\n2629   1.10479387 -1.121676e+01\n2630  16.60479387 -1.270635e+01\n2631 -15.18092041 -2.479774e+00\n2632 -13.39520613  2.585814e+00\n2633  -2.89520613 -7.637959e+00\n2634   4.10479387 -8.627542e+00\n2635  48.60479387 -9.373013e+00\n2636   9.10479387  1.408237e+00\n2637  -1.27020613 -5.612596e+00\n2638   5.10479387 -3.815357e-01\n2639  26.10479387  2.345737e+00\n2640  35.60479387  1.836226e+00\n2641  48.10479387  7.381969e+00\n2642  36.60479387 -5.029263e+00\n2643  -0.02020613 -6.435513e+00\n2644  -7.89520613 -8.580399e+00\n2645  -3.89520613 -5.227180e+00\n2646   8.60479387 -1.004186e+01\n2647   7.10479387 -3.941401e+00\n2648  31.10479387 -2.971971e+00\n2649  12.35479387  4.991570e+00\n2650 -12.39520613  5.439487e+00\n2651  97.10479387  6.440325e-01\n2652 -19.89520613  5.855037e+00\n2653 -20.39520613  7.406557e+00\n2654   1.60479387 -3.039780e+00\n2655  22.97979387  1.708939e+00\n2656  -1.89520613  4.805228e+00\n2657  -1.39520613  1.653007e+01\n2658 -12.89520613  4.846894e+00\n2659 -12.89520613 -4.992679e+00\n2660 -11.39520613 -6.648476e+00\n2661   3.10479387  2.645295e+00\n2662   2.10479387  9.707677e+00\n2663  -2.89520613  1.065245e+01\n2664 -10.39520613  7.393191e+00\n2665  26.60479387  1.395861e+01\n2666   6.60479387  1.603614e+01\n2667   8.85479387  1.377289e+00\n2668  -6.89520613  8.617462e+00\n2669  37.10479387  6.407885e+00\n2670  48.60479387  9.712635e+00\n2671  15.10479387  2.851356e+01\n2672  65.10479387  1.511521e+01\n2673  87.85479387  8.825759e+00\n2674  -9.89520613  1.549994e+00\n2675 -13.89520613 -9.809909e+00\n2676  -9.39520613 -3.423143e+00\n2677 -20.39520613  9.163389e-01\n2678  -7.89520613  6.050598e+00\n2679  -0.52020613  2.892788e+00\n2680  13.10479387  8.409208e+00\n2681  41.60479387  2.774500e-01\n2682  26.60479387  2.474712e+00\n2683 -18.39520613  8.285337e+00\n2684 -15.39520613  1.360783e+00\n2685  -7.03806327  8.295969e+00\n2686   5.60479387  6.568312e+00\n2687  29.60479387 -1.470444e+00\n2688  38.10479387  1.431032e+01\n2689  -5.39520613  5.964849e+00\n2690  25.10479387  2.087873e+00\n2691   9.35479387  6.269870e-01\n2692 -11.39520613  1.057699e+01\n2693 -20.39520613  6.698726e+00\n2694 -22.39520613  6.629704e+00\n2695 -16.39520613  4.788103e+00\n2696  -7.39520613  5.101392e+00\n2697  20.97979387  4.803502e+00\n2698  52.60479387  1.903532e+01\n2699  36.60479387  2.610199e+01\n2700  20.10479387  1.713628e+01\n2701  11.60479387  8.570737e+00\n2702   0.10479387  8.041150e+00\n2703 -18.02020613  4.162857e+00\n2704   0.10479387 -4.492811e-01\n2705   9.60479387  1.450615e+01\n2706  14.10479387  2.675615e+01\n2707  21.10479387  2.837588e+01\n2708  19.60479387  9.346552e+00\n2709  -5.02020613  5.373216e+00\n2710 -15.39520613  8.161177e+00\n2711  25.10479387  6.308509e+00\n2712   9.60479387  1.421449e+01\n2713  54.10479387  2.513532e+01\n2714  46.10479387  2.198699e+01\n2715  27.10479387  2.760139e+00\n2716  -4.89520613  1.776806e+00\n2717   3.60479387  8.801081e+00\n2718  19.10479387  4.391381e+00\n2719  19.60479387  5.539487e+00\n2720  -8.89520613  1.258949e+01\n2721   2.22979387  1.585815e+01\n2722  21.10479387  1.080724e+01\n2723  56.10479387  1.192047e+01\n2724  52.60479387  1.543478e+01\n2725  72.60479387  1.151032e+01\n2726  37.60479387  3.274293e+01\n2727   1.96193673  1.348115e+01\n2728  54.10479387  1.396702e+01\n2729   3.10479387  7.255940e+00\n2730  13.60479387  7.101987e+00\n2731   5.10479387  3.209233e+00\n2732  -6.39520613  1.314907e+01\n2733  -2.39520613  6.351987e+00\n2734   7.10479387  1.401050e+01\n2735  -0.39520613  5.224088e+00\n2736  17.60479387  8.661868e+00\n2737   3.10479387  7.204260e+00\n2738   7.60479387 -3.904354e+00\n2739  13.97979387  1.430782e+01\n2740 -18.39520613 -2.002180e+00\n2741   0.60479387  8.768191e+00\n2742   7.60479387  1.888856e+01\n2743 -21.89520613  1.623999e+01\n2744  18.10479387  6.571386e+00\n2745  13.97979387 -1.052180e+00\n2746   8.10479387  2.326691e+00\n2747 -11.89520613 -5.443846e+00\n2748 -20.39520613  7.311537e-01\n2749  34.60479387  5.293654e+00\n2750  16.60479387  1.575316e+01\n2751  -8.89520613 -2.790787e+00\n2752  22.60479387  9.660861e+00\n2753   7.10479387  3.073211e+00\n2754   4.60479387  9.368654e+00\n2755  -7.39520613  8.464487e+00\n2756   1.60479387  1.951229e+00\n2757   3.10479387  2.047277e+00\n2758  19.10479387  7.176608e+00\n2759   6.60479387 -1.575997e+00\n2760  -1.89520613 -6.328448e+00\n2761  -8.39520613  1.833006e+00\n2762 -13.89520613  3.347820e+00\n2763   1.97979387 -3.940767e+00\n2764   1.60479387 -3.685332e+00\n2765  -9.39520613 -5.745543e+00\n2766  -9.39520613 -6.130441e+00\n2767  40.10479387 -2.534835e+00\n2768  38.60479387  8.513561e+00\n2769  12.85479387  1.298949e+01\n2770  26.10479387  1.485706e+01\n2771   5.60479387  6.660320e+00\n2772  28.10479387  2.953453e+00\n2773  11.60479387  9.614073e-01\n2774 -14.89520613 -7.275255e-01\n2775   1.35479387  5.311537e-01\n2776  -7.89520613  1.165615e+01\n2777  17.60479387  9.713762e+00\n2778  -9.89520613 -4.096072e-01\n2779           NA -1.291165e+01\n2780  -4.39520613  4.046733e+00\n2781   7.35479387 -3.317545e+00\n2782   7.10479387  3.698746e+00\n2783  -0.89520613 -6.572131e-02\n2784  -1.89520613 -4.678468e+00\n2785  34.60479387  1.457758e-01\n2786  18.60479387  7.472820e+00\n2787  28.97979387  4.189487e+00\n2788  52.10479387  1.693333e+01\n2789  -2.89520613  1.139782e+01\n2790           NA -1.855130e-01\n2791  12.60479387 -6.239498e+00\n2792  27.60479387  2.385320e+00\n2793  25.53336530  1.425090e+01\n2794  58.10479387  8.292386e+00\n2795  31.60479387  2.954704e+00\n2796  72.60479387  1.431032e+01\n2797   2.10479387  2.103204e-01\n2798  -1.89520613 -1.354123e+00\n2799   5.67622245 -1.050013e+01\n2800  -5.89520613 -5.802864e+00\n2801 -19.39520613 -5.544888e+00\n2802  54.10479387 -1.178797e+01\n2803   3.60479387 -2.977180e+00\n2804 -10.89520613  2.793654e+00\n2805   5.72979387  5.949904e+00\n2806           NA -4.930984e+00\n2807  22.10479387 -6.664680e+00\n2808   8.10479387 -1.016071e+01\n2809  12.10479387  1.757195e+00\n2810   4.10479387  6.298862e+00\n2811  10.22979387  5.475945e+00\n2812  54.60479387  8.960320e+00\n2813  39.10479387  1.112693e+01\n2814  27.60479387  8.486588e+00\n2815  85.60479387  1.458295e+01\n2816  43.10479387  1.524678e+01\n2817   4.22979387 -1.016989e+01\n2818  -5.89520613 -7.899055e+00\n2819  27.60479387 -3.851233e+00\n2820  46.60479387  7.003566e-01\n2821  48.10479387  1.105853e+01\n2822  27.60479387  2.307594e+00\n2823  15.22979387 -7.734792e+00\n2824  -0.89520613 -8.086555e+00\n2825  -9.89520613 -3.268846e+00\n2826  -8.89520613 -1.138434e+01\n2827 -10.89520613 -1.390935e+01\n2828   0.10479387 -9.619843e+00\n2829   3.67622245 -1.311260e+01\n2830  29.10479387 -6.438463e-01\n2831 -18.39520613  1.137404e+00\n2832 -21.39520613  3.293654e+00\n2833 -15.89520613  3.195828e+00\n2834  -6.89520613 -1.028684e+01\n2835   6.22979387 -1.389350e+01\n2836   8.10479387  1.986362e+00\n2837  48.60479387  1.056970e+01\n2838 -13.89520613 -1.665947e+01\n2839 -17.89520613 -9.326138e+00\n2840           NA -9.784471e+00\n2841   2.47979387 -7.468513e+00\n2842  14.10479387 -1.121699e+01\n2843  19.60479387 -1.302926e+01\n2844  12.60479387 -5.861691e+00\n2845  11.10479387 -4.768846e+00\n2846   4.10479387  3.144870e-01\n2847   5.39050816  1.083282e+00\n2848  14.60479387 -9.867702e+00\n2849  -8.89520613 -8.146214e+00\n2850  -0.89520613 -1.245952e+01\n2851  70.10479387 -1.143370e+01\n2852  20.60479387 -5.320930e+00\n2853 -12.77020613 -8.482388e+00\n2854  -0.39520613 -7.906630e+00\n2855  -9.89520613 -1.116445e+01\n2856   1.10479387 -1.375390e+01\n2857  43.60479387 -1.332999e+01\n2858 159.10479387 -5.252089e+00\n2859   7.97979387 -2.675096e+00\n2860   5.10479387 -1.200843e+01\n2861 -26.39520613  6.366570e+00\n2862  -9.89520613 -1.184433e+01\n2863  25.10479387 -1.025496e+01\n2864  29.10479387 -1.111607e+01\n2865 -17.77020613 -1.754240e+01\n2866 -22.89520613 -1.194940e+01\n2867 -20.39520613 -7.643846e+00\n2868 -14.89520613 -1.285218e+01\n2869   4.60479387 -1.515774e+01\n2870 -23.89520613  3.851323e+00\n2871 -17.52020613  3.594790e+00\n2872  -3.39520613 -9.671624e+00\n2873  -4.89520613 -1.640774e+01\n2874  -9.89520613 -7.866069e+00\n2875           NA -1.386607e+01\n2876 -15.89520613 -1.032440e+01\n2877   4.85479387 -9.324402e+00\n2878   8.10479387 -1.766136e+01\n2879           NA -1.006293e+01\n2880  11.10479387 -1.764385e+01\n2881  -9.39520613 -1.279662e+01\n2882 -16.39520613 -4.607011e+00\n2883 -17.27020613 -8.910151e+00\n2884   4.10479387 -1.381051e+01\n2885 -16.89520613 -9.643846e+00\n2886 -16.89520613 -1.329662e+01\n2887 -13.39520613 -1.296624e+00\n2888 -11.89520613 -9.824402e+00\n2889 -19.27020613 -7.003146e+00\n2890  -8.89520613 -1.181051e+01\n2891   2.10479387 -1.651506e+01\n2892  41.60479387 -1.286607e+01\n2893  18.10479387 -1.079662e+01\n2894  -6.39520613 -1.508829e+01\n2895   9.10479387 -1.799107e+01\n2896  13.60479387 -1.928274e+01\n2897 -25.39520613 -1.470950e+01\n2898 -30.89520613 -8.014550e-01\n2899 -15.89520613 -5.616069e+00\n2900  -6.89520613 -1.778274e+01\n2901  -2.89520613 -1.614385e+01\n2902 -10.89520613 -1.126885e+01\n2903           NA -1.786607e+01\n2904  14.60479387 -1.894397e+01\n2905   2.10479387 -1.519907e+01\n2906   9.60479387 -1.907440e+01\n2907   7.10479387 -1.874107e+01\n2908  -2.39520613 -1.594940e+01\n2909 -14.89520613 -1.033829e+01\n2910  -7.39520613 -1.608406e+01\n2911  -0.39520613 -1.861804e+01\n2912  24.60479387 -1.851945e+01\n2913  35.97979387 -1.754662e+01\n2914 -17.89520613 -1.117344e+01\n2915 -11.89520613 -9.310513e+00\n2916  -6.89520613 -1.258829e+01\n2917   0.60479387 -1.710218e+01\n2918   6.10479387 -1.635218e+01\n2919 -17.75234898 -1.160943e+01\n2920 -19.89520613 -6.299574e-01\n2921   0.10479387 -1.371329e+01\n2922  -1.89520613 -1.817162e+01\n2923 -11.39520613 -4.733493e+00\n2924 -13.89520613 -6.657735e+00\n2925 -11.33965057 -1.023981e+01\n2926  -6.89520613 -1.043551e+01\n2927   1.60479387 -1.433889e+01\n2928  -1.89520613 -1.806293e+01\n2929  -9.39520613 -1.435218e+01\n2930   2.60479387 -1.435218e+01\n2931   3.88257165 -1.471329e+01\n2932  11.60479387 -1.455206e+01\n2933  34.10479387 -1.891860e+01\n2934  -4.89520613 -1.822537e+01\n2935 -12.89520613 -1.857259e+01\n2936 -23.39520613 -1.781051e+01\n2937 -24.03806327 -1.014385e+01\n2938 -17.89520613 -8.116069e+00\n2939  -5.89520613 -1.846208e+01\n2940  -9.39520613 -1.553274e+01\n2941 -21.89520613 -1.332479e+01\n2942 -17.39520613 -1.074046e+01\n2943 -13.67298390 -1.049107e+01\n2944 -14.89520613 -1.096329e+01\n2945  -9.39520613 -1.568551e+01\n2946  11.10479387 -1.662112e+01\n2947  32.60479387 -1.776885e+01\n2948  24.10479387 -1.621088e+01\n2949  29.21590499 -1.533467e+01\n2950 -16.89520613  2.925598e+00\n2951 -24.89520613  2.814487e+00\n2952  13.10479387 -1.257819e+01\n2953  -1.89520613 -9.879957e+00\n2954 -14.39520613 -9.667397e+00\n2955 -17.45076168 -1.998013e+00\n2956  -2.89520613 -1.140924e+01\n2957 -16.89520613 -7.480130e-01\n2958 -16.39520613 -1.039680e+00\n2959 -11.89520613 -1.199801e+01\n2960   4.60479387 -9.932796e+00\n2961  -8.33965057 -6.310513e+00\n2962   0.60479387 -1.475737e+01\n2963   4.10479387 -7.143846e+00\n2964  35.60479387  7.033759e-01\n2965 -11.39520613 -7.713291e+00\n2966   3.10479387 -1.051885e+01\n2967   5.39050816 -1.325375e+01\n2968  -8.89520613 -1.571329e+01\n2969   2.60479387 -1.196148e+01\n2970  21.10479387 -1.523097e+01\n2971   8.60479387 -1.031051e+01\n2972  -9.39520613 -5.768846e+00\n2973  -0.89520613 -9.532735e+00\n2974 -16.89520613 -1.073194e+00\n2975   7.10479387 -1.583829e+01\n2976   9.10479387 -6.189740e+00\n2977 -18.39520613 -4.129957e+00\n2978 -12.89520613 -7.366069e+00\n2979 -10.56187279 -6.338291e+00\n2980 -17.39520613 -4.283943e+00\n2981 -15.39520613 -3.660260e+00\n2982 -12.39520613 -7.663774e+00\n2983  -7.89520613 -1.231051e+01\n2984  11.60479387 -1.169819e+01\n2985   7.21590499 -9.157735e+00\n2986   5.10479387 -1.486607e+01\n2987  -4.39520613 -8.546624e+00\n2988 -14.89520613 -1.172718e+01\n2989 -11.39520613 -1.796624e+00\n2990   2.60479387 -9.512204e+00\n2991   0.43812721 -5.963291e+00\n2992  -3.39520613  8.161709e+00\n2993  -2.39520613  9.870043e+00\n2994  22.10479387 -1.874523e+00\n2995  33.60479387 -3.935513e+00\n2996  31.10479387 -1.293605e+00\n2997  10.32701610 -5.965706e+00\n2998 -12.39520613  2.313224e+00\n2999  -2.39520613 -6.051298e-02\n3000  22.60479387 -8.796624e+00\n3001   0.60479387 -8.642035e+00\n3002 -11.89520613 -5.838291e+00\n3003 -19.11742835 -3.016746e-01\n3004 -23.89520613  1.783690e+00\n3005 -17.39520613  2.482965e+00\n3006  -9.39520613  2.856154e+00\n3007  -6.39520613  1.953376e+00\n3008 -11.89520613 -8.199402e+00\n3009 -12.67298390 -1.830387e+01\n3010  -5.89520613 -1.496329e+01\n3011 -12.39520613 -1.264385e+01\n3012  -8.39520613 -1.276281e+01\n3013 -10.89520613 -6.274799e+00\n3014 -15.89520613  2.314487e+00\n3015  -9.56187279  1.496682e+00\n3016 -10.89520613  2.824904e+00\n3017   3.60479387 -3.800096e+00\n3018   8.10479387  3.861588e+00\n3019   3.60479387  2.516480e+00\n3020   6.10479387 -5.628221e+00\n3021 -20.78409501  1.145734e+01\n3022 -17.89520613 -1.236691e+00\n3023   2.60479387 -8.970903e+00\n3024 -19.89520613 -1.389619e+00\n3025 -12.89520613  1.218445e+01\n3026 -21.39520613  1.352282e+01\n3027  -7.78409501  9.351987e+00\n3028   3.10479387 -1.335513e+00\n3029  -0.89520613  8.339487e+00\n3030  13.60479387  7.680791e+00\n3031 -16.39520613  5.055973e+00\n3032  -6.39520613 -2.155375e+00\n3033  -4.67298390 -8.819571e+00\n3034 -14.39520613  2.756154e+00\n3035 -14.89520613  2.210320e+00\n3036  10.60479387  8.569042e-01\n3037  -3.89520613  6.733803e-01\n3038   0.10479387 -9.282186e+00\n3039 -15.56187279 -2.527231e-01\n3040  -2.39520613 -2.086600e+00\n3041  -5.39520613 -2.902180e+00\n3042 -26.39520613  6.256154e+00\n3043 -20.89520613  3.139616e+00\n3044 -17.89520613  3.010320e+00\n3045  -1.11742835 -1.068846e+00\n3046   1.60479387 -3.921136e+00\n3047  14.60479387  1.401625e+00\n3048   9.10479387  2.081154e+00\n3049  10.10479387  1.786865e+01\n3050   7.60479387  6.128617e+00\n3051   9.88257165  1.929342e+00\n3052  -1.89520613 -9.054172e+00\n3053  -6.89520613 -1.015223e+00\n3054   1.10479387  6.499451e+00\n3055  -1.39520613  4.418654e+00\n3056 -12.89520613  1.017282e+01\n3057  -4.11742835  2.172820e+00\n3058  13.60479387  4.723957e+00\n3059 -18.89520613  2.486770e+00\n3060 -20.39520613  3.826030e-01\n3061   2.60479387  1.509596e+00\n3062   5.60479387  7.518654e+00\n3063  -4.67298390  8.276987e+00\n3064  33.10479387  6.672820e+00\n3065   4.10479387  2.219559e+00\n3066 -23.39520613  3.174632e+00\n3067 -18.89520613 -1.557071e+00\n3068 -12.39520613  3.119378e+00\n3069  -4.02020613  3.143654e+00\n3070 -12.89520613  8.531154e+00\n3071 -17.39520613  4.343654e+00\n3072  13.10479387  1.159294e+00\n3073  47.10479387  8.268779e+00\n3074  31.60479387  1.054655e+01\n3075  31.10479387 -4.518665e+00\n3076   7.60479387  1.540615e+01\n3077   0.10479387  1.406938e+01\n3078  12.60479387  1.424474e+01\n3079  38.60479387  1.003511e+01\n3080   2.60479387  1.447756e+01\n3081 -15.56187279  9.761142e-01\n3082   8.10479387 -2.652723e+00\n3083   1.10479387  5.764487e+00\n3084 -16.39520613  2.022820e+00\n3085  -9.89520613  1.610502e+00\n3086  24.10479387 -2.784064e+00\n3087  27.35479387  1.494528e+01\n3088  45.60479387  2.368278e+01\n3089  54.60479387  2.356539e+01\n3090  43.60479387  2.621032e+01\n3091  23.60479387  2.862282e+01\n3092  27.10479387  2.556952e+01\n3093  24.21590499  2.934474e+01\n3094  19.10479387  1.855561e+01\n3095  32.10479387  2.842224e+01\n3096  31.10479387  4.393949e+01\n3097  41.60479387  4.715199e+01\n3098  23.10479387  2.851865e+01\n3099  13.21590499  1.769746e+01\n3100   6.60479387  6.761045e+00\n3101  20.60479387  6.449994e+00\n3102   9.10479387  9.043950e+00\n3103  12.10479387  1.057075e+01\n3104 -15.89520613  8.151987e+00\n3105  -6.22853946  5.493654e+00\n3106  17.60479387  2.495549e+01\n3107   9.10479387  9.710320e+00\n3108  24.60479387  1.164673e+01\n3109  -6.39520613  1.337391e+01\n3110   8.10479387  7.876987e+00\n3111   2.85479387  8.135320e+00\n3112   3.10479387  2.186449e+01\n3113  18.60479387  7.489125e+00\n3114  22.10479387  2.020161e+01\n3115  43.60479387  2.587282e+01\n3116  58.60479387  3.911401e+01\n3117  20.60479387  3.256846e+01\n3118  17.10479387  3.111532e+01\n3119  -4.89520613  2.361032e+01\n3120  -0.89520613  8.531154e+00\n3121   5.10479387  5.279161e+00\n3122  10.10479387  6.481500e+00\n3123   7.43812721 -8.951144e-01\n3124   0.10479387  6.248907e+00\n3125   5.10479387  2.893654e+00\n3126 -10.89520613  9.814487e+00\n3127  10.10479387  8.205973e+00\n3128   9.60479387  3.051987e+00\n3129  -1.11742835  1.698908e+01\n3130   4.10479387  2.163478e+01\n3131  -3.89520613  1.378224e+01\n3132   6.60479387  9.860320e+00\n3133   9.60479387  1.842774e+01\n3134  48.10479387  2.147282e+01\n3135 -10.11742835  1.074927e+01\n3136  -5.89520613  3.968110e+00\n3137   0.10479387 -1.170472e+01\n3138   5.10479387 -1.131333e+01\n3139   2.10479387  6.666339e+00\n3140  -7.89520613  1.377745e+01\n3141   3.77146054  4.003899e+00\n3142  23.60479387  8.875406e+00\n3143  15.10479387 -1.453732e+01\n3144   4.10479387 -1.786238e+00\n3145  21.60479387  7.530429e+00\n3146  24.60479387  2.395881e+01\n3147  14.32701610  1.976356e+01\n3148  21.10479387  1.163692e+01\n3149  -3.89520613  6.832422e+00\n3150  11.10479387 -4.021860e+00\n3151   0.60479387  7.318291e+00\n3152  -0.39520613  1.665092e+01\n3153  -1.67298390  3.340128e+00\n3154 -20.89520613  6.756154e+00\n3155  -1.89520613  2.645926e+00\n3156  -8.39520613 -2.525420e-01\n3157  13.60479387  3.851392e-01\n3158  12.10479387  4.544948e+00\n3159  18.10479387  1.258224e+01\n3160  40.10479387  2.298949e+01\n3161  51.10479387  2.213949e+01\n3162  24.60479387 -4.554535e+00\n3163  14.10479387 -1.498013e+00\n3164  52.60479387  1.976141e+01\n3165  14.43812721  1.597427e+01\n3166 -11.39520613  1.145745e+00\n3167   1.60479387  5.394870e-01\n3168   0.10479387  1.477699e+01\n3169  26.60479387  2.761032e+01\n3170  56.10479387  9.143654e+00\n3171  31.24765102  1.690597e+01\n3172 -11.89520613 -2.845279e+00\n3173 -25.39520613  5.348364e+00\n3174 -20.89520613  3.872820e+00\n3175 -24.89520613  4.976987e+00\n3176  -6.39520613 -2.690404e+00\n3177  21.77146054 -2.994933e+00\n3178  12.10479387  5.835683e+00\n3179  -7.39520613  6.410680e-01\n3180   1.60479387 -4.463049e+00\n3181   6.60479387  6.835320e+00\n3182 -24.89520613 -1.698013e+00\n3183  -6.00631724 -9.948412e+00\n3184  -2.39520613 -9.381568e+00\n3185 -12.39520613 -1.073765e+01\n3186 -21.89520613 -8.819772e+00\n3187 -18.89520613 -1.232314e+01\n3188  -3.39520613 -7.278106e+00\n3189 -11.56187279 -2.407735e+00\n3190  13.60479387 -7.819772e+00\n3191  25.60479387 -5.837486e+00\n3192  20.10479387 -1.595738e+00\n3193  53.60479387  2.212635e+00\n3194  40.10479387  1.004275e+01\n3195  43.35479387  2.843486e+01\n3196   3.60479387  6.606154e+00\n3197  19.10479387 -7.444772e+00\n3198   0.60479387 -8.157936e+00\n3199   3.10479387 -6.060916e+00\n3200 -10.39520613 -3.153106e+00\n3201  -7.77020613 -1.373785e+01\n3202 -23.39520613 -1.371051e+01\n3203 -11.39520613 -9.537365e+00\n3204   5.10479387 -6.555883e+00\n3205  29.10479387 -1.397577e+01\n3206  53.10479387 -7.817155e+00\n3207  24.66034943  4.953577e+00\n3208  47.60479387  9.906476e+00\n3209 -13.39520613 -9.227180e+00\n3210 -21.89520613 -6.134587e+00\n3211  -0.89520613 -1.181051e+01\n3212  44.60479387 -5.487848e+00\n3213  -0.11742835 -7.365062e+00\n3214  34.10479387  5.274028e+00\n3215 -20.39520613 -1.562573e+01\n3216 -22.39520613 -1.481977e+01\n3217  -7.89520613 -9.764217e+00\n3218   6.10479387  6.518191e+00\n3219 -17.22853946 -9.209323e+00\n3220  12.10479387 -1.222497e+01\n3221   5.10479387 -1.246852e+01\n3222 -12.89520613 -7.873150e+00\n3223 -19.89520613 -1.237070e+01\n3224 -21.39520613 -9.810513e+00\n3225 -20.78409501 -1.087553e+01\n3226 -19.39520613 -1.307641e+01\n3227  -5.39520613 -1.607440e+01\n3228 -21.89520613 -1.541196e+01\n3229 -17.39520613 -9.393846e+00\n3230 -21.39520613 -1.061607e+01\n3231 -15.45076168 -1.415774e+01\n3232   2.10479387 -1.481051e+01\n3233  -8.89520613 -1.242162e+01\n3234 -15.39520613 -9.438532e+00\n3235   8.10479387 -1.522718e+01\n3236  -4.89520613 -1.283829e+01\n3237 -23.33965057 -5.616069e+00\n3238 -16.39520613 -1.467162e+01\n3239  -2.89520613 -1.769940e+01\n3240   0.10479387 -1.548926e+01\n3241  -6.89520613 -1.451885e+01\n3242  -0.39520613 -1.653757e+01\n3243   1.10479387 -1.686607e+01\n3244  -3.89520613 -1.831051e+01\n3245   0.60479387 -1.568551e+01\n3246  10.10479387 -1.006051e+01\n3247  -7.39520613 -8.685513e+00\n3248   9.60479387 -1.717162e+01\n3249 -17.89520613 -1.025496e+01\n3250   1.10479387 -1.326885e+01\n3251  11.10479387 -1.400496e+01\n3252   8.10479387 -1.729662e+01\n3253  -8.89520613 -1.286607e+01\n3254 -10.89520613 -1.278938e+01\n3255  10.32701610 -1.732995e+01\n3256   1.60479387 -1.659312e+01\n3257  -7.39520613 -1.409334e+01\n3258  -1.39520613 -1.065774e+01\n3259  -0.89520613 -1.022718e+01\n3260 -13.39520613 -8.866069e+00\n3261  -7.45076168 -9.532131e+00\n3262  -5.39520613 -1.179300e+01\n3263  -4.89520613 -1.221329e+01\n3264   1.10479387 -1.329662e+01\n3265  41.10479387  7.172648e-01\n3266   3.60479387 -2.491069e+00\n3267   2.66034943 -1.365774e+01\n3268  -1.39520613 -1.407984e+01\n3269   3.60479387 -1.464385e+01\n3270  -0.39520613 -1.796571e+01\n3271   7.60479387 -1.722718e+01\n3272   1.60479387 -1.361607e+01\n3273  -4.45076168 -1.122718e+01\n3274 -17.89520613 -7.991069e+00\n3275 -22.89520613  5.111588e+00\n3276  -9.39520613 -1.219940e+01\n3277 -14.89520613 -1.217162e+01\n3278 -14.89520613 -1.415774e+01\n3279 -11.11742835 -1.371329e+01\n3280  -9.89520613 -9.310513e+00\n3281 -11.89520613 -1.227180e+00\n3282  -7.89520613 -1.612573e+01\n3283  -3.39520613 -1.514083e+01\n3284   7.10479387 -1.644638e+01\n3285   5.10479387 -1.514385e+01\n3286  -2.39520613 -1.747718e+01\n3287   1.10479387 -1.751885e+01\n3288  -3.89520613 -1.286607e+01\n3289 -25.89520613  2.564487e+00\n3290 -15.89520613 -1.988653e+00\n3291  -2.97853946 -1.661365e+01\n3292   6.60479387 -1.544940e+01\n3293 -13.39520613 -8.032735e+00\n3294 -13.89520613 -1.018846e+00\n3295  10.10479387 -1.272718e+01\n3296   3.60479387 -1.390472e+01\n3297  -0.47853946 -1.409795e+01\n3298  -6.39520613 -1.383234e+01\n3299  -2.39520613 -1.489385e+01\n3300   7.10479387 -1.781051e+01\n3301 -14.89520613 -8.831346e+00\n3302 -22.39520613  6.478204e-01\n3303   2.52146054 -1.826885e+01\n3304   1.10479387 -1.468370e+01\n3305 -16.39520613 -6.254957e+00\n3306  -8.89520613 -4.272470e+00\n3307  -9.89520613 -1.474107e+01\n3308  -5.89520613 -1.454662e+01\n3309  -6.27982151 -1.286607e+01\n3310  -5.89520613 -1.573624e+01\n3311 -12.89520613 -7.402300e+00\n3312   1.10479387 -1.534373e+01\n3313  -6.89520613 -1.356051e+01\n3314   4.60479387  6.617092e-01\n3315 -11.27982151 -1.047718e+01\n3316  12.10479387 -4.504957e+00\n3317   8.60479387 -1.013465e+01\n3318   0.60479387 -1.130294e+01\n3319  -0.89520613 -9.535755e+00\n3320   1.10479387 -9.879957e+00\n3321  -8.27982151 -1.169940e+01\n3322 -12.89520613 -9.852180e+00\n3323  17.10479387 -1.303274e+01\n3324  24.10479387 -1.400315e+01\n3325   3.10479387 -1.464385e+01\n3326  -5.89520613 -1.680774e+01\n3327  -5.81828305 -1.549077e+01\n3328  -6.89520613 -5.081346e+00\n3329 -18.89520613  2.668654e+00\n3330 -16.89520613 -4.873013e+00\n3331  -4.89520613 -1.531683e+01\n3332 -12.89520613 -1.281178e+01\n3333 -11.74135997 -9.477180e+00\n3334 -10.89520613 -6.046624e+00\n3335  -5.89520613 -8.463291e+00\n3336  -1.89520613 -8.991069e+00\n3337   1.10479387 -1.442162e+01\n3338   9.10479387 -1.646873e+01\n3339 -14.04905228 -5.071986e+00\n3340   1.10479387 -1.244699e+01\n3341   8.10479387 -1.549107e+01\n3342 -14.89520613 -4.546624e+00\n3343  -2.89520613 -1.212996e+01\n3344  16.60479387 -1.474107e+01\n3345  -1.97853946 -1.491257e+01\n3346  -8.89520613 -2.036358e+00\n3347 -13.89520613 -3.484755e+00\n3348   2.10479387 -6.156473e+00\n3349   5.10479387  3.328376e+00\n3350 -11.89520613 -3.324402e+00\n3351  -3.97212920 -1.415774e+01\n3352 -10.39520613 -7.754957e+00\n3353 -16.89520613  5.675598e+00\n3354 -15.89520613 -4.805462e+00\n3355  -2.89520613 -4.243484e+00\n3356  -4.89520613 -6.935513e+00\n3357   0.02146054 -7.081346e+00\n3358  -2.89520613 -1.016468e+01\n3359   6.10479387 -8.629957e+00\n3360  25.10479387 -1.177368e+01\n3361  20.10479387 -2.546624e+00\n3362  -1.89520613 -2.963291e+00\n3363  -9.20289843  1.217265e+00\n3364   2.10479387 -1.317162e+01\n3365  20.10479387 -9.893846e+00\n3366  -7.89520613  1.304365e+01\n3367 -10.89520613  1.462336e+01\n3368 -15.89520613  1.200874e+00\n3369  -5.16793340  6.242696e-01\n3370  23.10479387 -1.518846e+00\n3371  -4.89520613  1.178115e+01\n3372  -0.89520613  4.259487e+00\n3373  -9.39520613  9.335320e+00\n3374  -7.89520613  5.158237e+00\n3375   0.55933933  4.012805e-02\n3376  -1.89520613  7.731154e+00\n3377  11.10479387 -4.404263e+00\n3378  -9.89520613  1.052282e+01\n3379 -18.89520613  1.002342e+01\n3380  18.10479387  1.195851e-01\n3381   8.48940926 -2.461077e+00\n3382 -10.89520613  1.697941e+00\n3383 -25.89520613  8.254302e+00\n3384 -24.89520613  7.680228e+00\n3385 -24.89520613  5.689487e+00\n3386 -16.39520613 -1.910956e+00\n3387  -7.04905228 -5.165922e+00\n3388  24.10479387 -2.175912e+00\n3389  94.10479387  1.417735e+01\n3390   6.10479387  6.271682e-01\n3391 -18.89520613  9.782035e-02\n3392 -18.89520613  1.380199e+01\n3393 -13.04905228  1.720957e-01\n3394 -12.89520613  2.587675e+00\n3395  -1.89520613  1.072639e+00\n3396  20.10479387  1.102789e+01\n3397   1.10479387  2.940030e+00\n3398  -8.89520613 -4.243846e+00\n3399  -8.31187279  2.026987e+00\n3400  -6.89520613 -1.229074e+00\n3401 -17.89520613  2.864849e+00\n3402  -5.89520613  5.856827e-01\n3403  18.10479387  6.120054e+00\n3404  11.10479387 -2.314861e+00\n3405  -5.04905228  4.301836e-03\n3406   3.60479387 -2.271796e-01\n3407 -19.89520613  1.586770e+00\n3408 -13.89520613  5.368291e+00\n3409   7.10479387  4.566480e+00\n3410   4.10479387  3.046915e+00\n3411   0.64325541  5.556154e+00\n3412 -16.89520613  6.810320e+00\n3413 -13.89520613  2.535320e+00\n3414 -16.89520613  9.519870e-01\n3415   3.10479387 -4.868122e+00\n3416  23.10479387 -1.421953e+01\n3417   2.27146054 -1.537392e+01\n3418 -17.89520613 -3.783013e+00\n3419 -25.89520613  4.189487e+00\n3420 -18.89520613  8.922820e+00\n3421 -12.89520613 -3.756725e+00\n3422  -5.89520613  2.425175e+00\n3423  16.48940926 -2.161600e+00\n3424   4.10479387 -1.287978e+01\n3425   4.10479387  7.589487e+00\n3426   4.10479387  1.861449e+01\n3427  52.10479387  1.434782e+01\n3428  -5.89520613  3.239487e+00\n3429  -7.43366766  4.266299e+00\n3430  12.10479387  4.596272e+00\n3431  -6.89520613 -3.982186e+00\n3432 -16.89520613  1.801987e+00\n3433 -16.89520613  8.572820e+00\n3434 -15.89520613  1.773115e+01\n3435 -10.58751382  1.292699e+01\n3436  -9.89520613  8.808509e+00\n3437 -14.89520613  1.001648e+01\n3438 -15.89520613  3.439125e+00\n3439   7.10479387  1.124601e+01\n3440  18.10479387  1.194782e+01\n3441 -15.04905228  2.168115e+01\n3442 -13.89520613  2.131154e+00\n3443 -10.89520613 -1.320671e+01\n3444   4.10479387  1.074311e+01\n3445  -2.89520613  1.421009e+00\n3446  -9.89520613 -2.564680e+00\n3447  -5.27982151  1.293654e+00\n3448 -16.89520613  4.314487e+00\n3449  -4.89520613  2.247096e+00\n3450 -11.89520613  8.984596e+00\n3451  19.10479387  4.187132e+00\n3452  21.60479387  1.279672e+01\n3453  10.02787080  1.006845e+01\n3454  12.10479387  1.456032e+01\n3455  30.10479387  1.936449e+01\n3456  23.10479387  1.408284e+01\n3457  -2.89520613  4.412452e+00\n3458  -1.39520613  4.993346e-01\n3459  13.68812721  8.779161e+00\n3460  37.10479387  7.873644e+00\n3461  -5.89520613  1.365199e+01\n3462  -5.89520613  8.814487e+00\n3463  -2.89520613  2.976625e+00\n3464  -9.89520613  5.451262e+00\n3465  13.41248618  1.009329e+01\n3466  29.10479387  2.645470e+01\n3467  42.10479387  2.029583e+01\n3468  39.10479387  3.896032e+01\n3469   2.10479387  1.858115e+01\n3470  -2.89520613  1.101811e+01\n3471   4.60479387  1.142952e+01\n3472 -20.89520613  4.960320e+00\n3473  32.10479387  4.831154e+00\n3474  35.10479387  1.137699e+01\n3475  26.10479387  3.558949e+01\n3476  15.10479387  3.323532e+01\n3477   8.18171695  7.122820e+00\n3478 -14.89520613 -9.213825e-01\n3479  -9.89520613 -1.331579e-01\n3480  11.10479387  1.580507e+01\n3481  17.10479387  1.375688e+01\n3482  -2.89520613  1.035199e+01\n3483 -11.97212920 -2.289680e+00\n3484   3.10479387  2.972820e+00\n3485   3.10479387  6.052349e+00\n3486  -1.89520613 -5.401933e-01\n3487  -5.89520613  5.018835e+00\n3488 -16.89520613  1.111709e+00\n3489 -18.22853946  4.851987e+00\n3490 -14.89520613  2.339487e+00\n3491   1.10479387  3.096733e+00\n3492   1.10479387 -1.540520e+00\n3493  -8.89520613 -2.274643e+00\n3494  -8.89520613 -4.057977e+00\n3495  -9.31187279 -2.736600e+00\n3496 -12.89520613  1.519870e-01\n3497  -7.89520613  4.881154e+00\n3498   0.10479387  2.751987e+00\n3499  -8.39520613 -3.310513e+00\n3500  -5.89520613 -7.105441e+00\n3501  -5.12597536 -3.016632e+00\n3502  -4.89520613 -7.548293e-01\n3503   7.10479387  3.120043e+00\n3504  11.10479387  2.009226e+01\n3505  35.10479387  1.941255e+01\n3506  13.10479387  1.030523e+01\n3507  11.18171695  8.474310e+00\n3508  -9.89520613  5.370244e+00\n3509  -8.89520613 -1.715395e+00\n3510 -21.89520613  2.679423e+00\n3511  -3.89520613 -2.477180e+00\n3512  12.10479387  2.944778e+00\n3513  10.41248618  6.403859e+00\n3514  11.10479387  3.144874e+00\n3515  -6.89520613 -4.392236e+00\n3516 -14.89520613 -5.413975e+00\n3517  -4.89520613  1.592265e+00\n3518   0.10479387  6.490413e+00\n3519   8.18171695  5.706798e+00\n3520  14.10479387  6.319186e-01\n3521  24.10479387  1.298292e+00\n3522  25.10479387  1.133127e+01\n3523 -16.89520613 -4.609200e+00\n3524 -11.89520613  2.272820e+00\n3525   0.02787080  7.324904e+00\n3526  12.10479387  1.312246e+01\n3527  -9.89520613  6.078577e+00\n3528   5.10479387  1.916138e+00\n3529 -13.89520613  1.249122e+01\n3530 -10.89520613  1.033824e+01\n3531  14.18171695  1.330060e+01\n3532  19.10479387  1.782838e+01\n3533  19.10479387  2.346726e+01\n3534  49.10479387  1.787910e+01\n3535  78.10479387  1.880603e+01\n3536  34.10479387  2.565185e+01\n3537  19.56633234  1.914500e+01\n3538  17.10479387  2.504302e+00\n3539  28.10479387  1.554070e+00\n3540  -1.89520613  1.408054e+00\n3541  14.10479387 -3.029515e+00\n3542   5.10479387 -1.018692e+01\n3543 -17.07702431 -1.085681e+01\n3544 -11.89520613 -9.424845e+00\n3545 -14.89520613 -1.304662e+01\n3546 -12.89520613 -8.815143e+00\n3547 -16.89520613 -5.595537e+00\n3548 -22.89520613 -1.491471e+00\n3549 -16.58751382 -7.710473e+00\n3550  -4.89520613 -2.204251e+00\n3551   6.10479387 -9.761197e+00\n3552   8.10479387 -9.504957e+00\n3553  -5.89520613 -3.301656e+00\n3554   9.10479387 -1.476261e+01\n3555  -9.66443689 -5.738836e+00\n3556  12.10479387 -7.087888e+00\n3557  -5.89520613 -4.623421e+00\n3558 -19.89520613 -1.291082e+01\n3559 -16.89520613 -1.334623e+01\n3560 -13.89520613 -8.268846e+00\n3561  -6.43366766 -5.566465e+00\n3562  10.10479387  8.040704e-01\n3563  -9.89520613 -5.518846e+00\n3564 -21.89520613 -9.250963e-01\n3565  -8.89520613 -8.633430e+00\n3566  -8.89520613 -1.140426e+01\n3567   4.33556311  5.642612e+00\n3568 -19.89520613 -7.044888e+00\n3569 -24.89520613 -1.236544e+01\n3570  -1.89520613 -1.498239e+01\n3571 -20.89520613 -1.271110e+01\n3572 -10.89520613 -1.235739e+01\n3573  -4.06187279 -4.117805e+00\n3574   6.10479387  4.621779e+00\n3575 -15.89520613 -2.112596e+00\n3576  14.10479387 -7.039453e+00\n3577  -0.89520613 -1.362330e+01\n3578   5.10479387  2.255157e+00\n3579 -13.74135997 -1.016128e+01\n3580  -9.89520613 -1.253075e+01\n3581   1.10479387 -1.319147e+01\n3582   0.10479387 -1.305743e+01\n3583  -0.89520613 -1.448821e+01\n3584 -18.39520613 -1.462097e+01\n3585  -7.74135997 -1.334493e+01\n3586  -1.89520613 -7.500277e+00\n3587   0.10479387 -1.058655e+01\n3588 -12.89520613 -7.274055e+00\n3589   4.10479387 -1.336373e+01\n3590  -6.89520613 -1.309969e+01\n3591 -15.51059074 -5.487279e+00\n3592  -3.89520613 -6.759109e+00\n3593  -8.89520613 -1.078968e+01\n3594 -15.89520613 -1.083633e+01\n3595  -3.89520613 -1.292510e+01\n3596   3.10479387 -1.727926e+01\n3597   0.79710157 -1.763343e+01\n3598  -1.89520613 -1.619755e+01\n3599 -13.89520613 -1.675496e+01\n3600  -1.89520613 -1.670484e+01\n3601 -20.39520613 -9.504957e+00\n3602 -18.89520613 -6.879957e+00\n3603 -20.51059074 -9.463291e+00\n3604 -13.89520613 -1.207440e+01\n3605  -5.89520613 -1.604662e+01\n3606 -10.89520613 -8.606407e+00\n3607  -3.89520613 -1.307440e+01\n3608  -2.89520613 -1.246329e+01\n3609 -19.81187279 -9.254957e+00\n3610 -12.89520613 -1.526885e+01\n3611 -14.89520613 -1.595725e+01\n3612 -10.89520613 -1.046329e+01\n3613 -16.39520613 -9.907735e+00\n3614  -2.89520613 -1.450496e+01\n3615  -5.31187279 -1.761607e+01\n3616 -15.89520613 -1.328274e+01\n3617 -22.89520613 -5.340706e+00\n3618  -7.89520613 -1.169940e+01\n3619   2.10479387 -1.695182e+01\n3620  -5.89520613 -1.522718e+01\n3621  -7.31187279 -1.658829e+01\n3622 -17.89520613 -1.590774e+01\n3623 -16.89520613 -1.090774e+01\n3624  -5.89520613 -1.167162e+01\n3625  -6.89520613 -1.730925e+01\n3626   1.10479387 -1.754723e+01\n3627 -11.04905228 -1.723926e+01\n3628  -7.89520613 -1.753334e+01\n3629  -8.39520613 -1.235218e+01\n3630 -14.89520613 -5.477180e+00\n3631 -11.89520613 -1.396329e+01\n3632   5.10479387 -1.754662e+01\n3633 -15.12597536 -1.437452e+01\n3634 -11.89520613 -1.615774e+01\n3635  -5.89520613 -1.728213e+01\n3636  -5.89520613 -1.685218e+01\n3637 -16.89520613 -1.303274e+01\n3638  -4.89520613 -1.101885e+01\n3639  -7.04905228 -1.513962e+01\n3640  -0.89520613 -1.019940e+01\n3641   7.10479387 -1.231051e+01\n3642  -3.89520613 -1.374486e+01\n3643   3.10479387 -1.243551e+01\n3644 -13.89520613 -1.646329e+01\n3645 -16.31187279 -1.736607e+01\n3646  -9.89520613 -3.748315e+00\n3647 -16.89520613 -6.838291e+00\n3648  -3.39520613 -1.467162e+01\n3649   2.60479387 -1.749590e+01\n3650 -10.89520613 -1.775496e+01\n3651  -4.58751382 -1.619940e+01\n3652   8.10479387 -1.746329e+01\n3653  -0.89520613 -1.650677e+01\n3654 -14.89520613 -1.765774e+01\n3655   7.60479387 -1.783955e+01\n3656  -2.89520613 -1.703274e+01\n3657  -9.51059074 -1.660158e+01\n3658 -11.39520613 -3.116069e+00\n3659 -15.39520613 -6.602180e+00\n3660  -8.39520613 -9.870899e+00\n3661   0.60479387 -1.424711e+01\n3662 -12.39520613 -9.616069e+00\n3663  -9.66443689 -1.327609e+01\n3664 -12.39520613 -7.491069e+00\n3665 -12.89520613 -7.254957e+00\n3666  -0.39520613 -1.478274e+01\n3667  19.10479387 -1.646752e+01\n3668  -3.89520613 -1.723563e+01\n3669  -7.34975158 -7.410685e-01\n3670  -9.89520613 -6.747107e+00\n3671  -1.89520613 -8.560513e+00\n3672  -2.39520613 -1.454662e+01\n3673  -8.39520613 -6.157735e+00\n3674  -2.89520613 -9.727180e+00\n3675 -16.52020613 -1.996119e+00\n3676 -15.39520613 -4.911962e+00\n3677  -2.89520613 -1.474228e+01\n3678  -9.39520613 -6.574402e+00\n3679  -5.89520613 -1.162996e+01\n3680  -4.39520613 -1.318551e+01\n3681  -6.43366766 -8.214498e+00\n3682  18.60479387 -1.524107e+01\n3683  11.60479387 -1.672718e+01\n3684  -6.39520613 -1.015472e+01\n3685  -5.39520613 -6.573194e+00\n3686   0.60479387 -9.907735e+00\n3687 -13.27982151 -3.105130e-01\n3688  -9.89520613 -1.021631e+01\n3689 -16.39520613 -5.366069e+00\n3690 -11.39520613 -4.579837e+00\n3691  -2.39520613 -7.116069e+00\n3692 -15.39520613 -4.789680e+00\n3693  -5.12597536 -1.122718e+01\n3694  -4.89520613 -8.081346e+00\n3695  -5.89520613 -3.518846e+00\n3696 -15.39520613 -9.355130e-01\n3697  -5.39520613 -3.852180e+00\n3698   4.60479387 -8.581346e+00\n3699  -6.66443689 -2.914680e+00\n3700 -11.89520613 -4.706346e+00\n3701  -0.89520613 -6.685513e+00\n3702  -6.89520613  6.144439e+00\n3703  -7.89520613 -2.227180e+00\n3704   0.10479387 -1.592162e+01\n3705 -27.35674459 -4.964498e+00\n3706 -19.39520613  2.439487e+00\n3707 -17.39520613  3.040677e+00\n3708 -10.89520613 -3.642639e+00\n3709   6.10479387 -8.426455e+00\n3710  -0.39520613 -1.404481e+01\n3711 -15.35674459 -1.033829e+01\n3712  -0.89520613 -7.407735e+00\n3713  -1.89520613 -6.713291e+00\n3714 -15.39520613  9.022820e+00\n3715 -14.89520613  5.592265e+00\n3716  -3.89520613 -7.296624e+00\n3717  -4.20289843 -5.310513e+00\n3718  -4.89520613  2.500477e+00\n3719  -4.39520613 -5.254957e+00\n3720 -13.39520613  6.522820e+00\n3721  -6.89520613 -9.866069e+00\n3722  -6.89520613 -2.838291e+00\n3723 -15.12597536  6.231154e+00\n3724 -15.39520613  8.803014e+00\n3725  -6.39520613  4.606154e+00\n3726 -11.89520613  1.995043e+00\n3727 -17.89520613  9.231154e+00\n3728 -14.89520613  4.800598e+00\n3729  -2.58751382 -7.966241e-01\n3730 -14.39520613  1.665893e+01\n3731  -5.39520613  7.981154e+00\n3732   3.60479387  6.509725e+00\n3733  19.10479387 -2.405854e-01\n3734 -12.39520613  7.514487e+00\n3735 -19.66443689  5.989487e+00\n3736  -5.89520613  8.250931e-01\n3737  -8.39520613 -4.231165e+00\n3738 -10.39520613  1.360012e+00\n3739  10.10479387  7.171975e+00\n3740   5.10479387 -6.124523e+00\n3741 -12.81828305 -4.202180e+00\n3742 -22.89520613  3.347820e+00\n3743 -15.89520613  7.189125e+00\n3744  17.60479387 -4.343582e+00\n3745  16.60479387 -5.614498e+00\n3746  11.10479387 -6.613164e+00\n3747  17.18171695  1.168423e+01\n3748 -13.89520613  9.219197e+00\n3749   1.10479387  9.897820e+00\n3750  -4.39520613  7.939487e+00\n3751 -10.89520613  3.002349e+00\n3752 -15.39520613  3.151987e+00\n3753  -9.66443689  2.198183e+00\n3754  -8.89520613  6.186908e+00\n3755 -13.89520613  4.879302e+00\n3756 -16.39520613  1.111541e+01\n3757  10.60479387 -3.849695e-01\n3758  23.10479387  9.575538e+00\n3759 -10.58751382  2.851806e+00\n3760 -17.89520613 -9.527231e-01\n3761   8.60479387 -6.244027e+00\n3762  -7.89520613  4.168654e+00\n3763   3.60479387  3.951987e+00\n3764 -14.89520613  1.501865e+01\n3765 -20.81828305  1.059547e+01\n3766 -23.89520613  7.443473e+00\n3767 -21.89520613  2.982603e+00\n3768 -12.39520613  4.274632e+00\n3769   4.60479387  3.651987e+00\n3770  -5.89520613  8.835320e+00\n3771  27.10479387  1.610450e-01\n3772  38.10479387  1.640615e+01\n3773  13.10479387  6.735864e+00\n3774 -11.89520613  1.810502e+00\n3775  -0.89520613 -9.140585e+00\n3776 -15.89520613  2.997820e+00\n3777 -14.27982151  9.631154e+00\n3778  34.10479387  1.133460e+01\n3779  -4.39520613  5.123364e+00\n3780   4.10479387  1.212857e+00\n3781  -0.39520613  1.029039e+01\n3782 -14.89520613  1.692106e+00\n3783  -7.12597536  2.368654e+00\n3784  -2.39520613  8.251987e+00\n3785   1.60479387  6.810320e+00\n3786  -8.89520613 -1.235842e+00\n3787  -2.89520613 -6.306346e+00\n3788 -18.39520613 -6.227180e+00\n3789   2.72017849  3.368058e+00\n3790 -12.89520613  1.031865e+01\n3791   0.60479387  4.243654e+00\n3792  -7.39520613  3.268059e-01\n3793  -9.39520613 -1.852723e+00\n3794 -21.89520613 -3.840732e-01\n3795  -5.74135997 -7.072378e-02\n3796  13.10479387  6.899813e+00\n3797  20.10479387  2.166449e+01\n3798  -8.89520613  1.784365e+01\n3799 -24.39520613  1.369365e+01\n3800  -7.89520613  1.061938e+01\n3801  -3.58751382  2.388400e+00\n3802 -11.39520613 -1.242759e+00\n3803  -1.89520613  9.875142e+00\n3804  -9.89520613  1.787282e+01\n3805 -14.39520613  2.515199e+01\n3806 -12.89520613  1.025452e+01\n3807  -9.35674459  1.107409e+01\n3808  -4.89520613  1.078405e+01\n3809  10.60479387  1.154787e+01\n3810   2.10479387  3.828436e+00\n3811 -13.39520613  2.747820e+00\n3812 -12.39520613  2.159365e+01\n3813  -0.89520613  2.160538e+01\n3814  13.60479387  2.118532e+01\n3815  20.10479387  7.155575e-01\n3816  17.10479387  1.322359e+00\n3817   7.60479387  8.905791e+00\n3818 -22.39520613  1.926987e+00\n3819  -1.89520613  1.620615e+01\n3820  -8.89520613  1.338242e+01\n3821 -14.89520613  3.751987e+00\n3822  11.60479387  1.111630e+01\n3823  26.60479387  1.300018e+01\n3824  31.10479387  2.103880e+01\n3825  -6.64520613  1.025893e+01\n3826  -4.89520613  1.825615e+01\n3827  24.60479387  1.110507e+01\n3828  79.60479387  1.379873e+01\n3829  13.10479387  1.022177e+01\n3830  -4.39520613  1.007572e+01\n3831  10.93812721  1.262173e+01\n3832  14.60479387  2.686449e+01\n3833  32.60479387  3.710615e+01\n3834   1.10479387  1.342254e+00\n3835  15.10479387  1.871032e+01\n3836  36.10479387  1.191829e+01\n3837 -10.72853946 -1.256346e+00\n3838  -7.89520613 -8.498013e+00\n3839  -8.39520613  2.322820e+00\n3840 -10.39520613  1.256032e+01\n3841 -14.89520613  7.923413e+00\n3842   8.10479387  1.188133e+01\n3843 -21.14520613  8.897096e+00\n3844  -8.39520613  5.640446e+00\n3845  11.10479387  1.479782e+01\n3846  23.60479387  2.881865e+01\n3847  19.10479387  2.002699e+01\n3848   9.10479387  9.476625e+00\n3849  -6.56187279  5.735123e+00\n3850   8.10479387  1.409784e+01\n3851  26.10479387  2.507005e+01\n3852  22.60479387  1.398002e+00\n3853 -12.89520613  1.153532e+01\n3854  -1.89520613  1.737699e+01\n3855  -8.22853946  1.219510e+01\n3856 -10.39520613  8.217962e+00\n3857  -7.39520613  1.168441e+01\n3858   6.10479387  1.895869e+01\n3859  34.10479387  1.829963e+01\n3860  23.10479387  2.430532e+01\n3861   1.55933933  8.189487e+00\n3862 -14.89520613  2.309184e+00\n3863 -25.39520613  1.300175e+00\n3864 -17.39520613  1.897820e+00\n3865   0.10479387  5.360320e+00\n3866  33.60479387  2.306032e+01\n3867  13.77146054  2.429597e+01\n3868   6.10479387  1.761078e+01\n3869 -19.39520613  2.462233e+00\n3870 -23.39520613  8.465383e-01\n3871   2.60479387 -3.293846e+00\n3872  20.10479387  7.459777e+00\n3873  10.52146054  1.531330e+01\n3874  11.10479387  7.197820e+00\n3875   5.10479387  5.706154e+00\n3876 -19.39520613 -3.402904e+00\n3877  -5.39520613 -1.351051e+01\n3878 -16.89520613 -1.670477e+00\n3879  -6.14520613  9.697406e-01\n3880   2.60479387  2.228255e+00\n3881  -1.89520613  1.333365e+01\n3882 -22.89520613  3.610320e+00\n3883 -26.39520613 -1.840223e+00\n3884  -6.39520613 -2.985332e+00\n3885  -5.81187279 -4.314136e+00\n3886 -19.39520613 -1.837325e+00\n3887 -11.39520613 -7.190585e+00\n3888  -5.89520613 -1.698013e+00\n3889 -11.89520613  9.447820e+00\n3890  -4.39520613  8.141842e+00\n3891   9.77146054 -6.034807e-01\n3892  14.10479387 -2.753194e+00\n3893 -18.89520613 -9.280854e-01\n3894  -8.39520613 -8.938463e-01\n3895   3.60479387 -1.131346e+00\n3896 -12.89520613  8.826987e+00\n3897  -3.56187279  7.601987e+00\n3898  -4.39520613 -7.239498e+00\n3899 -26.39520613 -2.358520e+00\n3900  -7.39520613 -4.285332e+00\n3901  12.60479387 -2.642693e+00\n3902   6.10479387  1.276865e+01\n3903 -14.89520613  3.756697e+00\n3904 -10.89520613 -6.603318e-01\n3905  -5.89520613  8.170233e-01\n3906 -17.39520613 -4.824100e+00\n3907 -12.39520613 -1.074763e+01\n3908   0.60479387 -7.158158e+00\n3909   5.68812721  2.811537e-01\n3910  13.60479387  1.386865e+01\n3911  39.10479387  1.474565e+01\n3912  43.10479387  2.028199e+01\n3913  -2.89520613 -3.965042e+00\n3914  62.10479387  2.128436e+00\n3915   0.10479387  3.741117e+00\n3916 -26.39520613 -3.339680e+00\n3917 -20.89520613 -9.106346e+00\n3918  -2.89520613 -1.359077e+01\n3919 -18.39520613 -8.209970e+00\n3920  -6.39520613 -9.733520e+00\n3921  -6.39520613 -3.114466e+00\n3922 -17.39520613 -3.957977e+00\n3923  -6.89520613 -6.980130e-01\n3924 -10.39520613 -4.085513e+00\n3925  48.60479387 -1.566923e+00\n3926 -13.89520613 -9.417941e+00\n3927 -16.39520613 -3.768484e+00\n3928  22.60479387 -4.321020e+00\n3929  34.10479387  1.102282e+01\n3930   8.60479387 -1.153106e+00\n3931  11.10479387  9.416339e+00\n3932  32.60479387  1.809857e+00\n3933  20.52146054  3.169025e-01\n3934  31.10479387  1.282133e+01\n3935   1.10479387 -3.574804e+00\n3936   2.60479387 -1.024107e+01\n3937  -8.39520613 -9.401426e-01\n3938   0.60479387  1.248719e+01\n3939 -13.81187279 -6.208661e+00\n3940 -17.39520613 -1.085701e+01\n3941   5.60479387 -1.507722e+01\n3942   1.10479387 -1.082400e+01\n3943   3.60479387 -1.213821e+01\n3944   6.10479387 -1.197718e+01\n3945   1.10479387 -4.847550e+00\n3946 -16.89520613 -1.239505e+01\n3947  -9.89520613 -9.058903e+00\n3948  -6.89520613 -7.005305e+00\n3949   9.60479387 -1.552609e+01\n3950  -2.39520613 -1.789385e+01\n3951 -12.66443689 -3.176254e+00\n3952 -26.39520613  3.504302e+00\n3953 -19.89520613 -7.040585e+00\n3954  -3.39520613 -1.341860e+01\n3955  10.60479387 -1.572819e+01\n3956  10.60479387 -6.866672e+00\n3957   2.48940926 -7.613854e+00\n3958 -15.39520613 -1.114385e+01\n3959 -25.89520613 -1.019593e+01\n3960 -16.89520613 -1.709176e+01\n3961 -13.89520613 -1.805010e+01\n3962  -5.39520613 -1.605870e+01\n3963 -12.74135997 -1.255125e+01\n3964 -21.39520613 -4.206346e+00\n3965 -16.89520613 -8.164680e+00\n3966  -7.89520613 -1.416468e+01\n3967 -17.39520613 -1.451885e+01\n3968  -9.39520613 -1.549801e+01\n3969  -5.74135997 -1.391377e+01\n3970  -2.89520613 -1.239385e+01\n3971 -19.89520613 -6.352180e+00\n3972 -18.89520613 -1.422718e+01\n3973 -21.39520613 -7.039680e+00\n3974   3.10479387 -1.495635e+01\n3975   2.41248618 -1.535218e+01\n3976   8.10479387 -1.687030e+01\n3977  16.10479387 -1.847899e+01\n3978 -14.89520613 -2.498013e+00\n3979  -3.89520613 -1.118551e+01\n3980 -15.39520613 -9.289680e+00\n3981  -2.04905228 -1.458135e+01\n3982  10.10479387 -1.198171e+01\n3983  -0.89520613 -1.287301e+01\n3984 -10.89520613 -1.562301e+01\n3985  -5.89520613 -1.678968e+01\n3986   7.10479387 -1.624801e+01\n3987 -17.66443689 -6.435513e+00\n3988 -27.89520613 -6.051298e-02\n3989  -8.89520613 -1.241196e+01\n3990  -4.39520613 -1.799801e+01\n3991 -18.39520613 -1.462301e+01\n3992 -11.89520613 -1.522718e+01\n3993 -14.35674459 -1.264385e+01\n3994 -16.39520613 -1.249801e+01\n3995  -8.39520613 -1.510218e+01\n3996   7.60479387 -1.778968e+01\n3997 -23.89520613 -8.248013e+00\n3998 -20.39520613 -4.207252e+00\n3999  -8.81828305 -1.163660e+01\n4000  -5.39520613 -1.460218e+01\n4001   1.60479387 -1.628968e+01\n4002   6.60479387 -1.689385e+01\n4003   8.10479387 -1.687301e+01\n4004   6.60479387 -1.414385e+01\n4005  10.52146054 -1.773986e+01\n4006  19.10479387 -1.774801e+01\n4007 -18.39520613 -1.303968e+01\n4008 -17.39520613 -3.914680e+00\n4009 -14.39520613 -1.381051e+01\n4010   2.60479387 -1.746812e+01\n4011  -2.04905228 -1.378968e+01\n4012 -15.89520613 -1.393551e+01\n4013  -7.39520613 -1.589385e+01\n4014 -14.39520613 -1.574801e+01\n4015 -10.39520613 -1.585218e+01\n4016 -11.39520613 -1.734765e+01\n4017 -10.81828305 -1.523624e+01\n4018  -9.39520613 -1.083135e+01\n4019 -10.89520613 -6.616069e+00\n4020  -5.89520613 -1.100496e+01\n4021 -10.39520613 -9.116069e+00\n4022 -21.89520613 -1.232440e+01\n4023 -13.27982151 -1.663550e+01\n4024  -3.89520613 -1.404662e+01\n4025 -27.89520613 -5.296624e+00\n4026 -29.39520613 -3.471141e+00\n4027 -13.89520613 -9.157735e+00\n4028 -10.39520613 -8.310513e+00\n4029  -3.14520613 -1.372718e+01\n4030  -6.89520613 -1.724107e+01\n4031   7.60479387 -1.322476e+01\n4032  12.60479387 -1.036607e+01\n4033  -3.89520613 -1.594940e+01\n4034 -14.39520613 -1.101643e+01\n4035  -1.43366766 -1.625496e+01\n4036   7.60479387 -1.579662e+01\n4037  10.60479387 -1.775496e+01\n4038  17.60479387 -1.590472e+01\n4039   8.10479387 -1.431051e+01\n4040   5.10479387 -1.764083e+01\n4041   4.79710157 -1.768551e+01\n4042  10.60479387 -1.721329e+01\n4043  -9.89520613 -1.087996e+01\n4044   4.10479387 -1.776885e+01\n4045   0.10479387 -1.796208e+01\n4046   0.10479387 -1.821208e+01\n4047  -3.72853946 -1.633829e+01\n4048 -12.89520613 -1.478274e+01\n4049  -2.39520613 -1.493551e+01\n4050 -10.39520613 -1.319940e+01\n4051 -14.39520613 -1.067162e+01\n4052 -12.39520613 -6.782735e+00\n4053 -21.12597536  5.303014e+00\n4054 -25.89520613  8.206999e+00\n4055 -19.39520613  3.304221e+00\n4056  -8.89520613 -1.324402e+00\n4057  -9.39520613  4.036709e+00\n4058  35.10479387 -1.489385e+01\n4059  28.95094772 -1.445786e+01\n4060   0.10479387 -1.514385e+01\n4061 -17.89520613 -7.254957e+00\n4062  -3.89520613 -1.365496e+01\n4063  -4.89520613 -1.547718e+01\n4064  -7.89520613 -1.185218e+01\n4065  -0.20289843 -8.004957e+00\n4066 -17.89520613 -8.143846e+00\n4067 -25.89520613 -4.998644e+00\n4068 -13.39520613 -1.391405e+01\n4069 -14.39520613 -1.105862e+01\n4070  -8.39520613 -6.852180e+00\n4071   5.18171695 -7.602180e+00\n4072  -4.89520613 -4.771796e-01\n4073   2.60479387 -1.153998e+01\n4074   0.60479387 -1.607614e+00\n4075  -2.89520613 -5.032735e+00\n4076  -9.39520613 -4.612445e+00\n4077 -12.66443689 -6.754957e+00\n4078 -22.89520613 -8.435513e+00\n4079 -13.89520613 -1.526885e+01\n4080 -24.89520613 -1.824402e+00\n4081 -21.89520613  1.973303e+00\n4082 -23.39520613  1.749943e-01\n4083  -1.97212920 -1.034082e+01\n4084  -9.39520613  3.133931e+00\n4085 -18.89520613  2.328376e+00\n4086 -10.89520613  1.059373e+01\n4087 -16.89520613  9.950426e-01\n4088 -13.89520613 -3.296624e+00\n4089   3.01388478 -4.411056e+00\n4090   4.10479387 -2.153357e+00\n4091 -15.89520613  8.828376e+00\n4092 -18.39520613  9.745043e+00\n4093  -7.89520613  1.076799e+01\n4094   3.60479387 -3.129957e+00\n4095   1.27146054 -1.454481e+01\n4096 -24.89520613  1.814487e+00\n4097 -25.89520613  1.961449e+01\n4098 -27.39520613  1.846449e+01\n4099 -21.39520613  7.414487e+00\n4100  -0.39520613 -1.252180e+00\n4101  -2.43366766 -1.835381e+00\n4102  -3.39520613  2.397458e+00\n4103  34.60479387  1.602934e+01\n4104  34.60479387  1.490893e+01\n4105 -18.39520613  1.179365e+01\n4106  -0.89520613  3.429070e+00\n4107  -3.81187279  7.814487e+00\n4108 -12.39520613  5.240212e+00\n4109 -21.39520613  1.528255e+00\n4110 -19.39520613 -4.561756e+00\n4111 -23.39520613  1.169065e+00\n4112 -27.39520613  1.000388e+01\n4113 -17.89520613  1.920548e+00\n4114  -0.39520613  1.481154e+00\n4115   9.10479387  9.078031e-01\n4116 -13.39520613 -9.774281e+00\n4117 -20.39520613  6.608608e+00\n4118 -18.39520613  6.360320e+00\n4119  -2.89520613  2.997820e+00\n4120   0.10479387  2.544782e+01\n4121   6.10479387  1.438949e+01\n4122  -9.39520613  4.083426e+00\n4123   2.10479387 -3.864816e+00\n4124 -20.89520613 -7.644670e+00\n4125 -13.74135997 -9.397949e-01\n4126   2.10479387  3.162972e+00\n4127  -7.89520613  9.867517e+00\n4128   7.10479387  4.875587e+00\n4129 -10.39520613  1.116739e+01\n4130 -12.39520613  1.187957e+01\n4131  10.79710157 -1.123968e+00\n4132  10.10479387  7.339849e+00\n4133   1.10479387  1.126903e+01\n4134  -9.89520613  8.909184e+00\n4135 -23.39520613  1.192598e+01\n4136  -9.39520613  3.250093e+00\n4137  17.10479387 -4.974649e+00\n4138   0.10479387 -8.649281e+00\n4139  -5.39520613 -5.140388e+00\n4140   1.10479387  1.227366e+00\n4141 -15.39520613  3.447063e+00\n4142  -5.89520613  2.381845e+00\n4143   9.10479387  1.883567e+00\n4144   1.10479387  5.587214e+00\n4145   0.60479387  4.834909e+00\n4146 -12.89520613  1.710505e+01\n4147 -20.39520613  7.242517e+00\n4148 -22.89520613  9.681911e+00\n4149  -5.22853946  3.638867e+00\n4150  12.10479387  1.581184e+01\n4151   1.10479387  1.223278e+01\n4152  14.10479387  1.584113e+01\n4153  57.10479387  1.913749e+01\n4154   3.60479387  1.681865e+01\n4155   0.10479387  9.318654e+00\n4156  45.10479387  1.867554e+01\n4157  44.10479387  1.794452e+01\n4158   3.60479387  2.519016e+00\n4159  -7.89520613  7.312066e+00\n4160  -5.89520613  3.299336e+00\n4161  -1.97212920  1.456449e+01\n4162  -6.89520613  1.381827e+01\n4163 -16.39520613  1.851146e+01\n4164   6.60479387  7.476213e+00\n4165  25.60479387  1.782569e+01\n4166  38.10479387  1.489671e+01\n4167  -4.04905228  9.564487e+00\n4168  15.60479387  1.403797e+01\n4169  -4.39520613  2.082964e+01\n4170  -4.39520613  8.756022e+00\n4171   4.60479387  7.297419e+00\n4172 -11.89520613 -4.567759e+00\n4173  -7.39520613  3.903255e+00\n4174 -24.39520613  1.920383e+00\n4175 -13.39520613 -1.031051e+01\n4176 -18.89520613  4.458426e+00\n4177  -0.39520613 -9.595578e-01\n4178  -7.89520613 -1.544703e+00\n4179   3.10479387  3.806088e+00\n4180  -2.39520613 -6.667383e-01\n4181  -6.89520613  1.432688e+01\n4182 -15.39520613  1.412888e+01\n4183  -7.39520613  9.655396e+00\n4184 -10.89520613  1.019878e+01\n4185   5.60479387 -3.402246e+00\n4186   3.10479387  3.056747e+00\n4187  18.60479387  1.782722e+01\n4188  -5.89520613  1.344838e+01\n4189  -0.89520613  1.444706e+01\n4190 -12.39520613  1.503418e+01\n4191  -2.81187279  9.333426e+00\n4192   4.60479387  2.228583e+01\n4193  25.10479387  1.844714e+01\n4194  24.60479387  2.602447e+01\n4195   0.10479387  1.963625e+01\n4196   9.10479387  3.022001e+01\n4197 -11.71338794  2.138766e+01\n4198  -2.89520613  3.380175e+00\n4199 -14.39520613  8.884810e+00\n4200  -6.39520613  6.009151e+00\n4201  19.60479387  8.992517e+00\n4202   9.60479387  1.570843e+01\n4203  -9.97212920  7.125093e+00\n4204 -14.89520613  7.496305e+00\n4205   2.60479387  1.215243e+01\n4206  -2.39520613  1.632733e+01\n4207 -14.39520613  1.667878e+01\n4208  -0.89520613  1.416887e+01\n4209  -2.97853946  1.205622e+01\n4210 -10.89520613  2.035615e+01\n4211  -7.89520613  2.025388e+01\n4212  30.60479387  1.758335e+01\n4213  41.10479387  2.064539e+01\n4214  23.60479387  2.079519e+01\n4215  -1.31187279  5.369559e+00\n4216   5.60479387  9.726284e+00\n4217  18.60479387  1.343949e+01\n4218  -1.89520613  1.673494e+01\n4219   2.60479387  9.799336e+00\n4220  26.60479387  1.745498e+01\n4221 -10.06187279  1.158810e+00\n4222   1.10479387  2.668736e+00\n4223  -8.39520613  3.271338e+00\n4224  -5.39520613  5.950851e+00\n4225 -10.89520613  9.162972e+00\n4226  10.10479387  1.056827e+01\n4227  10.25864003  7.518703e+00\n4228 -13.89520613  1.467878e+01\n4229  -4.89520613  2.420054e+00\n4230 -21.89520613  6.913631e+00\n4231  -3.89520613  1.334858e+01\n4232  -4.89520613  2.111752e+01\n4233  27.64325541  1.536669e+01\n4234  -8.39520613  1.840044e+00\n4235  -6.89520613  4.637115e+00\n4236   2.10479387  3.448305e+00\n4237  -3.89520613 -6.751027e+00\n4238  -3.89520613  1.376987e+00\n4239   1.72017849  3.331154e+00\n4240  -0.89520613  1.046156e+01\n4241   1.10479387  5.757669e+00\n4242  -4.89520613  1.115077e+01\n4243   7.60479387  1.351481e+01\n4244  26.10479387  8.875437e+00\n4245  -5.43366766  3.556911e+00\n4246  -9.39520613  9.602366e+00\n4247  19.60479387  6.143327e+00\n4248 -17.39520613  3.832274e+00\n4249   0.10479387  3.339826e+00\n4250  17.60479387  7.698380e+00\n4251  14.37752115  1.373266e+01\n4252   6.10479387  1.467194e+01\n4253  25.10479387  2.642812e+01\n4254  20.10479387  1.442232e+00\n4255  -7.39520613  7.480530e+00\n4256   0.10479387  7.346931e+00\n4257  -1.47853946  8.827917e+00\n4258   1.60479387 -4.723392e+00\n4259  -4.89520613  2.602366e+00\n4260 -13.89520613  4.053123e+00\n4261  -5.89520613  7.228293e-01\n4262  11.10479387  4.146031e-02\n4263  10.79710157  3.240870e+00\n4264   8.10479387  6.181911e+00\n4265  -8.39520613  1.735434e+01\n4266  11.10479387  1.363115e+01\n4267  16.60479387  3.122699e+01\n4268 -12.39520613  1.093949e+01\n4269 -19.20289843 -1.407276e+00\n4270 -16.39520613 -3.264235e+00\n4271   5.60479387 -2.110384e+00\n4272  14.10479387  1.115826e+01\n4273  23.10479387  1.795843e+01\n4274  24.60479387  1.764024e+01\n4275  14.10479387  4.715673e+00\n4276 -15.89520613 -2.925796e+00\n4277 -16.39520613  6.153734e+00\n4278 -12.39520613  9.208756e+00\n4279  12.10479387  8.799171e+00\n4280  24.60479387  1.818949e+01\n4281  13.68812721  2.587214e+00\n4282 -20.39520613 -4.796185e+00\n4283 -23.89520613  2.414351e-01\n4284  -6.89520613 -7.512753e+00\n4285   3.10479387 -1.101012e+01\n4286  23.60479387 -7.131165e+00\n4287  19.33556311  2.015918e+01\n4288   0.60479387  1.333343e+01\n4289  -5.39520613 -4.956856e-02\n4290  10.60479387 -1.150340e+01\n4291   1.60479387 -3.715232e+00\n4292 -19.39520613 -7.628036e+00\n4293 -10.51059074 -6.607090e+00\n4294 -21.39520613  2.322063e+00\n4295 -18.89520613  2.534184e+00\n4296   3.10479387 -7.052114e+00\n4297 -18.39520613 -8.780572e+00\n4298 -16.89520613 -1.473019e+01\n4299 -22.58751382 -6.739317e+00\n4300  -4.89520613 -1.272899e+01\n4301  11.60479387 -9.468846e+00\n4302   0.60479387  2.756154e+00\n4303   5.60479387 -8.473013e+00\n4304  -9.89520613 -1.242629e+01\n4305  -8.74135997 -1.328037e+01\n4306  -7.39520613 -1.203859e+01\n4307  11.60479387  5.717929e+00\n4308  12.60479387  4.935320e+00\n4309 -19.89520613 -3.148013e+00\n4310  -8.89520613 -1.149783e+01\n4311 -13.97853946 -9.555556e+00\n4312 -18.39520613 -9.004370e+00\n4313 -10.39520613 -1.204317e+01\n4314  10.10479387 -1.176695e+01\n4315  11.60479387 -8.214680e+00\n4316   1.60479387 -1.176468e+01\n4317  21.41248618 -8.651967e+00\n4318  30.60479387 -1.422646e+01\n4319 -17.39520613 -7.141574e+00\n4320  -0.89520613 -1.433301e+01\n4321  11.10479387 -1.795635e+01\n4322 -18.39520613 -1.471051e+01\n4323 -25.06187279  2.061537e-01\n4324 -25.89520613  2.864487e+00\n4325 -26.39520613  9.339487e+00\n4326 -22.89520613  2.239073e-01\n4327 -13.89520613 -1.391115e+01\n4328 -10.89520613 -1.244782e+01\n4329   4.48940926 -1.364385e+01\n4330   0.10479387 -1.359176e+01\n4331  11.10479387 -1.329693e+01\n4332  -2.89520613 -4.727180e+00\n4333  -8.89520613 -5.227180e+00\n4334  -5.89520613 -1.762996e+01\n4335  -2.80429703 -1.087364e+01\n4336  -6.89520613 -1.261607e+01\n4337 -17.89520613 -5.185513e+00\n4338  -2.39520613 -1.589385e+01\n4339  -6.89520613 -1.529662e+01\n4340   1.60479387 -1.545824e+01\n4341  -8.04905228 -1.408467e+01\n4342 -16.89520613 -1.407837e+01\n4343  -5.89520613 -1.393551e+01\n4344   6.60479387 -6.838291e+00\n4345   0.10479387 -1.008829e+01\n4346   0.60479387 -1.606051e+01\n4347  -0.58751382 -1.823572e+01\n4348 -13.89520613 -1.256051e+01\n4349  16.60479387 -1.693551e+01\n4350   5.10479387 -1.112996e+01\n4351   9.60479387 -9.088291e+00\n4352  -2.89520613 -9.921624e+00\n4353 -11.04905228 -1.579783e+01\n4354  -4.89520613 -1.358829e+01\n4355   3.10479387 -1.336146e+01\n4356   8.60479387 -1.887996e+01\n4357  -3.89520613 -1.462996e+01\n4358 -16.89520613 -1.461607e+01\n4359 -24.72853946 -3.907735e+00\n4360  -8.89520613 -1.649107e+01\n4361  -6.39520613 -1.634587e+01\n4362 -11.39520613 -1.754300e+01\n4363  -5.39520613 -1.649530e+01\n4364  -6.89520613 -1.571329e+01\n4365  -9.27982151 -1.026885e+01\n4366   6.60479387 -1.481716e+01\n4367  -2.39520613 -1.623223e+01\n4368 -15.89520613 -1.685218e+01\n4369 -14.39520613 -1.400375e+01\n4370   6.10479387 -1.418551e+01\n4371 -12.22853946 -1.339385e+01\n4372 -17.39520613 -1.662996e+01\n4373 -11.39520613 -1.574359e+01\n4374  -9.89520613 -7.536962e+00\n4375  -8.89520613 -1.355447e+01\n4376  -9.89520613 -1.210218e+01\n4377 -16.31187279 -7.546624e+00\n4378  -2.89520613 -1.022718e+01\n4379  -4.39520613 -1.256051e+01\n4380  -0.89520613 -1.705810e+01\n4381  -5.89520613 -9.866069e+00\n4382  -5.89520613 -1.342162e+01\n4383  -9.99520613 -1.304662e+01\n4384 -12.39520613 -3.824402e+00\n4385           NA  6.328376e+00\n4386  -4.39520613 -4.662409e-02\n4387 -17.39520613 -1.083829e+01\n4388  -5.89520613 -1.461607e+01\n4389 -11.89520613 -1.391860e+01\n4390   4.10479387 -1.578274e+01\n4391 -10.89520613 -6.699402e+00\n4392 -10.89520613 -1.025496e+01\n4393 -11.39520613 -3.782735e+00\n4394  -4.89520613 -1.271329e+01\n4395  -2.75234898 -1.281897e+01\n4396 -27.89520613  8.786709e+00\n4397 -11.39520613 -4.629957e+00\n4398  -0.39520613 -1.646647e+01\n4399  -2.39520613 -1.310218e+01\n4400  -0.39520613 -1.439385e+01\n4401 -23.03806327 -4.216241e-01\n4402  -3.89520613 -1.296329e+01\n4403  14.10479387 -1.547718e+01\n4404  12.10479387 -1.514385e+01\n4405 -15.89520613 -1.667162e+01\n4406 -23.89520613 -1.449107e+01\n4407 -17.75234898 -4.560513e+00\n4408 -14.89520613 -1.197718e+01\n4409  -4.39520613 -1.382199e+01\n4410   6.10479387 -1.129662e+01\n4411  -6.89520613 -1.175496e+01\n4412  -4.39520613 -9.595537e+00\n4413   4.10479387 -4.213291e+00\n4414 -11.39520613  1.161709e+00\n4415 -12.39520613 -1.507440e+01\n4416 -23.39520613 -1.468068e+01\n4417  -5.39520613 -6.477180e+00\n4418 -13.39520613 -5.402685e+00\n4419 -10.03806327 -1.637996e+01\n4420  -9.39520613 -1.100496e+01\n4421  -6.39520613 -7.463291e+00\n4422  -4.39520613 -1.500337e+01\n4423 -16.39520613 -1.092920e+01\n4424   4.10479387 -1.022718e+01\n4425  -9.03806327 -7.353991e+00\n4426 -12.89520613  2.661709e+00\n4427  -7.89520613 -4.671624e+00\n4428  -6.39520613 -6.768846e+00\n4429   3.10479387 -6.699402e+00\n4430  -2.89520613 -1.274107e+01\n4431 -17.46663470 -8.328190e+00\n4432  -3.39520613 -1.007863e+01\n4433 -22.89520613  3.493835e+00\n4434 -23.39520613  1.356154e+00\n4435 -29.39520613  1.274504e+01\n4436 -15.39520613  4.536709e+00\n4437  -1.03806327 -8.027300e+00\n4438  18.60479387 -1.606051e+01\n4439  -3.89520613 -1.327368e+01\n4440   6.60479387 -1.378817e+01\n4441   1.10479387 -1.561607e+01\n4442 -23.39520613 -6.935513e+00\n4443 -15.64520613  1.800598e+00\n4444  -3.89520613 -1.715521e+01\n4445 -23.39520613 -1.699402e+00\n4446 -13.39520613 -6.675247e+00\n4447  -3.39520613 -7.574402e+00\n4448 -26.89520613  1.277282e+01\n4449 -16.89520613  1.556449e+01\n4450   1.10479387  5.717265e+00\n4451 -18.89520613  2.245043e+00\n4452 -27.39520613  1.420338e+01\n4453 -18.89520613  2.928041e+00\n4454 -22.89520613  9.480207e+00\n4455 -14.75234898  1.050199e+01\n4456 -26.89520613  1.780407e+01\n4457  -3.89520613 -4.706799e+00\n4458   2.60479387 -6.569209e+00\n4459   9.10479387  1.081781e+01\n4460 -16.89520613  8.464108e+00\n4461 -15.89520613  4.189530e+00\n4462  -5.39520613  2.380981e-01\n4463 -22.89520613  1.301588e+01\n4464 -11.39520613  3.111588e+00\n4465   6.60479387 -4.015223e+00\n4466 -16.39520613  1.488876e+01\n4467 -15.60949184  1.299685e+01\n4468 -19.89520613  1.201588e+01\n4469   2.10479387  3.495043e+00\n4470  15.60479387 -5.119019e-01\n4471  -0.39520613 -2.546322e+00\n4472  41.10479387  6.008081e+00\n4473  27.10479387  1.163744e+01\n4474   4.10479387 -3.720682e+00\n4475   9.60479387 -4.158998e+00\n4476   1.10479387 -3.454452e+00\n4477 -15.89520613  3.053123e+00\n4478 -14.89520613  9.789435e-01\n4479 -18.75234898  4.061190e+00\n4480  13.10479387  8.378716e+00\n4481   1.60479387  9.574039e+00\n4482 -21.89520613  1.142615e+01\n4483 -15.89520613  1.444706e+01\n4484 -19.39520613  2.916760e+00\n4485 -12.46663470  4.117847e+00\n4486  -1.39520613  4.607321e-01\n4487  13.10479387  7.347425e+00\n4488  -8.39520613  1.603314e+01\n4489 -22.89520613  6.897985e+00\n4490 -22.39520613 -2.591414e+00\n4491  -9.60949184 -7.077180e+00\n4492   1.10479387 -6.683357e+00\n4493   1.60479387  2.954968e+00\n4494  -2.89520613  5.326180e+00\n4495  -2.39520613 -7.738653e+00\n4496 -27.89520613  9.858212e+00\n4497 -20.46663470  1.241449e+01\n4498 -10.89520613  1.280199e+01\n4499  -2.89520613  1.781449e+01\n4500  -1.89520613  9.442302e+00\n4501 -19.39520613  1.059735e+01\n4502 -18.39520613  1.552933e+01\n4503 -11.60949184  1.142170e+01\n4504  -9.89520613  1.162451e+01\n4505  -3.39520613  2.368949e+01\n4506  10.60479387  2.055312e+01\n4507  27.10479387  2.181398e+01\n4508  29.60479387  1.618455e+01\n4509 -11.39520613  2.939307e-01\n4510  -7.89520613  2.098743e+00\n4511 -19.89520613 -7.145361e+00\n4512 -22.39520613 -8.483918e-01\n4513  -1.89520613  1.394746e+01\n4514  26.10479387  1.469787e+01\n4515   7.24765102  9.445745e+00\n4516 -17.39520613  8.906085e+00\n4517 -17.89520613  7.563169e+00\n4518  11.60479387  2.988729e+00\n4519   9.60479387  1.758343e+01\n4520  -5.89520613  1.023758e+01\n4521 -18.52020613  2.849401e+00\n4522  -3.89520613  1.624928e+00\n4523   7.10479387  1.673791e+01\n4524  20.60479387  2.807322e+01\n4525 -17.39520613  1.596979e+01\n4526 -13.39520613 -1.193089e+00\n4527 -20.89520613 -1.952865e+00\n4528   1.10479387  7.329968e+00\n4529 -10.89520613  4.696239e+00\n4530  19.10479387  6.329324e+00\n4531  20.10479387  1.013020e+01\n4532  19.60479387  2.702282e+01\n4533  14.67622245  3.241297e+01\n4534  -1.89520613  1.111834e+01\n4535  -6.39520613 -2.146811e+00\n4536 -17.89520613 -4.265388e+00\n4537 -17.39520613  3.383387e+00\n4538  -4.39520613  1.289807e+01\n4539  -7.75234898  1.093191e+01\n4540   7.10479387  1.361373e+01\n4541   4.60479387  1.697003e+01\n4542  11.60479387  1.883688e+01\n4543  10.60479387  7.667149e+00\n4544  16.10479387  9.475225e+00\n4545   9.39050816  1.336422e+01\n4546   5.60479387  2.024252e+01\n4547 -12.39520613  8.761457e+00\n4548 -20.39520613  6.147162e+00\n4549 -25.39520613  6.457768e+00\n4550 -15.89520613  9.376860e+00\n4551 -20.75234898  5.952827e+00\n4552  -6.39520613  8.063993e+00\n4553  -7.39520613  1.901146e+01\n4554   5.10479387  3.353040e+01\n4555  23.10479387  3.397103e+01\n4556  37.10479387  1.453905e+01\n4557  23.67622245  2.613052e+01\n4558  -7.89520613  8.942802e+00\n4559   6.60479387  1.083178e+01\n4560   3.60479387  1.616366e+01\n4561  10.60479387  2.208532e+01\n4562  10.10479387  1.193142e+01\n4563 -13.27020613  4.095849e+00\n4564  -7.89520613  9.256351e+00\n4565  -2.39520613  7.843308e+00\n4566  -3.39520613  9.337214e+00\n4567  21.60479387  9.553123e+00\n4568  11.10479387  1.045843e+01\n4569  -1.02020613  1.385615e+01\n4570  -6.39520613  8.969296e+00\n4571  -5.89520613  1.037788e+01\n4572  25.10479387  1.955339e+01\n4573   6.60479387  1.525526e+01\n4574 -22.39520613  4.356154e+00\n4575 -10.32377755  1.905396e+00\n4576   3.10479387  6.127893e+00\n4577  30.10479387  1.359404e+01\n4578  37.60479387  2.621549e+01\n4579  37.10479387  3.203863e+01\n4580  48.60479387  2.644575e+01\n4581  -4.60949184  6.662972e+00\n4582  -5.89520613  1.251146e+01\n4583   1.10479387  7.498716e+00\n4584  -7.39520613  8.497458e+00\n4585   5.10479387  1.083491e+01\n4586   6.10479387  7.731049e+00\n4587  -0.02020613  6.233355e+00\n4588 -10.39520613  1.520843e+01\n4589  -8.89520613  1.793949e+01\n4590   7.60479387  4.588861e+00\n4591  -7.89520613  6.821733e+00\n4592   1.60479387  1.456663e+01\n4593   8.96193673  1.105368e+01\n4594  20.10479387  1.473514e+01\n4595  -3.89520613  1.826032e+01\n4596 -21.89520613  6.722179e+00\n4597 -20.39520613 -2.178478e+00\n4598   3.10479387  4.057059e+00\n4599  -4.75234898  4.334672e+00\n4600 -14.39520613  1.057570e+00\n4601   9.10479387  9.248446e+00\n4602   4.60479387  2.738729e+00\n4603 -23.89520613  5.950851e+00\n4604  -7.89520613  2.846931e+00\n4605  -2.46663470  1.178254e+01\n4606   0.60479387 -1.518188e+00\n4607  -7.89520613 -5.391960e+00\n4608  -5.89520613  3.127728e+00\n4609 -25.39520613  2.772820e+00\n4610 -17.39520613  1.151608e+00\n4611  -1.03806327  1.062554e+01\n4612   0.10479387  9.239388e+00\n4613   2.10479387 -1.260729e+01\n4614 -17.39520613  4.140275e+00\n4615 -17.39520613  3.183558e+00\n4616  -5.39520613 -9.582403e-01\n4617  -5.32377755  3.194117e+00\n4618   2.60479387  1.092309e+00\n4619  -0.39520613  9.882175e+00\n4620  -9.89520613  1.325538e+01\n4621  -0.39520613  6.504046e+00\n4622  23.60479387  5.080429e+00\n4623  22.67622245  1.207699e+01\n4624 -20.39520613  1.051449e+01\n4625 -16.39520613  6.583144e+00\n4626  -5.89520613  5.866200e+00\n4627  28.60479387  1.642356e+01\n4628  49.60479387  2.062199e+01\n4629  40.10479387  2.868104e+01\n4630  26.60479387  3.805312e+01\n4631  25.10479387  3.552661e+01\n4632 -19.89520613  5.882669e+00\n4633  -5.89520613 -3.051290e+00\n4634   3.60479387 -2.049322e-02\n4635   6.39050816 -6.028713e+00\n4636  18.10479387 -4.396975e+00\n4637  14.10479387  2.511457e+00\n4638  -2.89520613  6.977366e+00\n4639 -15.39520613 -1.157221e+01\n4640 -10.39520613 -9.207087e+00\n4641  -9.60949184 -8.978662e+00\n4642 -15.89520613 -5.716056e+00\n4643  -8.89520613 -4.771317e+00\n4644   8.60479387  8.334264e-01\n4645   9.60479387  1.205312e+01\n4646 -20.89520613 -6.192056e+00\n4647 -22.02020613 -3.555078e+00\n4648  -3.89520613 -5.736073e+00\n4649  10.60479387  5.460403e+00\n4650 -24.89520613  1.815969e+00\n4651   4.10479387  7.476987e+00\n4652  38.10479387  2.723532e+01\n4653 -10.32377755  1.768797e+01\n4654 -21.39520613 -1.390198e+00\n4655 -22.89520613 -6.811501e+00\n4656  -4.39520613 -5.924281e+00\n4657  -6.89520613 -1.037202e+01\n4658 -14.89520613 -9.260513e+00\n4659 -19.14520613 -3.027180e+00\n4660 -20.39520613 -3.668846e+00\n4661  -0.89520613 -1.005109e+01\n4662 -13.39520613 -1.823738e+00\n4663  -5.39520613 -4.966080e+00\n4664  15.60479387 -5.013164e+00\n4665  13.10479387 -1.348968e+01\n4666  -9.39520613  3.664487e+00\n4667  -6.89520613 -5.081346e+00\n4668  22.60479387  1.460502e+00\n4669  -6.89520613 -5.196926e+00\n4670  -8.89520613 -8.615767e+00\n4671  10.39050816  5.411770e+00\n4672   9.60479387  3.781154e+00\n4673 -24.39520613 -4.539680e+00\n4674 -10.89520613 -1.465073e+01\n4675   2.60479387 -1.033533e+01\n4676  -2.89520613 -1.256722e+01\n4677   2.53336530 -8.998194e+00\n4678  -4.39520613  7.032551e-01\n4679 -19.39520613  1.285320e+00\n4680 -20.39520613 -5.685513e+00\n4681  17.10479387 -6.218524e+00\n4682  12.60479387 -8.111056e+00\n4683   4.96193673 -9.603761e+00\n4684  34.10479387 -4.360513e+00\n4685  37.10479387  7.187577e+00\n4686  34.60479387  1.925615e+01\n4687  12.60479387 -4.668846e+00\n4688  20.60479387 -6.667836e+00\n4689 -13.60949184 -2.462687e+00\n4690  -5.39520613 -6.491069e+00\n4691  45.60479387 -1.066015e+01\n4692  17.60479387 -8.073194e+00\n4693  -4.89520613 -9.046624e+00\n4694   2.10479387 -2.129957e+00\n4695   8.24765102 -1.357440e+01\n4696  17.10479387  2.647820e+00\n4697  15.60479387  3.758931e+00\n4698 -15.89520613 -1.157735e+00\n4699  27.60479387 -1.673788e+01\n4700  32.10479387 -7.018846e+00\n4701 -10.14520613 -4.494019e-01\n4702 -11.89520613 -1.285218e+01\n4703 -17.39520613 -7.421624e+00\n4704  -8.89520613 -1.228575e+01\n4705  57.10479387 -4.866069e+00\n4706  46.10479387 -7.710271e+00\n4707   3.72979387 -1.858135e+01\n4708  17.10479387 -1.787301e+01\n4709  24.10479387 -1.385218e+01\n4710   4.10479387 -1.288880e+01\n4711 -14.89520613 -1.331293e+01\n4712  -3.89520613 -1.371329e+01\n4713  -4.27020613 -1.286607e+01\n4714 -18.89520613 -1.296329e+01\n4715 -22.89520613 -1.242162e+01\n4716 -16.89520613 -1.178274e+01\n4717  -8.89520613 -1.548382e+01\n4718   4.10479387 -1.550617e+01\n4719  -2.75234898 -1.349107e+01\n4720   9.10479387 -1.116860e+01\n4721   5.60479387 -1.701885e+01\n4722 -28.39520613 -8.671624e+00\n4723 -17.39520613 -1.247718e+01\n4724  -7.89520613 -1.600496e+01\n4725  -5.60949184 -1.715290e+01\n4726  10.60479387 -1.474107e+01\n4727 -16.39520613 -1.244688e+01\n4728  -9.89520613 -1.472718e+01\n4729 -14.39520613 -1.783829e+01\n4730   4.10479387 -1.185460e+01\n4731 -18.60949184 -8.884788e+00\n4732 -14.89520613 -1.699107e+01\n4733 -15.39520613 -1.538781e+01\n4734 -16.39520613 -1.154481e+01\n4735  -7.39520613 -1.225496e+01\n4736  -1.89520613 -1.603274e+01\n4737  -9.14520613 -5.869088e+00\n4738  -6.89520613 -1.153400e+01\n4739  -9.39520613 -1.476220e+01\n4740   5.10479387 -1.319940e+01\n4741   1.10479387 -1.232440e+01\n4742  11.60479387 -1.229662e+01\n4743  -7.14520613  5.922648e-01\n4744  -4.39520613 -8.587083e+00\n4745 -10.89520613 -1.097718e+01\n4746  -9.39520613 -1.579119e+01\n4747 -20.89520613 -9.683701e+00\n4748 -12.39520613 -1.375496e+01\n4749  -4.56187279 -1.481430e+01\n4750  13.60479387 -2.907735e+00\n4751 -22.39520613 -1.033648e+01\n4752 -14.89520613 -8.376334e+00\n4753 -10.39520613 -1.508286e+01\n4754  -1.89520613 -1.567366e+01\n4755  -6.89520613 -1.149738e+01\n4756  -6.89520613 -1.324107e+01\n4757  -8.39520613 -1.762996e+01\n4758 -16.89520613 -1.149107e+01\n4759  -9.39520613 -7.616069e+00\n4760 -15.89520613 -7.501938e+00\n4761 -14.75234898 -1.069940e+01\n4762  -5.89520613 -1.632380e+01\n4763   1.10479387 -1.611607e+01\n4764 -17.89520613  1.064487e+00\n4765 -10.39520613 -1.491069e+00\n4766  -9.39520613 -1.529542e+01\n4767  -0.60949184 -1.640774e+01\n4768 -11.39520613 -6.600972e+00\n4769  12.60479387 -1.304284e+01\n4770  -2.39520613 -1.400496e+01\n4771  -6.89520613 -4.796624e+00\n4772   2.10479387 -1.325496e+01\n4773 -10.03806327 -8.859755e+00\n4774  -2.89520613 -1.024107e+01\n4775  -7.89520613 -8.582252e+00\n4776  14.60479387 -1.324107e+01\n4777  -1.89520613  1.870043e+00\n4778  -5.89520613 -1.061607e+01\n4779  -0.03806327 -7.782735e+00\n4780  -5.39520613 -1.003274e+01\n4781   7.10479387 -1.293551e+01\n4782  -5.89520613 -9.248644e+00\n4783 -13.39520613 -7.226576e+00\n4784  -6.89520613 -7.963291e+00\n4785   3.77146054 -1.312996e+01\n4786  -8.39520613 -5.070779e+00\n4787   5.10479387 -9.574402e+00\n4788   7.60479387 -7.914982e+00\n4789  21.10479387 -1.154662e+01\n4790 -17.89520613 -4.957423e-03\n4791  -6.72853946  1.939487e+00\n4792   2.10479387 -7.616069e+00\n4793 -16.89520613 -6.257483e+00\n4794  -4.39520613 -1.444940e+01\n4795  -8.89520613 -2.970537e+00\n4796   0.10479387 -5.134788e+00\n4797 -13.75234898  4.606154e+00\n4798 -17.89520613  2.938224e+00\n4799  -7.89520613  3.647820e+00\n4800   6.10479387 -1.112996e+01\n4801   5.10479387 -1.112996e+01\n4802  27.10479387  7.050598e+00\n4803 -11.72853946 -4.166534e+00\n4804  14.60479387 -4.107614e+00\n4805  -5.39520613  5.175598e+00\n4806 -22.39520613  2.397820e+00\n4807   3.10479387 -8.935513e+00\n4808   1.10479387  5.318783e-01\n4809 -18.06187279  4.155757e+00\n4810 -22.39520613  6.331395e+00\n4811  -6.89520613  5.644870e-01\n4812   3.10479387 -6.421624e+00\n4813  -1.89520613 -7.574402e+00\n4814  17.60479387 -2.810513e+00\n4815   4.39050816  2.314487e+00\n4816  44.10479387  8.050598e+00\n4817   8.60479387 -1.238653e+00\n4818 -22.89520613 -1.891362e-01\n4819 -27.89520613  8.022820e+00\n4820 -13.89520613 -6.004957e+00\n4821  -0.32377755 -1.531051e+01\n4822  11.60479387 -5.441552e+00\n4823   0.10479387 -2.879354e+00\n4824 -28.39520613  1.798115e+01\n4825 -22.89520613  1.507018e+01\n4826 -15.89520613  1.814487e+00\n4827  -7.03806327 -4.393846e+00\n4828 -14.39520613 -5.152180e+00\n4829   2.10479387 -1.757609e+01\n4830  18.60479387 -1.230337e+01\n4831  28.60479387 -4.530078e+00\n4832   5.10479387 -1.336962e+00\n4833 -15.18092041  1.101449e+01\n4834  -9.39520613  1.115615e+01\n4835 -12.89520613  8.389125e+00\n4836 -19.89520613 -4.446383e+00\n4837 -15.39520613 -2.905968e+00\n4838  -6.89520613  3.144870e-01\n4839  17.67622245 -9.370296e+00\n4840  14.10479387 -5.366069e+00\n4841  12.10479387  2.235783e+00\n4842  11.10479387 -1.643122e+00\n4843 -15.39520613  4.361407e+00\n4844  27.10479387  2.914487e+00\n4845  44.27146054  4.408146e+00\n4846  -4.89520613 -5.544983e+00\n4847 -11.39520613  6.422820e+00\n4848 -12.39520613  2.262733e+00\n4849 -16.39520613  7.544680e+00\n4850 -21.89520613  1.524431e+00\n4851  -5.32377755  3.797044e-01\n4852   5.10479387  1.626081e+00\n4853  38.10479387  4.341002e+00\n4854  12.10479387  3.920548e+00\n4855 -13.89520613 -1.637753e+00\n4856 -19.39520613 -4.740167e+00\n4857   1.39050816 -1.162997e+01\n4858  11.60479387 -1.060685e+01\n4859  -6.89520613 -6.825724e+00\n4860 -25.89520613  8.908361e+00\n4861  -9.39520613  5.976392e-01\n4862 -13.39520613  1.211449e+01\n4863 -15.18092041  1.353043e+01\n4864 -20.89520613  1.547758e+01\n4865  -9.39520613  7.047830e+00\n4866  26.10479387  3.569098e+00\n4867  18.60479387  9.409528e+00\n4868 -23.39520613  2.787972e+00\n4869   1.43812721  3.579639e+00\n4870  11.10479387  1.695880e+00\n4871   2.10479387  6.282926e+00\n4872  11.60479387  1.139951e+01\n4873  28.60479387  1.206366e+01\n4874  31.10479387  1.440605e+01\n4875   4.39050816  1.258115e+01\n4876  -4.39520613  5.851987e+00\n4877  51.10479387  5.505198e+00\n4878 -18.39520613  1.337379e+00\n4879 -12.39520613  1.051806e+00\n4880   9.60479387 -1.591278e-01\n4881   4.10479387  3.385633e+00\n4882  -2.39520613  5.102366e+00\n4883 -13.89520613  1.266676e+01\n4884   3.10479387 -9.279372e-01\n4885   7.10479387 -3.913353e-01\n4886  14.10479387 -4.983633e+00\n4887  -9.03806327  8.463532e+00\n4888 -28.39520613  5.804112e+00\n4889 -17.39520613  3.883013e+00\n4890  -4.39520613  7.159184e+00\n4891  17.60479387 -3.994458e-01\n4892   8.10479387  5.300818e+00\n4893  25.24765102  1.454966e+01\n4894  22.60479387  9.840194e+00\n4895  24.60479387 -2.119966e+00\n4896  -2.39520613  1.289024e+01\n4897 -23.39520613  5.954639e+00\n4898 -24.39520613  6.428123e+00\n4899  -1.18092041  6.985630e+00\n4900  12.60479387 -5.565783e+00\n4901  15.10479387  1.401739e+01\n4902 -11.89520613  6.438454e+00\n4903 -21.89520613  1.001524e+01\n4904 -13.89520613  8.595614e+00\n4905 -18.75234898  1.120540e+01\n4906   2.10479387  9.876215e-01\n4907  31.60479387  1.412600e+01\n4908  21.10479387  3.118372e+01\n4909  42.10479387  3.632552e+01\n4910  48.60479387  1.261373e+01\n4911 -12.75234898 -3.412786e+00\n4912 -22.39520613 -1.084136e+01\n4913  -4.89520613 -6.466475e+00\n4914  -0.89520613  8.121223e+00\n4915 -12.89520613  7.261382e+00\n4916 -11.39520613  3.596272e+00\n4917 -22.06187279  6.323957e+00\n4918 -22.39520613  9.958426e+00\n4919   6.60479387  1.120843e+01\n4920  -2.39520613  1.990796e+00\n4921 -17.39520613  7.039918e+00\n4922 -10.89520613  9.162313e+00\n4923  -6.22853946  4.782537e+00\n4924 -10.39520613  3.325851e+00\n4925  -8.39520613  1.048684e+01\n4926 -14.89520613  2.945685e+00\n4927 -13.39520613  2.507518e-01\n4928  -3.89520613 -9.418550e+00\n4929 -11.64520613  6.694771e-01\n4930  -5.89520613  1.528046e+00\n4931  -6.89520613  1.530988e+01\n4932  -1.89520613  1.627587e+01\n4933 -18.89520613  1.838120e+00\n4934 -11.89520613  7.844790e+00\n4935  -2.64520613  2.135706e+01\n4936  -7.39520613  1.857443e+01\n4937 -11.89520613  5.139256e+00\n4938   4.10479387  1.490918e+01\n4939  12.60479387  1.776903e+01\n4940 -13.39520613  9.880207e+00\n4941  -8.72853946  1.318233e+01\n4942  -8.39520613  1.735887e+01\n4943   2.60479387  1.376401e+01\n4944 -10.89520613  1.322177e+01\n4945 -17.89520613  7.435699e+00\n4946 -12.39520613  3.250093e+00\n4947  -4.60949184  4.379375e+00\n4948 -16.89520613  1.827251e+00\n4949 -22.39520613 -2.222995e-02\n4950   2.10479387 -2.047682e+00\n4951 -14.39520613 -2.849521e+00\n4952 -17.39520613 -2.280210e+00\n4953 -20.18092041 -1.840816e+00\n4954  -9.89520613  1.029341e+01\n4955   3.10479387  1.134372e+01\n4956  28.10479387  1.644698e+01\n4957  25.10479387  1.259545e+01\n4958  -3.89520613  1.279883e+01\n4959  -6.60949184  2.877282e+01\n4960 -13.39520613  1.587756e+01\n4961  -9.39520613 -1.649236e+00\n4962  -2.39520613 -1.399386e+00\n4963   0.10479387  6.644856e+00\n4964 -28.39520613  8.220119e+00\n4965  -6.69520613  3.306582e+00\n4966  -0.39520613  4.100472e+00\n4967  -1.89520613  1.107179e+01\n4968 -11.89520613 -1.007740e+00\n4969  -3.89520613  1.321075e+00\n4970   4.60479387  6.374875e+00\n4971  -7.69520613  3.420136e+00\n4972 -10.39520613 -1.852180e+00\n4973  -8.39520613  4.070169e+00\n4974 -10.89520613  6.501987e+00\n4975  16.10479387  1.145310e+01\n4976  19.60479387  1.953272e+01\n4977 -16.39520613  1.789454e+00\n4978 -11.89520613  2.127199e+00\n4979 -21.39520613  3.411033e+00\n4980 -14.39520613 -2.039680e+00\n4981 -22.39520613  8.401608e+00\n4982  -6.39520613  9.569428e+00\n4983   7.27146054  9.318028e+00\n4984  12.60479387  8.976789e+00\n4985  -4.39520613  5.785157e+00\n4986  19.60479387  4.430429e+00\n4987  14.10479387  1.044138e+01\n4988 -15.39520613  2.235805e+01\n4989   3.39050816  1.181638e+01\n4990  10.60479387  8.916513e+00\n4991  25.10479387  1.024334e+01\n4992  22.60479387  1.603526e+01\n4993  23.60479387  2.138376e+01\n4994  -2.39520613  1.795106e+01\n4995  -0.18092041  1.684689e+01\n4996 -24.89520613  4.974209e+00\n4997 -21.39520613  1.043814e+01\n4998  -3.39520613  5.341842e+00\n4999  14.10479387  6.591570e+00\n5000   8.10479387 -4.484064e+00\n5001  -7.18092041 -1.195930e+00\n5002 -13.89520613 -5.606346e+00\n5003   3.10479387  6.591428e-01\n5004 -17.39520613 -2.018846e+00\n5005   7.60479387 -7.879354e+00\n5006 -10.39520613 -8.285466e-01\n5007 -20.75234898 -6.776422e+00\n5008 -19.39520613 -5.615437e+00\n5009  -8.89520613  8.509810e+00\n5010  23.10479387  4.275455e+00\n5011  35.60479387  2.018814e+01\n5012 -12.39520613 -1.020849e+01\n5013 -16.89520613 -4.587492e+00\n5014  -6.89520613 -1.202766e+01\n5015 -20.39520613 -7.076159e+00\n5016 -29.39520613  3.072063e+00\n5017 -26.89520613 -2.228003e+00\n5018  -5.39520613 -9.265148e+00\n5019 -11.89520613 -4.057384e+00\n5020 -17.89520613 -4.186816e+00\n5021   3.60479387 -9.217661e+00\n5022  13.60479387  4.564487e+00\n5023  31.10479387  2.765724e+01\n5024  12.10479387  9.758426e+00\n5025  -3.89520613 -5.056495e+00\n5026 -23.89520613  8.145284e+00\n5027 -20.39520613 -2.585604e+00\n5028 -19.39520613 -5.020073e+00\n5029 -20.89520613 -8.589498e+00\n5030 -25.89520613 -7.008430e+00\n5031 -15.60949184 -1.162917e+01\n5032  -0.39520613 -1.177581e+01\n5033  18.60479387 -1.066051e+01\n5034  45.10479387  6.317548e-01\n5035  47.10479387  9.577802e+00\n5036  20.60479387  5.487404e+00\n5037 -14.32377755 -2.383430e+00\n5038  -6.89520613 -3.865948e+00\n5039  -5.39520613 -9.421308e+00\n5040  23.60479387 -1.016703e+01\n5041  11.60479387 -6.634401e+00\n5042  23.10479387  3.401584e+00\n5043   5.10479387  1.220737e+00\n5044   1.10479387 -7.794027e+00\n5045  21.60479387 -1.628400e+01\n5046  -2.39520613 -9.261147e+00\n5047  -0.89520613 -7.641672e+00\n5048  31.60479387 -1.390133e+00\n5049  -4.18092041 -4.184607e+00\n5050 -25.39520613  3.908237e+00\n5051 -10.39520613 -3.060513e+00\n5052  -9.89520613 -8.369027e+00\n5053   2.60479387 -1.397854e+01\n5054   4.60479387 -1.158829e+01\n5055  -2.22853946 -1.375496e+01\n5056  -3.89520613 -1.199409e+01\n5057  -5.39520613 -1.271631e+01\n5058  -7.89520613 -5.127432e+00\n5059  -3.89520613 -8.225903e-01\n5060 -20.39520613 -1.457380e+01\n5061 -16.18092041 -1.642947e+01\n5062 -23.39520613 -1.457923e+01\n5063 -16.39520613 -1.586607e+01\n5064 -11.89520613 -1.450496e+01\n5065 -19.39520613 -1.369940e+01\n5066 -17.89520613 -1.560218e+01\n5067 -20.32377755 -1.243551e+01\n5068  -7.39520613 -1.189385e+01\n5069  -7.39520613 -1.453092e+01\n5070 -18.89520613 -1.108648e+01\n5071  -6.89520613 -7.213291e+00\n5072 -16.39520613 -8.227180e+00\n5073 -13.46663470 -9.219604e+00\n5074  -9.89520613 -8.713291e+00\n5075  -3.89520613 -1.464385e+01\n5076  -0.89520613 -1.514385e+01\n5077   0.10479387 -1.564687e+01\n5078  -5.89520613 -1.206051e+01\n5079 -10.60949184 -1.839385e+01\n5080   6.60479387 -1.829662e+01\n5081  -5.39520613 -1.674107e+01\n5082 -12.89520613 -1.811607e+01\n5083 -17.39520613 -1.456430e+01\n5084 -26.89520613  1.731154e+00\n5085 -27.46663470  8.272820e+00\n5086 -17.89520613 -1.329662e+01\n5087  -3.39520613 -1.331051e+01\n5088 -15.89520613 -6.228387e+00\n5089 -10.89520613 -1.460218e+01\n5090  -7.39520613 -1.766136e+01\n5091  -3.89520613 -1.236607e+01\n5092   3.60479387 -1.624107e+01\n5093  -6.89520613 -1.699107e+01\n5094 -19.89520613 -3.866069e+00\n5095  -5.89520613 -1.119940e+01\n5096   3.10479387 -1.550194e+01\n5097  -0.32377755 -1.678274e+01\n5098   5.10479387 -1.797235e+01\n5099 -17.39520613 -1.822718e+01\n5100 -15.39520613 -6.018846e+00\n5101  -6.39520613 -1.583135e+01\n5102  -8.39520613 -1.264385e+01\n5103   4.67622245 -1.626975e+01\n5104   1.10479387 -8.511600e+00\n5105  -9.39520613 -1.164385e+01\n5106  -0.89520613 -1.483135e+01\n5107   1.60479387 -1.045635e+01\n5108   6.60479387 -1.493551e+01\n5109  -8.06187279 -1.249801e+01\n5110   4.10479387 -1.435218e+01\n5111  -2.39520613 -1.216468e+01\n5112 -10.89520613 -7.727180e+00\n5113 -25.39520613 -2.289680e+00\n5114 -23.39520613 -6.581346e+00\n5115  -5.69520613 -1.216468e+01\n5116  -7.89520613 -1.446013e+01\n5117  -3.89520613 -1.351885e+01\n5118  -8.89520613 -1.181051e+01\n5119  -9.89520613 -1.015743e+01\n5120 -11.89520613 -1.343551e+01\n5121 -12.09520613 -1.081051e+01\n5122 -16.89520613 -1.145635e+01\n5123           NA -1.183135e+01\n5124  -2.89520613 -1.468551e+01\n5125   2.10479387 -1.723805e+01\n5126   1.10479387 -1.757319e+01\n5127  -2.06187279 -1.485218e+01\n5128 -11.89520613 -1.893551e+01\n5129 -20.39520613 -1.785218e+01\n5130 -18.89520613 -1.518551e+01\n5131  -3.89520613 -1.499801e+01\n5132   9.10479387 -1.505327e+01\n5133  -7.89520613 -1.138932e+01\n5134 -13.89520613 -8.810513e+00\n5135   0.10479387 -1.428968e+01\n5136  34.10479387 -1.631051e+01\n5137  11.10479387 -1.624801e+01\n5138  -2.89520613 -1.128210e+01\n5139  -5.39520613 -1.227700e+01\n5140   0.10479387 -1.481051e+01\n5141 -19.39520613 -3.730130e-01\n5142  -4.89520613 -1.197718e+01\n5143  -2.89520613 -1.458324e+01\n5144 -22.89520613 -1.318551e+01\n5145  -9.56187279 -1.443642e+01\n5146  -4.89520613 -8.789680e+00\n5147  -1.39520613 -8.956346e+00\n5148  -8.39520613 -1.435218e+01\n5149 -15.89520613 -1.485218e+01\n5150   1.10479387 -1.397899e+01\n5151   2.60479387 -1.357229e+01\n5152   0.10479387 -1.470635e+01\n5153  10.60479387 -1.424801e+01\n5154 -11.39520613 -4.560513e+00\n5155 -17.39520613 -3.571542e+00\n5156 -14.89520613 -5.361108e+00\n5157  -4.89520613 -1.328968e+01\n5158   0.10479387 -1.226160e+01\n5159 -15.39520613 -9.248013e+00\n5160 -21.89520613  4.418654e+00\n5161 -10.89520613 -2.873013e+00\n5162 -22.89520613 -2.456346e+00\n5163 -17.49520613 -1.935513e+00\n5164  30.10479387 -8.935513e+00\n5165  -3.89520613 -6.855130e-01\n5166 -17.89520613  3.760139e+00\n5167 -12.39520613 -6.018846e+00\n5168 -10.39520613  5.981154e+00\n5169  -2.39520613 -9.873013e+00\n5170 -21.89520613  5.835320e+00\n5171 -12.89520613 -7.072521e-01\n5172 -22.89520613  1.231991e-01\n5173 -15.89520613 -4.152904e+00\n5174  -6.89520613 -4.560513e+00\n5175   1.10479387 -1.191468e+01\n5176  15.60479387 -1.324801e+01\n5177 -19.39520613  3.564487e+00\n5178 -11.39520613 -8.134631e-02\n5179 -13.89520613 -3.916491e+00\n5180  -2.89520613 -2.143846e+00\n5181  -8.89520613  2.859130e+00\n5182 -14.39520613 -5.810513e+00\n5183  11.60479387 -2.602180e+00\n5184 -24.89520613  9.689487e+00\n5185  -2.39520613 -9.081346e+00\n5186 -15.39520613  3.460320e+00\n5187 -13.89520613 -5.044209e+00\n5188 -16.89520613  8.005981e-01\n5189 -26.89520613  1.384226e+01\n5190 -27.89520613  1.087004e+01\n5191 -17.39520613  5.647820e+00\n5192 -10.89520613  5.489992e+00\n5193  -5.06187279  8.536105e+00\n5194   0.60479387  6.560260e+00\n5195   5.10479387 -1.282735e+00\n5196  -1.39520613  1.842265e+00\n5197 -13.39520613  9.092265e+00\n5198  -9.89520613  1.411709e+00\n5199 -17.56187279 -4.643846e+00\n5200 -13.39520613 -2.715102e+00\n5201  11.10479387 -8.104438e-02\n5202   3.10479387  1.938169e+00\n5203  15.10479387  7.133931e+00\n5204  10.60479387  2.175598e+00\n5205 -20.22853946  6.360320e+00\n5206   3.60479387 -3.857483e+00\n5207 -16.89520613  1.856304e+01\n5208  -2.89520613  9.339487e+00\n5209  21.10479387 -3.412143e+00\n5210   5.10479387 -7.525664e+00\n5211   9.93812721  1.296865e+01\n5212 -11.39520613  1.504782e+01\n5213 -11.39520613  7.435864e+00\n5214  -9.39520613 -5.483701e+00\n5215  -9.89520613 -3.757071e+00\n5216   4.10479387  1.124523e+01\n5217  -9.22853946  1.181154e+00\n5218  -7.89520613  6.118654e+00\n5219 -12.39520613  2.043115e+01\n5220 -16.89520613  6.832241e+00\n5221 -19.39520613  1.022246e+01\n5222  -0.89520613 -3.105984e+00\n5223   3.50479387  8.818835e+00\n5224  22.10479387  1.479782e+01\n5225  10.60479387  9.789487e+00\n5226  -3.89520613  4.122820e+00\n5227  19.10479387  6.299994e+00\n5228 -12.89520613  8.518127e+00\n5229  -8.49520613 -2.757304e-01\n5230  29.60479387  1.178960e+01\n5231 -16.89520613  1.646376e+01\n5232 -15.39520613  9.797820e+00\n5233  -5.89520613  1.588949e+01\n5234  31.60479387  1.742318e+01\n5235  25.77146054  2.338458e+01\n5236  55.60479387  1.726485e+01\n5237  63.60479387  2.278478e+01\n5238 -16.89520613  1.408478e+01\n5239 -15.89520613  1.132699e+01\n5240  -1.39520613  1.333532e+01\n5241  -6.56187279 -6.567086e-01\n5242  17.60479387  7.040755e+00\n5243  25.10479387  1.741818e+01\n5244  34.10479387  1.668641e+01\n5245 -17.89520613  1.692929e+00\n5246 -26.39520613  1.172137e+01\n5247  -2.89520613  3.539487e+00\n5248   8.10479387  5.667433e-01\n5249   9.10479387  1.069800e+01\n5250   7.10479387  1.392867e+01\n5251  12.10479387  4.894469e+00\n5252 -13.39520613  1.794184e+01\n5253 -12.39520613  1.673532e+01\n5254 -10.39520613  2.156503e+01\n5255 -10.39520613  4.782241e+00\n5256  -8.89520613  1.125357e+00\n5257  -7.89520613 -6.814150e+00\n5258 -17.39520613 -5.327924e+00\n5259 -13.56187279 -7.799442e+00\n5260 -20.39520613  1.154821e-02\n5261 -12.89520613  5.817708e+00\n5262 -10.39520613  3.152450e+00\n5263 -22.39520613  1.187172e+00\n5264 -22.39520613  8.283040e+00\n5265  -7.89520613  3.058509e+00\n5266 -18.39520613  4.778963e+00\n5267 -25.39520613  3.335320e+00\n5268 -28.89520613 -4.010513e+00\n5269 -25.39520613  1.519870e-01\n5270 -14.89520613 -7.434879e+00\n5271   1.43812721 -3.963230e+00\n5272 -12.39520613  2.943654e+00\n5273  -4.89520613  2.380429e+00\n5274   9.60479387  9.993654e+00\n5275   1.60479387  2.341865e+01\n5276  16.10479387  1.531920e+01\n5277   0.43812721  1.854936e+01\n5278  27.10479387  3.238432e+01\n5279  23.60479387  2.190729e+01\n5280  -8.89520613  5.376754e-01\n5281  -9.89520613  1.318115e+01\n5282  -6.89520613  1.518740e+01\n5283   2.60479387  2.888922e+01\n5284   5.60479387  2.704153e+01\n5285 -14.89520613  1.064574e+01\n5286 -11.39520613  3.950098e+00\n5287 -13.89520613  1.051987e+00\n5288 -12.89520613  1.061537e-01\n5289  -3.72853946  1.476032e+01\n5290  11.60479387  1.992998e+01\n5291   9.10479387  2.324603e+01\n5292  23.60479387  2.267463e+01\n5293  32.10479387  2.352282e+01\n5294  36.60479387  2.311032e+01\n5295  11.77146054  2.751032e+01\n5296 -17.89520613  3.304070e+00\n5297 -13.39520613  1.970737e+00\n5298  -7.89520613  8.095957e-01\n5299  -6.39520613  1.154782e+01\n5300 -14.39520613  2.583509e+00\n5301 -11.89520613  6.626715e+00\n5302   0.60479387  8.578799e+00\n5303  -7.89520613  3.661105e+00\n5304   2.60479387  7.628939e+00\n5305   1.60479387  1.426920e+01\n5306 -23.89520613  5.529070e+00\n5307 -13.69520613 -1.403687e+00\n5308 -13.89520613 -3.238280e+00\n5309  -3.39520613  9.076987e+00\n5310  13.60479387  1.885199e+01\n5311  24.10479387  2.145760e+01\n5312  33.60479387  2.243191e+01\n5313  13.90479387  7.221775e+00\n5314   8.10479387  1.334626e+01\n5315  24.60479387  1.356829e+01\n5316   5.60479387  1.100615e+01\n5317  -8.39520613  9.876987e+00\n5318   0.10479387  1.597800e+00\n5319  -1.49520613  1.386240e+01\n5320 -13.39520613  1.129347e+01\n5321 -22.89520613  8.517171e+00\n5322  -8.89520613  1.114492e+01\n5323   3.60479387  8.309942e+00\n5324   3.60479387  1.799990e+01\n5325  14.27146054  2.165181e+01\n5326  11.10479387  2.270970e+01\n5327  47.60479387  2.574184e+01\n5328   4.60479387  2.928035e+00\n5329 -10.89520613  7.548364e+00\n5330 -13.89520613  4.004070e+00\n5331  -1.39520613  1.841249e+01\n5332  16.10479387  1.291612e+01\n5333   6.60479387  2.016114e+01\n5334  36.10479387  1.854496e+01\n5335  32.10479387  1.729694e+01\n5336 -20.39520613  4.071975e+00\n5337 -17.22853946  3.049904e+00\n5338  -6.89520613  8.892204e+00\n5339 -15.89520613  6.466570e+00\n5340 -17.39520613  2.258328e+00\n5341   4.60479387  2.918662e+00\n5342  -2.89520613  2.141628e+00\n5343 -13.39520613 -4.058339e+00\n5344 -11.89520613 -7.139680e+00\n5345 -17.39520613  3.599904e+00\n5346   2.10479387 -7.318846e+00\n5347  14.10479387 -1.496473e+00\n5348  10.10479387  3.591661e+00\n5349  -3.39520613  1.041994e+01\n5350   4.10479387  1.778020e+01\n5351  -7.89520613  1.197820e+00\n5352  -9.39520613  7.203376e+00\n5353   5.60479387  2.627559e-01\n5354  -9.39520613 -3.589137e-01\n5355  -1.09520613  3.401041e+00\n5356   2.60479387  9.729536e+00\n5357 -12.39520613 -5.770891e-01\n5358 -19.89520613  6.145737e+00\n5359  -6.89520613  1.618654e+00\n5360   3.10479387  1.458740e+01\n5361 -19.29520613  2.752530e+00\n5362  -2.39520613  4.216117e+00\n5363   9.10479387  1.329181e+01\n5364 -13.89520613  1.366661e+00\n5365  -3.39520613  8.693654e+00\n5366 -12.89520613 -8.248013e+00\n5367 -14.49520613 -6.471992e+00\n5368  -5.89520613 -3.835694e+00\n5369  17.60479387  7.004433e+00\n5370 -18.39520613  3.910683e+00\n5371 -18.89520613  2.793308e+00\n5372 -12.89520613 -9.709296e-01\n5373  -3.06187279  4.629070e+00\n5374   4.60479387 -6.372107e+00\n5375   0.60479387  1.537373e+01\n5376 -16.89520613 -2.320114e+00\n5377  21.10479387 -4.485694e+00\n5378  -5.39520613 -9.341672e+00\n5379  -9.06187279 -4.862596e+00\n5380 -12.39520613 -4.781346e+00\n5381 -22.89520613 -4.433421e+00\n5382 -18.39520613 -5.662687e+00\n5383 -13.39520613 -3.821690e+00\n5384 -16.89520613 -3.635604e+00\n5385 -22.72853946 -4.085694e+00\n5386 -16.89520613 -5.641763e+00\n5387   3.60479387 -7.627180e+00\n5388  28.10479387 -6.996106e+00\n5389  40.60479387  3.901965e+00\n5390  32.60479387  1.605050e+01\n5391 -10.39520613 -1.298181e+01\n5392 -15.39520613 -1.415002e+01\n5393  -8.39520613 -8.775791e+00\n5394  -9.89520613 -7.335976e+00\n5395  -3.39520613 -1.357614e+00\n5396  18.10479387  9.964950e+00\n5397  -8.22853946 -2.273476e+00\n5398   2.10479387 -6.755763e+00\n5399  -3.39520613 -9.852180e+00\n5400  -7.39520613 -1.156283e+01\n5401 -21.89520613 -5.463291e+00\n5402  -1.39520613 -1.339006e+01\n5403 -22.49520613 -1.143930e+01\n5404   7.10479387 -1.080387e+01\n5405  34.60479387 -6.072508e+00\n5406   5.60479387 -8.932091e+00\n5407  24.60479387 -6.315143e+00\n5408  10.60479387 -2.317457e+00\n5409   1.60479387 -8.982139e+00\n5410  10.10479387 -8.102381e+00\n5411  -0.89520613 -8.946167e+00\n5412   0.10479387 -1.589123e+00\n5413 -11.39520613 -5.282936e+00\n5414  -7.89520613 -3.686217e+00\n5415 -15.39520613 -6.148476e+00\n5416   5.60479387 -7.444772e+00\n5417   5.60479387 -1.555963e+01\n5418  58.60479387  4.298521e+00\n5419  49.10479387  6.148424e+00\n5420   4.60479387 -6.310513e+00\n5421   2.27146054 -1.046329e+01\n5422   1.10479387 -5.056545e+00\n5423  25.10479387 -1.508829e+01\n5424  41.60479387 -1.380266e+01\n5425  50.60479387 -1.250254e+01\n5426   8.10479387 -9.810513e+00\n5427  -1.89520613 -1.378274e+01\n5428   6.10479387 -5.379957e+00\n5429 -18.39520613  2.282035e-02\n5430  10.60479387 -1.537996e+01\n5431  44.60479387 -1.146329e+01\n5432  61.10479387 -1.025737e+01\n5433  25.77146054 -8.324402e+00\n5434  12.60479387 -1.117646e+01\n5435  39.10479387 -1.660218e+01\n5436  28.10479387 -1.378274e+01\n5437  -5.89520613 -7.905924e+00\n5438  -4.89520613 -1.193551e+01\n5439  -4.29520613 -1.464385e+01\n5440   1.60479387 -9.949402e+00\n5441   0.60479387 -7.107230e+00\n5442  -6.89520613 -2.622038e-01\n5443 -21.89520613 -1.042162e+01\n5444   1.60479387 -1.316619e+01\n5445 -12.72853946 -1.451885e+01\n5446 -10.39520613 -1.646077e+01\n5447 -21.39520613 -1.644940e+01\n5448 -20.89520613 -1.819940e+01\n5449  -0.39520613 -1.203274e+01\n5450  -4.89520613 -1.257440e+01\n5451  -5.22853946 -1.380810e+01\n5452  24.10479387 -1.247899e+01\n5453  47.60479387  3.425598e+00\n5454  -0.89520613 -1.087996e+01\n5455 -10.39520613 -8.316826e+00\n5456  -2.39520613 -8.699402e+00\n5457 -10.72853946 -1.379662e+01\n5458  17.10479387 -1.553274e+01\n5459  21.10479387 -1.635822e+01\n5460  17.60479387 -1.771329e+01\n5461 -14.89520613 -1.647213e+01\n5462   2.60479387 -1.715049e+01\n5463  -8.09520613 -1.519940e+01\n5464 -13.89520613 -1.686607e+01\n5465 -16.89520613 -1.639324e+01\n5466  16.60479387 -1.569276e+01\n5467 -11.39520613 -1.077126e+01\n5468  -3.89520613 -1.346329e+01\n5469   5.10479387 -1.589385e+01\n5470  -9.89520613 -8.704233e+00\n5471  12.10479387 -2.301455e+00\n5472   0.10479387  7.837591e-02\n5473 -10.39520613 -4.185513e+00\n5474   7.60479387 -1.066273e+01\n5475  -5.89520613 -7.532735e+00\n5476   3.10479387 -5.157735e+00\n5477  -1.89520613 -1.866069e+00\n5478  -6.39520613 -4.366069e+00\n5479  -2.89520613 -8.243594e+00\n5480  17.60479387 -1.372718e+01\n5481  15.70479387 -1.574107e+01\n5482  16.10479387 -1.358769e+01\n5483  37.10479387 -1.102851e+01\n5484   6.10479387 -1.512996e+01\n5485  -7.39520613 -8.060513e+00\n5486  -9.89520613 -1.020182e+01\n5487  -9.29520613 -1.340774e+01\n5488  -4.39520613 -1.546329e+01\n5489 -10.89520613 -1.371450e+01\n5490 -14.39520613 -8.810513e+00\n5491 -17.39520613 -9.060513e+00\n5492 -14.39520613 -1.189385e+01\n5493 -14.56187279 -1.575496e+01\n5494 -16.89520613 -9.158339e+00\n5495 -11.39520613 -1.440774e+01\n5496 -12.39520613 -1.135344e+01\n5497  -5.39520613 -1.260218e+01\n5498  -3.89520613 -1.169940e+01\n5499 -11.06187279 -6.018846e+00\n5500  -9.39520613 -1.039385e+01\n5501   3.60479387 -9.074402e+00\n5502   4.60479387 -1.137694e+01\n5503 -16.39520613 -4.172228e+00\n5504  -3.89520613 -7.334064e+00\n5505 -18.22853946 -5.268846e+00\n5506  -5.89520613  4.672648e-01\n5507  -1.89520613 -7.178267e+00\n5508 -18.89520613 -3.393846e+00\n5509 -22.39520613 -4.083460e+00\n5510 -24.39520613 -7.412786e+00\n5511 -21.89520613 -4.245537e+00\n5512  -1.89520613 -7.879957e+00\n5513 -11.89520613  1.546371e+00\n5514 -12.89520613 -4.540672e+00\n5515   4.60479387 -1.147718e+01\n5516  15.60479387 -1.520635e+01\n5517   7.27146054 -1.122356e+01\n5518  26.10479387 -1.356051e+01\n5519  -3.39520613 -8.352180e+00\n5520 -13.89520613  2.282035e-02\n5521  -5.89520613 -4.310513e+00\n5522 -11.39520613  8.353204e-01\n5523 -16.64520613 -6.677361e+00\n5524  12.60479387 -3.893846e+00\n5525  -0.39520613 -7.378146e+00\n5526 -20.39520613 -1.643846e+00\n5527 -22.89520613  1.022820e+00\n5528  -2.89520613 -6.754957e+00\n5529 -13.49520613 -6.504957e+00\n5530 -13.89520613 -9.768846e+00\n5531 -21.39520613 -5.498095e+00\n5532 -18.89520613 -3.366069e+00\n5533  -8.89520613 -5.588291e+00\n5534  -3.39520613  1.036709e+00\n5535 -15.56187279  1.342265e+00\n5536  -7.39520613 -1.602180e+00\n5537  -7.89520613 -1.120296e+00\n5538   9.60479387 -7.768846e+00\n5539  -6.39520613 -3.116069e+00\n5540 -14.89520613 -6.518846e+00\n5541 -18.39520613  1.068949e+01\n5542  -4.89520613 -4.844260e-01\n5543  -4.89520613 -1.063479e+01\n5544 -13.89520613 -3.296624e+00\n5545   7.10479387 -3.239257e+00\n5546 -21.89520613 -4.632908e-01\n5547 -10.39520613  9.439487e+00\n5548 -13.39520613  8.115212e+00\n5549  -0.89520613 -8.266431e+00\n5550  19.10479387 -1.264505e+01\n5551  14.10479387 -5.921624e+00\n5552   0.10479387 -6.130492e-01\n5553 -14.49520613  1.495043e+00\n5554 -23.39520613  1.687004e+01\n5555 -10.39520613 -9.910685e-01\n5556 -10.39520613 -3.509184e+00\n5557   7.10479387 -1.032440e+01\n5558 -13.39520613  4.533759e-01\n5559 -13.72853946  3.439487e+00\n5560   0.60479387  4.745043e+00\n5561   5.10479387  7.314487e+00\n5562 -14.89520613  1.566171e+01\n5563 -14.89520613  6.897820e+00\n5564 -17.89520613  2.633931e+00\n5565  -2.72853946 -5.046624e+00\n5566  18.60479387 -9.096745e+00\n5567  -2.39520613 -1.001885e+01\n5568 -21.89520613  9.255981e-01\n5569 -16.89520613  7.837591e-02\n5570  -8.89520613 -5.401659e+00\n5571  -9.39520613 -3.141129e+00\n5572 -18.89520613  1.595799e+00\n5573 -18.89520613  3.620760e+00\n5574  -5.89520613 -1.254920e+00\n5575  -8.89520613  4.431675e+00\n5576  -9.89520613  3.499383e+00\n5577  -6.39520613 -8.678046e-01\n5578 -15.89520613 -5.711561e-01\n5579  -2.89520613  2.128789e+00\n5580  11.10479387  1.069049e+01\n5581   2.10479387  3.251370e-01\n5582  -9.89520613  4.117092e-01\n5583  -7.72853946  9.971894e+00\n5584  28.10479387  1.566171e+01\n5585   7.10479387  1.674989e+01\n5586  13.10479387  9.198929e+00\n5587  33.10479387  1.020327e+01\n5588 -11.89520613  1.095569e+01\n5589 -27.09520613  2.157375e+01\n5590 -24.89520613  1.081217e+01\n5591 -25.89520613  6.130811e+00\n5592 -11.89520613  6.939245e-01\n5593 -14.89520613  7.220787e+00\n5594           NA  5.406375e+00\n5595  -3.64520613  4.496754e+00\n5596   0.10479387  5.221894e+00\n5597 -19.89520613  8.374672e+00\n5598   4.10479387  5.698536e+00\n5599  -4.89520613  1.158187e+00\n5600   1.10479387  3.060278e+00\n5601 -20.06187279  1.179297e+01\n5602 -18.89520613  1.470385e+00\n5603 -15.89520613  8.344580e+00\n5604 -17.89520613  1.434921e+01\n5605 -16.89520613  6.965956e+00\n5606 -26.89520613  8.119549e+00\n5607 -10.09520613 -4.756065e+00\n5608  -5.89520613  6.175799e+00\n5609   3.10479387  1.198337e+01\n5610  -4.39520613  1.341084e+01\n5611 -16.89520613  4.585320e+00\n5612 -17.89520613  8.199359e+00\n5613 -14.72853946  2.756013e+00\n5614  25.10479387  1.419791e+01\n5615 -12.89520613  3.013561e+00\n5616 -27.89520613  6.973994e+00\n5617 -18.89520613  6.087635e+00\n5618 -19.39520613  8.703376e+00\n5619 -26.22853946  1.183953e+01\n5620 -17.89520613  1.473907e+00\n5621  -6.89520613  8.913118e+00\n5622  22.60479387  1.432958e+01\n5623 -26.89520613  4.628195e+00\n5624 -20.39520613 -3.062828e+00\n5625 -16.89520613  5.888561e+00\n5626 -12.39520613  1.855986e+01\n5627   8.10479387  6.737147e+00\n5628  15.10479387  4.664628e+00\n5629  22.10479387  1.105754e+01\n5630  25.60479387  1.215245e+01\n5631   5.27146054  2.114088e+01\n5632 -11.89520613  1.453902e+01\n5633   2.60479387  2.380871e+00\n5634   1.10479387 -1.109608e+01\n5635 -22.89520613 -5.091813e+00\n5636 -17.89520613  5.737128e+00\n5637  -4.89520613  3.439386e+00\n5638  11.10479387  2.451819e+01\n5639  20.10479387  3.228439e+01\n5640  14.10479387  9.048988e+00\n5641 -12.89520613  3.196532e+00\n5642 -16.89520613 -3.547255e+00\n5643 -13.06187279 -6.237647e+00\n5644 -18.39520613 -3.682128e+00\n5645 -20.89520613  7.092265e+00\n5646 -21.39520613  5.494175e+00\n5647  -6.39520613 -1.348217e+00\n5648   8.10479387  1.884942e+01\n5649  13.77146054  2.557694e+01\n5650  46.60479387  2.799122e+01\n5651  33.60479387  1.791592e+01\n5652  41.60479387  2.718949e+01\n5653  31.10479387  3.544492e+01\n5654  54.10479387  3.501290e+01\n5655   5.93812721  4.529550e-01\n5656  -7.39520613  1.493103e+01\n5657 -15.89520613  4.079584e+00\n5658  -4.89520613 -2.125026e+00\n5659   3.10479387  1.111541e+01\n5660   4.60479387  2.002022e+01\n5661  31.10479387  3.738501e+00\n5662  35.60479387  3.342869e+00\n5663  61.10479387  1.694288e+01\n5664   1.60479387  1.394209e+01\n5665 -17.39520613  1.112930e+01\n5666  -9.39520613  1.688393e+01\n5667  10.70479387  3.170801e+01\n5668  30.10479387  2.591418e+01\n5669  -1.89520613  1.212588e+01\n5670 -14.89520613  1.186853e+01\n5671 -16.89520613  1.269945e+01\n5672  -9.39520613  1.935964e+01\n5673 -10.09520613  2.503324e+01\n5674  -6.39520613  2.568428e+01\n5675  17.10479387  2.340352e+01\n5676  29.10479387  2.266211e+01\n5677  57.60479387  2.079003e+01\n5678  38.60479387  2.554494e+01\n5679   0.93812721  7.939588e+00\n5680   5.10479387  2.027514e+01\n5681   1.10479387  2.274273e+01\n5682  10.10479387  1.423578e+01\n5683 -26.39520613  8.510642e+00\n5684 -15.39520613  1.456902e+01\n5685  -3.69520613  8.060059e+00\n5686  17.60479387  1.740275e+01\n5687  -5.89520613  9.481154e+00\n5688 -10.39520613  9.057543e+00\n5689  -9.39520613  1.182122e+00\n5690  -6.39520613  1.410042e+01\n5691  -3.06187279  1.491795e+01\n5692  22.60479387  2.054828e+01\n5693 -22.39520613  1.180986e+01\n5694   4.60479387  2.149504e+01\n5695  13.60479387  2.410615e+01\n5696 -16.89520613  1.627514e+01\n5697 -22.89520613  4.129823e+00\n5698 -21.89520613  6.034898e+00\n5699 -13.39520613  9.757779e+00\n5700  -0.39520613  1.997127e+01\n5701   7.60479387  2.845801e+01\n5702  12.10479387  3.164782e+01\n5703   6.10479387  2.239756e+01\n5704  -4.39520613  1.036541e+01\n5705  -9.39520613 -3.600871e+00\n5706   5.60479387  6.109447e+00\n5707  -9.89520613 -5.392750e+00\n5708  -1.89520613  4.078376e+00\n5709 -14.72853946  5.071431e+00\n5710 -21.89520613 -4.523520e-02\n5711 -11.39520613  2.722165e-01\n5712   7.10479387  1.192155e+01\n5713 -17.89520613  6.071230e+00\n5714 -15.89520613  9.483437e-01\n5715  -6.06187279  1.951061e+00\n5716 -11.39520613  8.742728e+00\n5717 -16.89520613  5.587635e+00\n5718 -10.89520613  1.338172e+01\n5719 -13.89520613  8.166339e+00\n5720  -9.89520613  1.884377e+01\n5721   1.50479387  2.277141e+01\n5722   2.10479387  2.656217e+01\n5723  11.10479387  1.835152e+01\n5724  12.60479387  2.436541e+01\n5725 -16.39520613  5.936669e+00\n5726   0.60479387  1.722901e+00\n5727  -9.89520613  5.804093e+00\n5728  -0.89520613  1.224746e+01\n5729  25.60479387  1.938486e+01\n5730  31.10479387  2.344875e+01\n5731  36.60479387  9.626584e+00\n5732  41.60479387  7.751383e+00\n5733 -18.39520613  3.414225e+00\n5734  13.10479387 -2.447023e+00\n5735  17.10479387  6.218956e+00\n5736   7.10479387  1.804134e+01\n5737 -24.89520613  7.511246e+00\n5738   0.10479387 -4.709668e+00\n5739   7.43812721  5.136301e+00\n5740  -2.89520613  5.622989e+00\n5741   8.10479387 -5.120872e+00\n5742   6.10479387 -9.797228e+00\n5743 -15.89520613  4.640008e+00\n5744 -21.39520613 -1.617805e+00\n5745 -12.89520613 -2.106725e+00\n5746 -18.89520613 -1.151193e+00\n5747   3.10479387 -1.020036e+00\n5748  19.10479387  2.032897e+00\n5749 -12.39520613  7.734664e+00\n5750   4.10479387  8.952508e+00\n5751   6.43812721  1.684053e+01\n5752  22.60479387  1.712932e+01\n5753  11.10479387  6.108758e+00\n5754 -10.89520613 -2.458837e+00\n5755 -10.39520613 -5.065835e+00\n5756 -14.89520613 -4.278357e+00\n5757 -16.22853946 -6.164680e+00\n5758 -19.89520613  3.712925e+00\n5759 -19.39520613 -5.438117e+00\n5760   1.60479387 -9.846227e+00\n5761  10.60479387 -9.861773e+00\n5762  17.60479387 -8.862596e+00\n5763  20.93812721 -8.728425e+00\n5764  -5.39520613 -5.216763e+00\n5765 -24.39520613 -3.875617e+00\n5766  -6.39520613 -9.266242e+00\n5767  -3.89520613 -8.308362e+00\n5768 -21.39520613 -4.603425e+00\n5769 -13.39520613 -1.321982e+01\n5770   8.10479387 -1.231051e+01\n5771 -23.89520613 -4.612596e+00\n5772 -14.89520613 -7.557909e+00\n5773   8.10479387 -8.109992e+00\n5774 -12.89520613 -1.082818e+01\n5775 -19.56187279 -6.722521e+00\n5776 -22.89520613 -7.841828e+00\n5777  -4.89520613 -1.406572e+01\n5778 -19.39520613 -1.524020e+01\n5779 -24.89520613 -5.427901e+00\n5780 -22.89520613 -1.385824e+00\n5781 -21.56187279 -1.286703e+00\n5782 -24.89520613  7.261718e-01\n5783 -17.89520613 -1.045272e+01\n5784 -15.39520613 -7.646119e+00\n5785 -12.89520613 -8.393846e+00\n5786 -13.89520613 -1.252718e+01\n5787   2.77146054 -1.249073e+01\n5788  -4.39520613 -1.705010e+01\n5789  -6.89520613 -1.109040e+01\n5790  17.60479387 -8.403810e+00\n5791   5.10479387  2.929070e+00\n5792   3.10479387  3.897820e+00\n5793  -7.39520613 -4.706346e+00\n5794  -9.89520613 -1.525843e+01\n5795 -12.89520613 -1.339483e+01\n5796   2.60479387 -1.265562e+01\n5797 -16.39520613 -7.237596e+00\n5798 -29.89520613  9.668654e+00\n5799 -26.72853946  7.929070e+00\n5800 -22.39520613 -4.800096e+00\n5801   2.60479387 -1.655146e+01\n5802 -11.89520613 -1.394004e+01\n5803  -1.39520613 -1.613343e+01\n5804  -5.39520613 -8.330441e+00\n5805 -18.39520613 -6.977180e+00\n5806 -11.89520613 -1.135218e+01\n5807 -23.39520613 -8.737596e+00\n5808 -14.39520613 -1.257093e+01\n5809  -8.39520613 -1.664249e+01\n5810 -10.89520613 -1.343144e+01\n5811  -1.39520613 -1.148760e+01\n5812 -16.89520613 -6.987596e+00\n5813 -18.89520613  3.210320e+00\n5814 -15.89520613 -4.477180e+00\n5815 -19.39520613 -5.550096e+00\n5816  -9.89520613 -7.556890e+00\n5817   1.77146054 -1.431051e+01\n5818  -9.89520613 -1.011260e+01\n5819   7.10479387 -1.393362e+01\n5820  -8.39520613 -1.203968e+01\n5821 -15.39520613 -5.310513e+00\n5822  17.10479387 -1.328424e+01\n5823   9.60479387 -1.556051e+01\n5824  41.10479387 -1.619231e+01\n5825  -3.89520613 -1.733905e+01\n5826   1.10479387 -1.601477e+01\n5827   0.60479387 -1.321676e+01\n5828 -14.39520613 -7.195930e+00\n5829 -19.89520613  3.783237e+00\n5830  -6.39520613 -1.058225e+01\n5831 -10.89520613 -7.619390e+00\n5832 -16.89520613 -1.242102e+01\n5833 -21.89520613 -8.404263e+00\n5834 -20.89520613 -4.716763e+00\n5835 -18.89520613 -4.320930e+00\n5836 -20.39520613 -6.758430e+00\n5837 -18.89520613 -8.081346e+00\n5838 -23.89520613 -1.143846e+00\n5839 -12.39520613 -1.026885e+01\n5840  -1.39520613 -1.462437e+01\n5841   2.77146054 -1.431051e+01\n5842   5.10479387 -1.280010e+01\n5843 -10.89520613 -9.018846e+00\n5844 -18.89520613 -9.195930e+00\n5845 -26.89520613  6.866570e+00\n5846 -26.39520613  3.238853e+00\n5847 -12.09520613 -9.377542e+00\n5848  -8.39520613 -1.368551e+01\n5849  -9.39520613 -1.693551e+01\n5850 -18.89520613 -5.748013e+00\n5851 -12.39520613 -1.080010e+01\n5852 -12.39520613 -1.031260e+01\n5853 -19.09520613 -1.850368e+00\n5854 -15.89520613  6.038892e-01\n5855 -20.89520613  8.874037e-01\n5856 -13.39520613 -5.039680e+00\n5857 -15.39520613 -2.017035e+00\n5858 -11.89520613 -4.768846e+00\n5859  -4.09520613 -7.841763e+00\n5860   3.10479387 -1.013343e+01\n5861  -4.89520613 -1.626183e+00\n5862 -11.89520613 -2.550096e+00\n5863  -6.89520613 -3.310513e+00\n5864   8.60479387  8.144870e-01\n5865  -4.29520613 -1.955893e+00\n5866 -13.89520613 -5.747175e-01\n5867 -11.89520613 -7.063463e-01\n5868  -2.89520613 -9.060966e+00\n5869  -3.89520613 -6.164680e+00\n5870  -1.89520613  5.147820e+00\n5871   3.35479387 -9.729897e+00\n5872  19.10479387 -1.482455e+01\n5873 -14.89520613 -7.945024e+00\n5874  -3.89520613 -1.120635e+01\n5875   6.10479387 -1.598760e+01\n5876  -4.89520613 -1.275843e+01\n5877  10.85479387 -1.285218e+01\n5878  12.10479387 -1.579376e+01\n5879 -18.89520613  1.088491e+00\n5880  -6.89520613 -5.893846e+00\n5881 -14.89520613 -5.171926e+00\n5882 -14.89520613 -1.404263e+00\n5883 -11.22853946 -4.146796e-01\n5884 -15.89520613  1.720737e+00\n5885 -16.89520613 -4.061419e+00\n5886   5.10479387 -1.021796e-01\n5887   0.10479387  3.033237e+00\n5888   4.10479387 -6.977180e+00\n5889  26.60479387 -6.670114e+00\n5890 -24.39520613  1.464782e+01\n5891 -24.89520613  1.534574e+01\n5892 -13.39520613  2.929070e+00\n5893  -5.89520613 -8.887506e+00\n5894  -2.39520613 -6.435513e+00\n5895  -9.89520613 -8.325912e+00\n5896  11.60479387 -1.426885e+01\n5897 -14.89520613  1.637404e+00\n5898 -18.39520613  1.046032e+01\n5899 -12.39520613  4.682398e-02\n5900   1.60479387 -7.898828e+00\n5901   3.30479387 -7.780210e+00\n5902   3.10479387 -5.560513e+00\n5903  28.60479387 -1.066015e+01\n5904  13.60479387 -1.001885e+01\n5905 -14.39520613  1.710320e+00\n5906  -9.39520613 -5.933701e+00\n5907  -7.29520613 -6.168303e+00\n5908 -21.39520613  1.097345e+01\n5909 -13.89520613  6.085320e+00\n5910   0.10479387 -8.492125e+00\n5911  -6.89520613 -5.737596e+00\n5912 -22.39520613  1.230407e+01\n5913  -6.29520613  1.442204e+00\n5914  13.10479387 -3.837605e+00\n5915   8.10479387 -3.695930e+00\n5916 -20.89520613  1.063740e+01\n5917  10.10479387 -6.570930e+00\n5918  -0.39520613 -1.244593e+01\n5919   9.10479387 -1.258430e+00\n5920  -0.39520613 -5.829082e+00\n5921  10.60479387  9.147367e+00\n5922  -3.39520613  1.783237e+00\n5923   5.60479387 -1.152926e+01\n5924 -18.39520613 -2.533792e+00\n5925 -11.49520613 -2.143846e+00\n5926   2.10479387 -1.487596e+00\n5927  15.10479387  7.339849e+00\n5928 -10.89520613  1.061537e-01\n5929  11.60479387 -2.733106e-01\n5930  -4.39520613  2.720737e+00\n5931 -15.89520613 -9.617811e-01\n5932 -25.89520613  1.106449e+01\n5933 -20.89520613  4.365369e-02\n5934  -3.89520613  9.322406e-01\n5935  16.60479387  7.618058e+00\n5936  17.10479387  2.817489e-01\n5937  23.10479387 -1.202195e+01\n5938 -23.89520613 -1.189876e+01\n5939 -25.39520613  1.276389e+01\n5940 -25.89520613  1.837401e+01\n5941 -21.89520613  5.972096e+00\n5942 -23.89520613  1.237401e+01\n5943 -18.89520613  1.503356e+01\n5944  -5.89520613  3.635916e+00\n5945  24.60479387  3.516868e+00\n5946 -27.39520613  1.746925e+01\n5947 -11.89520613  1.071032e+01\n5948  32.60479387  2.019898e+01\n5949  27.50479387  2.103343e+01\n5950   1.10479387  8.028773e+00\n5951 -11.89520613  3.884833e+00\n5952 -16.89520613  2.975590e+00\n5953   5.10479387  6.275797e+00\n5954 -21.39520613  1.436806e+01\n5955 -22.69520613  6.426444e-01\n5956 -20.39520613  1.234425e+01\n5957 -17.39520613  1.268949e+01\n5958   3.10479387  7.853177e+00\n5959  -4.39520613  1.482179e+01\n5960 -18.39520613  1.667461e+01\n5961   0.90479387  2.020734e+01\n5962  25.10479387  8.635010e+00\n5963 -11.89520613  8.398597e+00\n5964  -9.39520613 -5.304561e+00\n5965 -23.39520613 -3.489084e+00\n5966 -21.89520613  1.797520e+01\n5967 -17.29520613  1.209127e+01\n5968 -14.39520613  1.011211e+01\n5969 -15.89520613  1.150509e+01\n5970 -13.39520613  9.554523e+00\n5971 -14.89520613  7.430542e+00\n5972 -10.89520613  4.035849e+00\n5973   0.90479387  6.287879e+00\n5974 -12.39520613  7.012404e+00\n5975 -25.39520613  3.464041e+00\n5976  -3.39520613  1.186166e+01\n5977 -11.89520613  6.791923e+00\n5978  -8.89520613 -2.408226e+00\n5979 -14.49520613  1.613740e+01\n5980 -12.89520613  1.101501e+01\n5981 -12.39520613  1.623897e+01\n5982 -11.89520613  1.127542e+01\n5983   6.60479387 -6.220613e+00\n5984 -19.89520613  5.517612e+00\n5985 -21.89520613  1.508214e+00\n5986 -16.39520613  1.180871e+01\n5987  -9.39520613  1.195772e+01\n5988 -13.89520613  1.442907e+01\n5989 -23.89520613  1.328324e+01\n5990 -21.39520613  8.694695e+00\n5991  -8.89520613  1.726254e+00\n5992  16.60479387 -3.214457e+00\n5993 -16.89520613 -3.570364e+00\n5994  12.60479387 -1.688086e+00\n5995 -24.39520613  8.988966e+00\n5996 -20.89520613  6.939487e+00\n5997  -2.89520613 -2.300206e-01\n5998 -15.39520613  1.953754e+01\n5999  -8.89520613  1.240824e+01\n6000   5.10479387  8.272820e+00\n6001  21.10479387  3.345737e+00\n6002  -5.89520613  1.945772e+01\n6003 -17.89520613  6.765008e+00\n6004 -11.39520613  1.336894e+01\n6005   2.10479387  1.099678e+01\n6006 -22.39520613  1.175459e+01\n6007 -11.89520613  9.030993e+00\n6008 -12.89520613  2.491570e+00\n6009 -14.09520613  1.448115e+01\n6010 -20.39520613  1.161136e+01\n6011 -11.89520613  1.464850e+01\n6012   4.60479387  2.321919e+01\n6013  41.10479387  1.353223e+01\n6014 -24.89520613  1.373126e+01\n6015 -11.49520613  7.895216e+00\n6016  -5.89520613  6.090529e+00\n6017   4.10479387  2.057230e+01\n6018  18.60479387  2.391050e+01\n6019  34.60479387  3.673057e+01\n6020  32.10479387  3.670115e+01\n6021 -15.29520613  6.045465e+00\n6022   0.10479387  1.401240e+01\n6023  -8.89520613  1.583272e+01\n6024 -11.39520613  9.918654e+00\n6025  16.10479387  8.786181e+00\n6026   6.60479387  2.265785e+01\n6027  11.70479387  3.077010e+01\n6028  37.60479387  1.590801e+01\n6029  13.60479387  2.622595e+01\n6030  -9.39520613  3.142647e+01\n6031  -7.39520613  2.149678e+01\n6032   8.10479387  5.815619e+00\n6033 -15.39520613  4.660841e+00\n6034 -17.39520613  1.065920e+01\n6035 -19.39520613  6.578640e+00\n6036 -15.89520613  2.961852e+00\n6037 -15.89520613  3.512404e+00\n6038  -6.39520613  1.196032e+01\n6039   1.90479387  1.200482e+01\n6040  -8.89520613  1.986657e+01\n6041 -14.89520613  1.740891e+00\n6042   1.60479387  1.046859e+01\n6043 -22.39520613  6.684845e+00\n6044 -11.89520613  1.169990e+01\n6045  -7.14520613  1.128584e+01\n6046 -15.89520613  1.623229e+01\n6047 -24.39520613  1.843020e+00\n6048 -25.39520613  4.104952e-02\n6049  -8.89520613 -3.638072e+00\n6050  18.60479387  1.284585e+01\n6051   3.90479387  2.962959e+01\n6052 -12.89520613  1.268167e+01\n6053 -11.89520613  2.724473e+00\n6054   2.60479387  4.872684e+00\n6055  11.60479387  9.245873e+00\n6056  20.10479387  1.521458e+01\n6057   3.10479387  1.294730e+01\n6058  -8.39520613  5.171258e+00\n6059 -13.39520613  1.324904e+00\n6060 -13.39520613  1.008566e+01\n6061   1.60479387  6.212358e+00\n6062  13.60479387 -3.755331e+00\n6063 -10.89520613  3.205853e+00\n6064 -23.89520613 -5.032213e-01\n6065 -22.89520613  2.723341e+00\n6066 -15.39520613  4.629591e+00\n6067 -15.39520613 -2.065948e+00\n6068 -20.39520613  5.213635e+00\n6069  -5.29520613  1.032151e+01\n6070  16.60479387  1.825066e+01\n6071  21.10479387  5.449111e+00\n6072   7.60479387  2.167386e+01\n6073 -14.89520613  1.357230e+01\n6074  -7.39520613  5.734468e+00\n6075  -3.64520613  6.447073e+00\n6076  25.10479387  2.090778e+01\n6077  29.10479387  2.728799e+01\n6078 -16.89520613  4.574677e+00\n6079 -19.89520613  3.066745e-01\n6080  -8.89520613  1.379365e+01\n6081  18.50479387  2.819821e+01\n6082  16.60479387  2.087699e+01\n6083 -13.89520613  1.086159e+01\n6084  10.60479387  1.764624e+01\n6085  -8.89520613  1.160020e+01\n6086 -26.89520613  8.016868e+00\n6087 -15.89520613  6.734130e+00\n6088 -26.89520613  1.349306e+01\n6089 -12.89520613  1.238824e+01\n6090  -3.39520613  2.576489e+00\n6091 -22.39520613 -8.243264e-01\n6092  -1.39520613 -5.252316e+00\n6093  -8.39520613  5.017612e+00\n6094  -3.39520613  1.156970e+01\n6095  34.10479387  2.608871e+00\n6096  11.10479387  1.001897e+01\n6097  17.60479387  1.289879e+01\n6098  24.60479387  1.979071e+01\n6099  12.35479387  1.051489e+01\n6100  13.60479387  2.042386e+01\n6101 -16.89520613  5.475945e+00\n6102  -6.39520613 -6.423676e+00\n6103  24.60479387 -1.954391e+00\n6104   7.60479387  9.246779e+00\n6105   6.30479387  1.795511e+01\n6106  -8.89520613 -3.522470e+00\n6107  -7.89520613 -2.721971e+00\n6108  -3.89520613  1.295511e+01\n6109  -9.39520613 -3.294524e-01\n6110  -4.89520613 -4.200685e+00\n6111  -8.89520613 -2.289453e+00\n6112  -5.89520613 -7.457705e+00\n6113  -5.89520613 -1.205757e+01\n6114 -19.39520613 -6.727180e+00\n6115 -22.39520613 -7.001383e+00\n6116 -10.89520613 -8.893846e+00\n6117 -12.89520613 -7.819345e+00\n6118  -4.39520613 -8.637894e+00\n6119   0.60479387 -1.191766e+01\n6120  37.10479387 -1.164902e+01\n6121  -8.89520613 -7.828370e+00\n6122 -10.39520613 -3.310513e+00\n6123 -11.29520613 -3.193018e+00\n6124  20.10479387 -7.173091e+00\n6125  34.10479387 -7.463308e-01\n6126  31.10479387 -1.061098e+01\n6127  24.60479387 -4.965275e+00\n6128  -0.89520613  1.338297e+00\n6129 -13.89520613 -2.072418e+00\n6130  26.60479387 -7.125989e+00\n6131 -23.39520613 -9.080803e-01\n6132 -10.39520613 -7.066465e+00\n6133 -12.39520613 -9.045244e+00\n6134  -3.89520613 -1.063194e+01\n6135  -5.89520613 -7.006942e+00\n6136 -13.39520613  3.064487e+00\n6137  24.10479387  5.576392e+00\n6138   4.60479387 -1.803267e+00\n6139 -21.39520613 -1.944830e+00\n6140  -5.39520613 -7.033748e+00\n6141   3.50479387 -8.679561e+00\n6142  -9.89520613 -1.474504e+01\n6143 -25.39520613 -1.262897e+01\n6144 -11.89520613 -1.468603e+01\n6145  -6.39520613 -1.113660e+01\n6146 -15.39520613 -1.217515e+01\n6147  -8.49520613 -2.023349e-01\n6148   1.60479387 -8.679561e+00\n6149 -18.89520613 -9.445930e+00\n6150 -20.39520613 -1.557093e+01\n6151 -22.89520613 -1.291740e+01\n6152  -5.39520613 -1.081821e+01\n6153 -18.29520613 -1.118551e+01\n6154 -18.89520613 -1.049801e+01\n6155 -12.39520613 -4.999372e+00\n6156 -18.89520613 -6.258430e+00\n6157 -14.89520613 -8.445930e+00\n6158  -7.39520613 -1.323488e+01\n6159  -2.69520613 -1.606051e+01\n6160  14.60479387 -6.924643e+00\n6161 -17.89520613 -4.603538e+00\n6162  -7.89520613 -1.320635e+01\n6163 -16.89520613 -1.458135e+01\n6164 -20.89520613 -1.651885e+01\n6165  -6.69520613 -1.276979e+01\n6166 -18.89520613 -1.175707e+01\n6167 -16.89520613 -1.006051e+01\n6168  -7.39520613 -9.969480e+00\n6169 -23.89520613 -3.945930e+00\n6170  -5.39520613 -1.408135e+01\n6171 -22.29520613 -1.695930e+00\n6172  -1.89520613 -2.236691e+00\n6173  -5.39520613 -1.115426e+01\n6174  -3.39520613 -1.386848e+01\n6175 -16.39520613 -1.338343e+01\n6176 -18.39520613 -2.237596e+00\n6177 -20.14520613 -3.300096e+00\n6178 -21.89520613 -3.206346e+00\n6179 -15.39520613 -8.064369e-01\n6180 -18.39520613 -8.934607e+00\n6181 -10.39520613 -7.779263e+00\n6182 -10.89520613 -1.549620e+01\n6183 -18.89520613 -3.258430e+00\n6184 -17.89520613 -1.340426e+01\n6185 -12.89520613 -1.485218e+01\n6186 -12.89520613 -1.638343e+01\n6187  -0.39520613 -1.833769e+01\n6188 -22.39520613 -1.271676e+01\n6189 -21.89520613 -7.273540e+00\n6190  -6.39520613 -1.253968e+01\n6191  -9.89520613 -9.268846e+00\n6192 -13.89520613 -8.768846e+00\n6193 -15.89520613 -1.236622e+01\n6194 -17.89520613 -1.000888e+01\n6195 -11.69520613 -1.032126e+01\n6196  -7.89520613 -1.418551e+01\n6197  -8.39520613 -4.258430e+00\n6198 -14.89520613 -8.331346e+00\n6199 -12.39520613 -2.612596e+00\n6200  -7.89520613 -1.453968e+01\n6201 -19.09520613 -1.476405e+01\n6202 -14.89520613 -5.652180e+00\n6203 -12.89520613 -8.914680e+00\n6204  -9.39520613 -1.653968e+01\n6205 -15.39520613 -1.188343e+01\n6206 -19.39520613 -6.300096e+00\n6207 -18.39520613 -1.084040e+01\n6208 -16.39520613 -8.450912e+00\n6209 -18.39520613 -7.050096e+00\n6210 -16.89520613 -1.260218e+01\n6211 -13.39520613 -1.355010e+01\n6212 -24.89520613 -9.362596e+00\n6213 -26.49520613  3.647820e+00\n6214 -17.89520613 -4.186419e+00\n6215  -9.89520613  1.530904e-01\n6216  -9.39520613 -9.337687e+00\n6217  -8.89520613 -1.112301e+01\n6218 -16.89520613  1.106154e+00\n6219  -9.69520613 -9.560513e+00\n6220 -21.89520613 -5.039680e+00\n6221 -19.89520613 -1.169457e+01\n6222 -15.89520613 -7.312551e+00\n6223  -2.39520613 -8.781346e+00\n6224  -4.89520613 -5.654263e+00\n6225  -3.49520613 -1.226088e+01\n6226 -13.89520613 -1.609176e+01\n6227 -19.89520613  9.499037e-01\n6228 -15.89520613 -2.091763e+00\n6229  -9.89520613 -1.002972e+01\n6230  -7.89520613 -9.262053e+00\n6231 -10.09520613  1.374723e+00\n6232   2.10479387 -1.108135e+01\n6233 -14.89520613 -5.664680e+00\n6234  -4.39520613  7.304070e+00\n6235  -9.89520613 -4.146796e-01\n6236 -20.89520613 -5.521111e+00\n6237  -3.89520613 -5.820930e+00\n6238  -4.89520613 -8.680778e+00\n6239  -1.89520613 -6.158792e+00\n6240  16.10479387 -1.127926e+01\n6241  11.10479387 -6.018846e+00\n6242  15.10479387 -1.406714e+01\n6243   1.10479387 -1.082772e+01\n6244  21.10479387 -8.917521e+00\n6245  -9.89520613 -1.998013e+00\n6246 -12.39520613 -9.675096e+00\n6247 -19.39520613  7.837591e-02\n6248 -14.89520613 -2.727180e+00\n6249 -13.29520613  6.567237e+00\n6250 -11.39520613  3.506969e+00\n6251  -2.89520613 -7.424149e+00\n6252  -3.89520613 -2.768846e+00\n6253 -16.39520613  2.335320e+00\n6254  -7.39520613  4.543654e+00\n6255 -20.14520613  9.293654e+00\n6256  -2.89520613 -6.164680e+00\n6257  15.10479387 -1.115743e+01\n6258  27.10479387 -1.127338e+01\n6259   7.10479387 -1.411260e+01\n6260 -11.89520613 -1.393846e+00\n6261 -19.49520613  7.220737e+00\n6262 -11.39520613 -5.779263e+00\n6263  -8.89520613 -7.538321e+00\n6264 -16.39520613  3.102078e+00\n6265 -14.89520613  4.158237e+00\n6266  -8.89520613 -1.883430e+00\n6267  16.90479387 -7.414680e+00\n6268   3.10479387 -8.445930e+00\n6269 -12.89520613  1.233418e+00\n6270 -20.39520613  5.689487e+00\n6271 -16.39520613 -3.118937e+00\n6272  -0.89520613 -6.734755e+00\n6273   3.30479387 -1.254013e+01\n6274 -14.89520613  8.561537e-01\n6275 -20.39520613  3.762404e+00\n6276 -21.89520613  1.403324e+01\n6277 -13.89520613  2.419107e+00\n6278 -21.39520613  5.789427e+00\n6279  -7.49520613  1.210320e+00\n6280  13.60479387 -1.904263e+00\n6281 -11.39520613 -2.706346e+00\n6282  -9.39520613 -4.685513e+00\n6283 -16.39520613  1.012699e+01\n6284 -24.39520613  8.260139e+00\n6285 -16.14520613  7.872820e+00\n6286 -11.39520613 -1.194276e+01\n6287 -12.89520613 -1.074137e+01\n6288 -10.39520613 -4.463291e+00\n6289  -9.89520613  7.751987e+00\n6290 -22.39520613  1.225199e+01\n6291 -10.49520613  2.861744e-01\n6292   9.10479387  3.219799e+00\n6293  -5.89520613 -1.083928e+00\n6294  -4.89520613  8.924562e-01\n6295 -10.89520613 -2.583590e+00\n6296 -13.39520613 -3.423608e+00\n6297 -15.69520613  6.891868e+00\n6298 -15.39520613  1.722750e+00\n6299  20.60479387 -2.245270e-01\n6300 -25.39520613  6.735415e+00\n6301 -22.89520613  1.279068e+01\n6302 -17.89520613  8.737585e+00\n6303  -9.09520613  8.046258e+00\n6304 -27.89520613  1.848115e+01\n6305  -1.39520613  9.597662e+00\n6306  21.60479387  1.137581e+01\n6307  -2.89520613  1.414898e+01\n6308  -1.89520613  8.246164e+00\n6309  -5.69520613  8.115108e-01\n6310  -8.89520613  3.192463e+00\n6311 -27.39520613  1.285020e+01\n6312 -17.89520613  1.081609e+01\n6313 -18.89520613  1.002282e+01\n6314  27.10479387 -2.325265e+00\n6315  25.90479387  1.170139e+01\n6316   6.10479387  1.789743e+01\n6317  -8.89520613  2.504068e+01\n6318  25.60479387  1.934425e+01\n6319  20.10479387  9.859906e+00\n6320  -3.39520613 -1.170503e+00\n6321 -16.09520613  6.898985e+00\n6322 -24.39520613  7.699498e+00\n6323 -10.39520613  3.534725e+00\n6324  -0.39520613  7.504963e+00\n6325 -20.89520613  5.814487e+00\n6326  -6.89520613  8.448416e+00\n6327 -16.69520613  8.771385e+00\n6328  48.10479387  2.107343e+01\n6329  10.60479387  2.504689e+01\n6330 -16.89520613  7.765056e+00\n6331 -26.89520613  8.973341e+00\n6332 -27.39520613  1.297074e+01\n6333  -9.09520613  2.318790e+00\n6334  10.60479387  8.075923e+00\n6335  -7.89520613  5.858531e+00\n6336  25.10479387  1.204531e+01\n6337 -16.89520613  1.452203e+01\n6338  -3.89520613  1.018428e+01\n6339   0.35479387  1.469209e+01\n6340  18.60479387  9.870080e+00\n6341   7.60479387  1.450153e+01\n6342   5.60479387  9.529665e+00\n6343 -20.89520613 -1.462777e+00\n6344 -25.89520613 -8.111108e+00\n6345 -24.89520613  1.070439e+00\n6346 -13.89520613  5.228177e+00\n6347  -4.89520613  1.015507e+01\n6348 -23.89520613  1.458113e+01\n6349 -14.89520613  4.507761e+00\n6350   1.10479387  4.329639e+00\n6351  -0.29520613  8.658237e+00\n6352  -8.89520613  6.056675e+00\n6353  -2.39520613  9.028029e+00\n6354 -19.89520613  7.333282e+00\n6355  -4.39520613  3.571270e+00\n6356 -10.39520613 -2.407999e+00\n6357  -2.64520613  3.821167e+00\n6358 -22.39520613  6.236362e+00\n6359  -6.39520613  6.311883e+00\n6360  -8.89520613  1.108532e+01\n6361 -21.39520613  7.593133e+00\n6362  -0.89520613  7.526104e+00\n6363 -18.09520613  2.283690e+00\n6364 -19.39520613  9.416502e+00\n6365 -10.39520613  9.928051e+00\n6366   9.10479387  1.951240e+01\n6367   4.10479387  2.134574e+01\n6368  34.10479387  2.034834e+01\n6369   8.10479387  1.078380e+01\n6370  13.60479387  1.312449e+00\n6371 -12.89520613 -8.799191e+00\n6372  -1.39520613 -4.450294e+00\n6373 -13.89520613  1.162438e+01\n6374 -14.89520613  1.649678e+01\n6375 -15.69520613  1.166842e+01\n6376  -6.89520613  1.116277e+01\n6377  -3.89520613  2.376647e+00\n6378  -1.39520613  7.244967e+00\n6379   2.60479387  6.207716e+00\n6380 -24.89520613  7.332716e+00\n6381 -14.09520613  7.168654e+00\n6382  -5.89520613 -6.231822e+00\n6383  -7.39520613  1.435184e+00\n6384  22.10479387  9.048440e+00\n6385 -19.89520613  2.449224e+00\n6386 -11.39520613 -9.957548e-02\n6387 -10.69520613  3.699904e+00\n6388  -7.39520613  6.619175e+00\n6389 -11.39520613  3.669107e+00\n6390  13.60479387  3.232399e+00\n6391  24.60479387  6.981607e+00\n6392  20.60479387  1.832774e+01\n6393   7.50479387  2.149678e+01\n6394   4.10479387  1.235095e+01\n6395  -8.89520613  1.175980e+01\n6396 -18.39520613  1.219990e+01\n6397  -1.89520613  1.147764e+01\n6398 -12.89520613 -4.464498e+00\n6399 -15.89520613  9.038919e+00\n6400  -0.39520613  7.036607e+00\n6401  -9.89520613  1.626984e+01\n6402  -4.39520613  1.934425e+01\n6403  -3.89520613  1.365402e+01\n6404  10.10479387  6.819242e+00\n6405  -5.14520613  1.278358e+01\n6406   3.10479387  5.571280e+00\n6407  18.60479387  9.270216e+00\n6408 -16.89520613  1.297074e+01\n6409 -13.89520613  5.479496e+00\n6410  25.60479387  7.301127e+00\n6411   6.30479387  1.619458e+01\n6412  20.60479387  7.596583e+00\n6413   1.60479387  5.676806e+00\n6414 -24.89520613  7.562902e+00\n6415 -16.39520613  8.731154e+00\n6416 -22.39520613  1.646553e+01\n6417 -13.49520613  1.000878e+01\n6418  -3.39520613  1.002690e+01\n6419  28.10479387  8.653255e+00\n6420   8.60479387  1.412880e+01\n6421  17.60479387  3.024066e+00\n6422  -4.39520613  9.541050e+00\n6423  -7.89520613  1.073636e+01\n6424  17.60479387  1.549157e+01\n6425   2.10479387  2.076233e+01\n6426 -23.89520613  7.856380e+00\n6427 -24.39520613  9.138536e+00\n6428 -13.89520613  2.209635e-01\n6429  -8.89520613  7.173862e+00\n6430  -5.39520613  1.200459e+01\n6431  21.60479387  1.204479e+01\n6432  -2.39520613 -7.256618e+00\n6433  -4.39520613 -7.656867e+00\n6434 -16.39520613 -6.415390e+00\n6435 -13.69520613 -2.628221e+00\n6436 -19.39520613 -3.521796e-01\n6437 -14.39520613  4.345737e+00\n6438  18.60479387  7.278482e+00\n6439  14.10479387  1.417117e+01\n6440   1.60479387  7.309272e-01\n6441 -16.09520613  1.008554e+00\n6442   8.60479387 -8.508430e+00\n6443 -11.39520613  4.590529e+00\n6444   2.10479387  1.125199e+01\n6445  11.60479387  8.032331e+00\n6446  -3.89520613 -3.978289e+00\n6447 -18.89520613 -7.030282e+00\n6448  -2.39520613  1.848002e+00\n6449   2.60479387  3.221869e+00\n6450 -27.89520613  3.111362e+00\n6451 -28.89520613  2.222251e-01\n6452  -1.89520613 -4.796247e+00\n6453  -1.49520613 -2.157234e-01\n6454  13.60479387  6.076036e+00\n6455   8.10479387  1.440824e+01\n6456  17.60479387  6.613966e+00\n6457  16.60479387  1.002542e+01\n6458  11.10479387  1.480928e+01\n6459  -3.69520613  1.047595e+01\n6460 -17.89520613  1.850945e+00\n6461 -23.89520613  4.356607e+00\n6462 -16.89520613 -2.109992e+00\n6463  20.10479387 -3.678046e-01\n6464   3.10479387  1.226761e+01\n6465   8.85479387  2.146553e+01\n6466  14.60479387  1.282231e+01\n6467  12.60479387  1.229641e+01\n6468  25.10479387  6.562789e+00\n6469 -15.89520613  4.390315e+00\n6470 -20.39520613  7.193275e+00\n6471  -9.69520613  5.195439e+00\n6472 -17.39520613  8.832344e+00\n6473  -2.89520613  7.076909e+00\n6474  27.10479387  1.077204e+01\n6475  37.60479387  1.125134e+01\n6476  26.60479387  1.358234e+01\n6477   1.10479387  3.781749e+00\n6478 -18.39520613  1.332344e+00\n6479 -15.89520613 -2.926558e-01\n6480   8.60479387 -3.756683e+00\n6481 -18.39520613  3.034984e+00\n6482 -21.39520613 -9.467447e-02\n6483   7.70479387 -6.483132e+00\n6484  17.60479387  5.632128e+00\n6485 -22.39520613 -2.185513e+00\n6486 -12.39520613 -4.474177e-01\n6487 -19.89520613 -2.888706e+00\n6488   3.60479387 -1.163155e+01\n6489   7.10479387 -9.876801e+00\n6490  12.60479387  9.777893e-01\n6491   0.10479387 -2.920632e+00\n6492 -15.39520613 -3.143846e+00\n6493 -19.39520613 -6.259892e-01\n6494 -14.89520613  1.308535e+00\n6495  -4.69520613 -3.353991e+00\n6496  -4.89520613 -5.557537e+00\n6497 -16.89520613 -8.170632e+00\n6498 -22.39520613 -1.016196e+01\n6499 -16.89520613 -1.786703e+00\n6500 -19.89520613 -4.593251e+00\n6501 -15.89520613 -6.088604e+00\n6502 -16.89520613 -7.814913e+00\n6503 -21.39520613 -5.149540e+00\n6504 -14.39520613 -4.465275e+00\n6505   0.10479387 -9.239214e+00\n6506 -12.89520613 -5.959323e+00\n6507 -19.69520613 -4.998013e+00\n6508   8.10479387 -5.854121e+00\n6509  -2.89520613 -6.873660e+00\n6510  -5.89520613 -4.963487e+00\n6511   7.60479387 -1.322763e+01\n6512   2.60479387 -9.337460e+00\n6513 -15.29520613 -1.761034e+00\n6514 -19.89520613 -5.068325e+00\n6515 -18.89520613 -9.320930e+00\n6516 -24.39520613 -9.487596e+00\n6517 -17.39520613 -2.996201e+00\n6518 -19.89520613 -7.195024e+00\n6519 -17.89520613 -3.445930e+00\n6520  -7.39520613 -6.852180e+00\n6521 -18.89520613  6.478204e-01\n6522  -8.39520613 -9.851274e+00\n6523   4.60479387 -1.174439e+01\n6524  26.60479387 -8.774281e+00\n6525 -22.39520613  5.679070e+00\n6526 -27.89520613  5.595737e+00\n6527 -10.89520613 -1.591763e+00\n6528  -6.89520613 -1.160218e+01\n6529  12.60479387 -1.723896e+01\n6530   8.10479387 -1.668914e+01\n6531   1.10479387 -1.670486e+01\n6532  -5.89520613 -1.533135e+01\n6533 -13.39520613 -1.073941e+01\n6534 -22.39520613 -8.268846e+00\n6535 -17.39520613 -8.195930e+00\n6536   5.10479387 -1.592736e+01\n6537  -9.09520613 -1.177926e+01\n6538 -25.89520613  5.793654e+00\n6539 -21.39520613 -6.518846e+00\n6540 -16.39520613 -1.447718e+01\n6541 -25.89520613 -4.782735e+00\n6542 -19.89520613 -5.518846e+00\n6543 -16.69520613 -1.567778e+01\n6544 -16.39520613 -1.406051e+01\n6545 -13.39520613 -1.148941e+01\n6546  -2.39520613 -1.528589e+01\n6547  -5.89520613 -1.251885e+01\n6548  -5.89520613 -1.186260e+01\n6549  -5.69520613 -1.378968e+01\n6550 -10.89520613 -1.541468e+01\n6551 -21.89520613 -1.500617e+01\n6552  -6.89520613 -1.192102e+01\n6553  -8.39520613 -1.593551e+01\n6554  -8.89520613 -1.435218e+01\n6555 -25.29520613 -1.268846e+00\n6556 -18.39520613 -7.915736e-01\n6557 -13.89520613 -8.000963e-01\n6558 -16.89520613 -8.739408e+00\n6559  13.10479387 -1.253470e+01\n6560  -1.39520613 -9.539680e+00\n6561  -9.56187279 -1.333135e+01\n6562  -3.39520613 -1.051885e+01\n6563  13.10479387  1.949904e+00\n6564  16.10479387 -8.656075e+00\n6565  10.60479387 -8.936419e+00\n6566 -10.89520613 -7.216763e+00\n6567  -7.39520613 -2.393846e+00\n6568 -18.89520613 -2.841763e+00\n6569  -6.39520613 -8.956346e+00\n6570  -6.39520613 -1.094593e+01\n6571   0.60479387 -1.290381e+01\n6572   7.10479387 -1.529919e+01\n6573  17.85479387 -1.610218e+01\n6574  -5.89520613 -1.238343e+01\n6575 -19.89520613 -2.591763e+00\n6576 -17.39520613 -1.022718e+01\n6577 -17.89520613 -1.298760e+01\n6578 -22.39520613 -6.748013e+00\n6579 -22.29520613 -1.887053e+00\n6580 -24.89520613  8.324904e+00\n6581 -19.89520613 -3.977180e+00\n6582 -14.39520613 -1.107546e+01\n6583  -9.39520613 -1.420635e+01\n6584 -16.89520613 -8.008430e+00\n6585 -12.89520613 -1.125938e+01\n6586 -13.39520613 -1.530780e+01\n6587  -6.39520613 -1.124801e+01\n6588 -24.39520613 -1.020499e+01\n6589 -13.39520613 -2.229263e+00\n6590 -19.89520613 -1.164680e+00\n6591 -20.49520613  4.429070e+00\n6592 -17.89520613 -3.102180e+00\n6593  10.10479387 -8.007524e+00\n6594  -8.39520613 -6.320930e+00\n6595  -6.39520613 -5.664680e+00\n6596  -8.89520613 -2.312557e-01\n6597 -14.29520613 -1.021796e-01\n6598 -15.39520613 -3.625963e-01\n6599  -7.39520613 -7.155622e+00\n6600   4.60479387 -1.373126e+01\n6601 -13.89520613 -1.542630e-01\n6602 -11.89520613  1.272820e+00\n6603   1.70479387 -1.189702e+01\n6604   3.60479387 -1.567510e+01\n6605 -10.89520613 -7.029263e+00\n6606  20.10479387 -1.235218e+01\n6607  -5.39520613 -6.635241e+00\n6608  16.60479387 -1.319404e+01\n6609  19.70479387 -1.216649e+01\n6610  23.60479387 -1.462301e+01\n6611   6.60479387 -1.052926e+01\n6612  -6.89520613 -1.249801e+01\n6613 -15.89520613 -1.045635e+01\n6614 -28.89520613 -2.031760e-01\n6615 -16.09520613 -6.737596e+00\n6616  -5.39520613 -2.480130e-01\n6617  -0.39520613 -4.716763e+00\n6618  -4.89520613 -5.758430e+00\n6619  -5.89520613 -5.977180e+00\n6620 -16.89520613 -8.227180e+00\n6621  -8.89520613 -1.436577e+01\n6622  -6.39520613 -3.730130e-01\n6623  -4.39520613  4.657784e+00\n6624  -9.39520613 -1.445930e+00\n6625 -10.89520613 -4.487596e+00\n6626 -18.89520613 -7.550096e+00\n6627 -12.29520613 -1.072718e+01\n6628  -5.89520613 -7.800096e+00\n6629  11.60479387 -8.628901e+00\n6630   1.60479387 -8.566401e+00\n6631   6.10479387 -5.508430e+00\n6632 -18.39520613  1.104365e+01\n6633  -9.69520613 -4.466763e+00\n6634 -12.89520613 -7.454535e+00\n6635 -10.89520613  8.545918e+00\n6636 -13.39520613  4.596684e+00\n6637   4.60479387 -6.987596e+00\n6638  20.60479387 -1.403968e+01\n6639   0.30479387 -1.623013e+00\n6640  -7.89520613  1.012699e+01\n6641 -13.39520613  7.283237e+00\n6642  -8.89520613  6.268291e+00\n6643  -9.39520613  1.269870e-01\n6644  -1.89520613 -1.021676e+01\n6645 -13.39520613  3.658237e+00\n6646  -9.39520613  1.086657e+01\n6647 -13.39520613  4.512404e+00\n6648  17.10479387 -9.501183e+00\n6649  15.10479387 -3.889770e+00\n6650  19.60479387 -2.615314e+00\n6651 -11.49520613  6.668654e+00\n6652   9.60479387  1.564487e+00\n6653  -6.39520613 -2.896796e-01\n6654 -18.39520613  1.308532e+01\n6655 -14.89520613  3.689034e+00\n6656 -14.39520613  1.430362e+01\n6657 -21.89520613  1.297074e+01\n6658  11.10479387 -7.279263e+00\n6659 -19.89520613  1.024157e+01\n6660 -11.39520613  4.845737e+00\n6661   0.10479387 -3.185513e+00\n6662   3.60479387  3.252893e+00\n6663   2.90479387  2.941752e+00\n6664  22.60479387  1.345670e+01\n6665 -13.39520613  4.876987e+00\n6666  -9.89520613 -8.754716e-01\n6667 -18.89520613  1.285615e+01\n6668  -9.89520613  3.004963e+00\n6669  13.60479387  6.307370e+00\n6670   6.10479387  1.667163e+01\n6671   3.10479387  5.951262e+00\n6672 -22.39520613  2.134425e+01\n6673 -16.39520613  1.454663e+01\n6674  -7.39520613  1.115973e+01\n6675  12.60479387  2.159723e+01\n6676  33.10479387  2.655931e+01\n6677 -12.89520613  9.048371e+00\n6678 -17.89520613  1.741555e+01\n6679 -16.39520613  1.625263e+01\n6680  -1.39520613  7.920007e+00\n6681  13.30479387  7.463297e+00\n6682   6.10479387  1.776389e+01\n6683  42.60479387  1.525289e+01\n6684  35.10479387  1.874358e+01\n6685 -11.39520613  8.042748e+00\n6686 -14.39520613  1.167758e+01\n6687 -19.69520613  1.041218e+01\n6688 -22.89520613  1.851687e+01\n6689 -19.89520613  1.800496e+01\n6690   6.10479387  1.297468e+01\n6691  -5.39520613  5.881904e+00\n6692   3.60479387  7.849517e+00\n6693  -5.09520613  7.996164e+00\n6694  -9.39520613  1.158830e+01\n6695  -2.39520613  7.326392e+00\n6696  -8.39520613  1.237106e+00\n6697  -9.89520613 -2.423608e+00\n6698  -8.39520613  3.039452e+00\n6699  10.90479387  6.923338e+00\n6700  27.60479387  1.545734e+01\n6701  31.60479387  1.512342e+01\n6702  -8.39520613  1.477282e+01\n6703   8.10479387  2.417758e+01\n6704  28.60479387  1.249008e+01\n6705  -0.64520613  1.168638e+01\n6706 -16.89520613  7.177582e+00\n6707 -16.89520613  4.966273e+00\n6708   2.10479387 -1.265870e+00\n6709 -19.89520613  9.424606e+00\n6710 -23.89520613  2.579394e-01\n6711 -13.14520613  4.711544e+00\n6712   3.10479387  1.336793e+01\n6713  14.10479387  2.257044e+01\n6714   9.60479387  1.625046e+00\n6715  -9.39520613  1.813889e+01\n6716   8.10479387  1.330556e+01\n6717  -5.89520613  1.468949e+01\n6718 -15.39520613  1.297818e+01\n6719 -20.89520613  7.607318e+00\n6720 -14.89520613  6.027867e+00\n6721   5.60479387  2.564487e+00\n6722   3.60479387  3.253022e+00\n6723 -17.49520613  1.749011e+00\n6724 -16.39520613  3.695439e+00\n6725 -14.39520613  1.281449e+01\n6726 -19.89520613  3.455274e+00\n6727  -6.39520613  1.778447e+01\n6728   1.60479387  1.535989e+01\n6729   5.10479387  9.668654e+00\n6730   1.60479387  1.666345e+01\n6731 -10.39520613  2.474417e+01\n6732  -0.89520613  1.619990e+01\n6733   5.60479387  1.985898e+01\n6734   3.10479387  1.402599e+01\n6735  -4.29520613  5.761158e+00\n6736   4.10479387  1.326886e+01\n6737  -6.89520613  1.427542e+01\n6738 -15.89520613  7.496779e+00\n6739  -2.89520613  1.810928e+01\n6740  -3.89520613  1.578610e+01\n6741 -16.49520613 -7.058934e-01\n6742 -14.39520613  6.574430e+00\n6743 -24.39520613  1.564261e+00\n6744 -25.39520613 -3.990546e-01\n6745 -14.89520613  7.153029e+00\n6746   8.60479387  1.524768e+01\n6747   7.10479387  2.062970e+01\n6748 -14.89520613  1.238790e+01\n6749  28.60479387  2.489080e+01\n6750  40.10479387  3.153097e+01\n6751  14.10479387  2.696330e+01\n6752   8.60479387  3.578473e+01\n6753  45.10479387  3.580034e+01\n6754  23.60479387  3.085593e+01\n6755  13.10479387  2.359257e+01\n6756   4.10479387  2.568224e+01\n6757 -17.89520613  1.060095e+01\n6758 -20.89520613  1.135615e+01\n6759  -7.09520613  1.896553e+01\n6760  -1.39520613  1.716865e+01\n6761 -11.39520613  1.085061e+01\n6762 -17.89520613  1.443129e+01\n6763 -12.39520613  1.665983e+01\n6764 -15.89520613  1.781970e+01\n6765   3.60479387  2.275720e+01\n6766  -5.89520613  3.847074e+01\n6767   4.10479387  3.820964e+01\n6768   1.10479387  3.940575e+01\n6769  -8.89520613  1.989782e+01\n6770  -2.39520613  1.509030e+01\n6771  -5.49520613  7.961113e+00\n6772  -4.89520613  1.865303e+01\n6773   8.60479387  2.520772e+01\n6774   3.60479387  1.701229e+01\n6775   1.10479387  1.747750e+01\n6776   3.60479387  6.684917e+00\n6777 -10.09520613  1.593813e+01\n6778 -19.39520613  1.688220e+01\n6779  -7.89520613  8.960320e+00\n6780  10.10479387  2.816865e+01\n6781  -1.39520613  1.140541e+01\n6782 -10.89520613  9.829793e+00\n6783 -18.49520613  1.947752e+00\n6784  -4.89520613  3.650425e+00\n6785  -1.39520613  7.041050e+00\n6786 -11.89520613  1.299938e+01\n6787  -4.39520613  2.141345e+01\n6788  22.60479387  2.251354e+01\n6789  26.10479387  2.123580e+01\n6790  30.10479387  1.988559e+01\n6791  11.60479387  1.786193e+01\n6792  -6.39520613  8.600945e+00\n6793 -13.39520613  1.396032e+01\n6794   6.10479387  2.555928e+01\n6795  21.50479387  2.017737e+01\n6796  31.60479387  2.385083e+01\n6797  -0.39520613  2.343979e+01\n6798  -9.89520613  2.107965e+00\n6799  -6.89520613  1.135513e+01\n6800 -19.89520613  7.973341e+00\n6801 -18.89520613  3.309279e+00\n6802   0.60479387  7.952055e+00\n6803   2.60479387  1.468632e+01\n6804   7.10479387  1.998432e+01\n6805   7.10479387  7.017612e+00\n6806  -5.89520613  1.637855e+01\n6807 -15.29520613  7.837925e+00\n6808 -21.89520613  4.944695e+00\n6809 -25.89520613  3.306222e+00\n6810 -24.89520613  7.732399e+00\n6811  -5.39520613  8.579093e+00\n6812  12.60479387  1.612550e+01\n6813  15.50479387  1.802093e+01\n6814  -3.89520613  1.222074e+01\n6815 -14.89520613  1.556970e+01\n6816  -7.39520613  1.398455e+01\n6817 -11.89520613  1.289306e+01\n6818 -15.39520613 -1.927814e+00\n6819  -0.89520613  1.886838e+00\n6820   3.60479387  3.177485e+00\n6821 -16.39520613  2.012404e+00\n6822  -9.89520613  6.126987e+00\n6823  -8.89520613  1.979886e+01\n6824  16.10479387  2.208215e+01\n6825  19.90479387  1.999270e+01\n6826 -10.89520613  2.165640e+01\n6827   5.10479387  1.714601e+01\n6828  21.10479387  2.814261e+01\n6829  31.10479387  3.230407e+01\n6830  44.60479387  2.510683e+01\n6831  25.10479387  1.990650e+01\n6832 -15.89520613  4.433411e+00\n6833 -21.89520613  3.759800e+00\n6834 -21.89520613  4.538445e+00\n6835 -12.39520613  6.738620e-01\n6836 -11.89520613  5.767612e+00\n6837  -4.29520613  6.131969e+00\n6838  -1.39520613  7.524399e-01\n6839  15.10479387  9.611071e+00\n6840   8.60479387  1.476718e+01\n6841 -24.39520613  6.085050e+00\n6842  -8.39520613 -5.209323e+00\n6843  -7.89520613 -5.908727e+00\n6844 -19.39520613 -6.907692e+00\n6845  -1.39520613 -6.075217e+00\n6846  -5.39520613 -1.022211e+00\n6847 -19.39520613 -7.111885e+00\n6848  -0.39520613 -3.871590e+00\n6849  -4.69520613  6.516868e+00\n6850  -5.89520613  1.001687e+01\n6851   9.10479387  5.804264e+00\n6852  12.60479387  8.089591e+00\n6853  13.10479387  1.108985e+01\n6854 -17.39520613 -6.114731e+00\n6855 -23.14520613 -4.289680e+00\n6856 -27.39520613  6.564487e+00\n6857 -26.39520613  8.338297e+00\n6858 -21.39520613 -8.878939e-01\n6859 -20.39520613 -7.477180e+00\n6860  -9.39520613 -1.639178e+01\n6861  14.30479387 -1.044121e+01\n6862   4.60479387 -4.289680e+00\n6863 -13.39520613  4.317463e+00\n6864 -21.39520613 -2.489084e+00\n6865  -4.39520613 -4.766776e+00\n6866   2.10479387 -6.619390e+00\n6867 -17.49520613  3.874246e+00\n6868 -16.89520613 -6.855130e-01\n6869 -21.39520613  2.809718e+00\n6870 -15.89520613 -1.116468e+01\n6871 -23.89520613 -7.792656e+00\n6872 -26.89520613 -7.700394e+00\n6873 -25.64520613 -4.808184e+00\n6874 -19.89520613 -9.337299e+00\n6875 -14.89520613 -9.399799e+00\n6876  -8.39520613 -9.228732e+00\n6877   3.10479387 -7.944442e+00\n6878  -8.89520613  6.725201e+00\n6879   5.30479387 -8.009718e+00\n6880  -6.89520613 -1.249946e+01\n6881  -5.39520613 -7.543846e+00\n6882   0.60479387  5.441661e+00\n6883  13.60479387 -5.292630e-01\n6884  -1.89520613 -7.963291e+00\n6885 -23.49520613 -4.310513e+00\n6886  -2.89520613 -1.206477e+01\n6887   2.60479387 -1.533497e+01\n6888  -8.89520613 -1.539680e+00\n6889  -9.89520613 -9.873013e+00\n6890   7.60479387 -1.123760e+01\n6891  -6.39520613  1.116570e+00\n6892 -16.39520613  5.491570e+00\n6893 -16.89520613 -8.966763e+00\n6894 -23.39520613 -1.098443e+01\n6895  -6.39520613 -2.466763e+00\n6896 -13.39520613 -6.612596e+00\n6897 -11.49520613 -1.490774e+01\n6898  -8.39520613 -8.046624e+00\n6899 -16.89520613 -9.616069e+00\n6900 -12.89520613 -7.727180e+00\n6901 -14.89520613 -6.448194e+00\n6902 -20.39520613 -1.262331e+01\n6903 -21.39520613  7.258931e+00\n6904 -17.89520613 -7.893846e+00\n6905 -12.89520613 -1.275496e+01\n6906 -17.89520613 -7.768846e+00\n6907 -15.39520613 -4.199100e+00\n6908 -19.89520613 -7.844480e+00\n6909 -16.09520613 -1.024530e+01\n6910 -15.39520613 -1.240426e+01\n6911 -14.39520613 -1.027926e+01\n6912 -13.89520613 -9.102180e+00\n6913 -18.39520613 -6.258430e+00\n6914  -3.89520613 -1.298760e+01\n6915  -0.89520613 -1.473397e+01\n6916   5.10479387 -1.551930e+01\n6917  -2.89520613 -1.344025e+01\n6918 -11.89520613 -1.347718e+01\n6919  -3.89520613 -1.030010e+01\n6920 -19.89520613 -8.102180e+00\n6921  -5.14520613 -1.440426e+01\n6922 -12.89520613 -1.280689e+01\n6923 -17.89520613 -1.563343e+01\n6924 -17.39520613 -1.453968e+01\n6925 -11.89520613 -8.268846e+00\n6926 -13.89520613 -1.084176e+01\n6927 -16.39520613 -5.883430e+00\n6928 -12.89520613 -1.137664e+01\n6929  -1.89520613 -1.558633e+01\n6930  25.60479387 -1.577156e+01\n6931   8.60479387 -1.405010e+01\n6932   0.60479387 -1.252926e+01\n6933  -8.69520613 -1.766468e+01\n6934 -25.89520613 -5.081346e+00\n6935 -25.39520613 -5.393846e+00\n6936  -6.89520613 -1.496676e+01\n6937  -6.39520613 -1.617510e+01\n6938 -10.39520613 -1.264068e+01\n6939 -14.69520613 -1.640109e+01\n6940 -10.39520613 -1.690426e+01\n\n\nNote that there are only two columns in the transmuted data frame.\nHere’s a table of helper functions specifically associated with mutate():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nif_else()\nA vectorized conditional operation (if-else).\nmutate(data, status = if_else(age < 18, \"minor\", \"adult\"))\n\n\ncase_when()\nGeneralized multiple conditions for transformations.\nmutate(data, category = case_when(score > 90 ~ \"A\", score > 80 ~ \"B\", TRUE ~ \"C\"))\n\n\nlead()\nAccess the subsequent value in the column.\nmutate(data, next_value = lead(column_name))\n\n\nlag()\nAccess the preceding value in the column.\nmutate(data, previous_value = lag(column_name))\n\n\nrow_number()\nGenerate row numbers, often used with arrange().\nmutate(data, rank = row_number())\n\n\nrank(), min_rank(), dense_rank()\nDifferent types of ranking functions.\nmutate(data, rank = rank(score))\n\n\ncumsum(), cumprod(), cummin(), cummax()\nCumulative functions.\nmutate(data, cumulative_total = cumsum(total))\n\n\ncoalesce()\nReturn the first non-missing value among its arguments.\nmutate(data, combined = coalesce(col1, col2))\n\n\nna_if()\nReplace a specified value with NA.\nmutate(data, updated_col = na_if(column_name, \"replace_me\"))\n\n\nreplace_na()\nReplace NA values with a specified value.\nmutate(data, updated_col = replace_na(column_name, \"new_value\"))\n\n\nrecode()\nRecode or replace values in a column.\nmutate(data, recoded_col = recode(column_name, old=\"new\", ...))\n\n\nacross()\nApply a function across multiple columns (from dplyr 1.0.0).\nmutate(data, across(c(col1, col2), function_name))"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#group_by",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#group_by",
    "title": "NB: The dplyr package",
    "section": "group_by()",
    "text": "group_by()\nThe group_by() function is used to generate summary or aggregate statistics from a data frame.\nFor example, in this air pollution dataset, you might want to know the average annual level of PM2.5.\nSo the stratum is the year, which we can derive from the date variable.\nIn conjunction with the group_by() function we often use the summarize() function. > Or summarise() for some parts of the world.\nThe general operation here is a combination of splitting a tabel into separate pieces defined by a variable or group of variables (group_by()), and then applying a summary function across those subsets (summarize()), then combining back into another table.\n\nThis pattern is called split, apply, and combine. It is a fundamental pattern in data processing.\n\nFirst, we can create a year variable using as.POSIXlt().\n\nchicago <- chicago %>%\n  mutate(year = as.POSIXlt(date)$year + 1900)\nhead(chicago)\n\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2 pm25detrend\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810          NA\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099          NA\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548          NA\n4 chic 29.0   28.625 1987-01-04   NA   47.00000 4.375000  30.43452          NA\n5 chic 32.0   28.875 1987-01-05   NA         NA 4.750000  30.33333          NA\n6 chic 40.0   35.125 1987-01-06   NA   48.00000 5.833333  25.77233          NA\n  year\n1 1987\n2 1987\n3 1987\n4 1987\n5 1987\n6 1987\n\n\nNow we can create a that computes summary statistics for each year in the data frame with the summarize() function.\n\nyears <- chicago %>%\n  group_by(year) %>%\n  summarize(pm25 = mean(pm25, na.rm = TRUE), \n          o3 = max(o3tmean2, na.rm = TRUE), \n          no2 = median(no2tmean2, na.rm = TRUE), .groups = \"drop\")\nhead(years)\n\n# A tibble: 6 × 4\n   year  pm25    o3   no2\n  <dbl> <dbl> <dbl> <dbl>\n1  1987   NaN  63.0  23.5\n2  1988   NaN  61.7  24.5\n3  1989   NaN  59.7  26.1\n4  1990   NaN  52.2  22.6\n5  1991   NaN  63.1  21.4\n6  1992   NaN  50.8  24.8\n\n\nNote in the process, we implicitly created separate data frame that splits the original data frame by year, which is then passed to summarize().\nsummarize() then returns a data frame with columns for year and the annual averages of pm25, o3, and no2.\nIn a slightly more complicated example, we might want to know what are the average levels of ozone (o3) and nitrogen dioxide (no2) within quintiles of pm25.\nA slicker way to do this would be through a regression model, but we can actually do this quickly with group_by() and summarize().\nFirst, we can create a categorical variable of pm25 divided into quantiles.\n\nqq <- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)\nqq\n\n    0%    20%    40%    60%    80%   100% \n 1.700  8.700 12.375 16.700 22.610 61.500 \n\n\nThen can group the data frame by the pm25.quint variable. and compute the mean of o3 and no2 within quantiles of pm25.\n\nchicago %>%\n  mutate(pm25.quint = cut(pm25, qq)) %>%\n  group_by(pm25.quint) %>%\n  summarize(o3 = mean(o3tmean2, na.rm = TRUE), \n          no2 = mean(no2tmean2, na.rm = TRUE),\n          .groups = \"drop\")\n\n# A tibble: 6 × 3\n  pm25.quint     o3   no2\n  <fct>       <dbl> <dbl>\n1 (1.7,8.7]    21.7  18.0\n2 (8.7,12.4]   20.4  22.1\n3 (12.4,16.7]  20.7  24.4\n4 (16.7,22.6]  19.9  27.3\n5 (22.6,61.5]  20.3  29.6\n6 <NA>         18.8  25.8\n\n\nFrom the table, it seems there isn’t a strong relationship between pm25 and o3, but there appears to be a positive correlation between pm25 and no2.\nMore sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of dplyr functions can often get you most of the way there.\nHere is another example:\n\nchicago %>%  \n  mutate(month = as.POSIXlt(date)$mon + 1) %>% \n  group_by(month) %>%                              # SPLIT\n  summarize(pm25 = mean(pm25, na.rm = TRUE),       # APPLY \n    o3 = max(o3tmean2, na.rm = TRUE), \n    no2 = median(no2tmean2, na.rm = TRUE),\n    .groups = \"drop\")\n\n# A tibble: 12 × 4\n   month  pm25    o3   no2\n   <dbl> <dbl> <dbl> <dbl>\n 1     1  17.8  28.2  25.4\n 2     2  20.4  37.4  26.8\n 3     3  17.4  39.0  26.8\n 4     4  13.9  47.9  25.0\n 5     5  14.1  52.8  24.2\n 6     6  15.9  66.6  25.0\n 7     7  16.6  59.5  22.4\n 8     8  16.9  54.0  23.0\n 9     9  15.9  57.5  24.5\n10    10  14.2  47.1  24.2\n11    11  15.2  29.5  23.6\n12    12  17.5  27.7  24.5\n\n                                                   # COMBINE (in the result)\n\nHere’s a table of helper functions specifically associated with group_by():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nadd_tally()\nAdds a column with the count of each group (equivalent to adding a count with mutate() after a group_by()).\ngroup_by(data, group_var) %>% add_tally()\n\n\ngroup_size()\nReturns the size of each group.\ngroup_by(data, group_var) %>% summarise(size = group_size())\n\n\nntile()\nCreates rank percentiles within groups.\ngroup_by(data, group_var) %>% mutate(perc = ntile(score, 4))\n\n\ncur_group_id()\nGives an integer identifier for the current group.\ngroup_by(data, group_var) %>% filter(cur_group_id() == 1)\n\n\ncur_group_rows()\nProvides row indices for the current group.\nUsed internally, but can be useful for advanced operations.\n\n\ngroup_map(), group_modify(), group_walk()\nFunctions to iterate over groups, modify them or walk them with side effects.\ngroup_map(data, ~ head(.x, 2)) shows the first two rows of each group.\n\n\n\nIt’s worth noting that group_by() often works in tandem with other verbs, so the real power comes from the combined operations. For instance, after grouping data, one often uses summarise() to calculate summary statistics for each group. The combination of these functions and their associated helpers allow for a wide range of group-wise data manipulation tasks."
  },
  {
    "objectID": "modules/m12/m12-intro.html#topics",
    "href": "modules/m12/m12-intro.html#topics",
    "title": "M12 Visualization",
    "section": "Topics",
    "text": "Topics\n\nR’s basic visualization tools\nGGPlot2\nRMarkown"
  },
  {
    "objectID": "modules/m12/m12-intro.html#readings",
    "href": "modules/m12/m12-intro.html#readings",
    "title": "M12 Visualization",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nW3Schools R Graphics\n\n\nRFDS Explore 3 Data Visualization (ggplot2)\n\n\nRDFS Communicate 27 R Markdown\n\n\nRDFS Communicate 28 Graphics for Communication\n\n\n\n\nOptional\n\n\nggplot2 (Tidyverse)\n\n\nThe Complete ggplot2 Tutorial (r-statitics.co)\n\n\nR Markdown (RStudio)\n\n\nOverview (RStudio)\n\n\nIndex of Pages (RStudio)\n\n\nknitr (Yihui Xie)  \n\n\nR Markdown: the Definitive Guide (Yihui Xie, J. J. Allaire, Garrett Grolemund)\n\n\nR Markdown Cookbook (Yihui Xie, Christophe Dervieux, Emily Riederer)\n\n\nGetting Started with R Markdown — Guide and Cheatsheet (Dataquest)\n\n\nGallery (RStudio)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "title": "NB: GGPlot2",
    "section": "",
    "text": "Examples\nLet look at how to build out graphics using the built-in diamonds data.\nHere’s another way to construct a graphic. By assigning it a variable, we can keep adding to it and showing out work.\nstroke controls the thickness of point boundary\nLet’s map the variables carat, cut and color to various aesthetics in our geometry function:\nFilled time series can be plotted using geom_ribbon(). It takes two compulsory arguments ymin and ymax.\nThe oulier points are controlled by the following aesthetics:\nIf the notch is turned on (by setting it TRUE), the below boxplot is produced. Else, you would get the standard rectangular boxplots."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#introduction",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#introduction",
    "title": "NB: GGPlot2",
    "section": "Introduction",
    "text": "Introduction\nToday we’ll look at GGPlot2, the graphics package associated with the Tidyverse."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "title": "NB: GGPlot2",
    "section": "Learning Goal",
    "text": "Learning Goal\nYou will be introduced into how and why to use visualizations in DS 6001.\n\nVisualizations in EDA\nVisualization in creating data products that communicate results, such as scientific publications, infographics, and interactive visualizations.\n\nThese things come at the end of the data science pipeline.\nToday, I just want to introduce you to the thinking and design logic behind the package, so you can be confident in learning more as you need to."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "title": "NB: GGPlot2",
    "section": "The Grammar of Graphics",
    "text": "The Grammar of Graphics\nAs with Dplyr, GGPlot2 is a an entirely new system that supplants the older graph functions that are built into R.\nAnd just as with Dplyr, it is founded on a principled analysis of its domain and approaches code design through developing a basic grammar which can then be expressed in R.\nIn effect, Dplyr is built on a grammar of data by defining a set of verbs that can be used to build phrases that are put together into larger constructs.\nThese verbs correspond to a process of data transformation.\nGGPlot2 is built on a grammar of graphics that defines a set of nouns that correspond to the architecture of a graphic (aka plot).\nThe phrase “grammar of graphics” actually comes from the book by that name written by statistician and computer scientist Leland Wilkinson in 1999 and later revised:\n\n\n\nThe Second Edition\n\n\nIt’s worth reading if you want to get a solid grounding in visualization, which belongs to the design area of data science."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "title": "NB: GGPlot2",
    "section": "A Layered Model",
    "text": "A Layered Model\nWilkinson takes an object-oriented approach to visualization and formalizes two main principles:\n\nGraphics are built out of distinct layers of grammatical elements.\nIn each layer, meaningful plots are constructed through mappings of data onto aesthetics.\n\nThe essential grammatical elements to create any visualization are:\n\nAccording to Wickham, who adopted these principles and applied them to R,\n\nA grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g., the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics (Wickham 2012).\n\nWickham takes this idea and develops it into this:\n\nSource (see also ScienceCraft).\nYou can see that everything starts with data.\nThen data are mapped on aesthetics within geometries.\n\nGeometries are geometric things like points, lines, and bars.\nAesthetics are visual things like position, size, color and shape.\n\nYou can see how the latter are properties of the former.\nAlso note that aesthetics make use of visual channels to signify\n\nSize can means greater than, which is good for numeric scale but not categories\nColor can signify things like value, e.g. via red : dangerous : : green : safe.\n\nThese are the primary layers. The other layers apply downstream modifications that add more information and style to the graph."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "title": "NB: GGPlot2",
    "section": "The Bare Minimum",
    "text": "The Bare Minimum\nEverything starts with ggplot() which is part of the Tidyverse.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.5     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.1\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nHere is a basic graph – a scatterplot comparing two features in the iris dataset. I’ve broken out the functions and arguments so you can see how the grammar is implemented:\n\niris %>%\nggplot(\n  mapping = aes(\n    x = Sepal.Length, \n    y = Sepal.Width)\n  ) + \n  geom_point(size=3, aes(color=Species))\n\n\n\n\nggplot() starts by creating a coordinate system that you can add layers to.\n\nThe coordinate system can be changed after the graph is initiated.\n\nThese layers are created by geometry functions.\n\nFor example, geom_point creates a point-based visualization.\nThere are many geom_ functions, and they can be layered on top of each other:\n\ngeom_point()\ngeom_bar()\ngeom_histogram()\ngeom_boxplot()\netc.\n\n\nHere we have a plot with two layers. The second layer is created by a stat function, which is similar to geom, but applies a statistical transformation to the data.\n\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe core the process is that each layer maps data onto what are called aesthetics (aes).\nAesthetics are visual objects and properties that can used to represent numeric and categorical values\n\nx and y positions (in a two-dimensional system)\nColor\nSize\nShape\nText\n\nIn addition to these elements, ggplot also provides faceting, which is the visual equivalent of grouping by. Just as with group by, a data feature is used to divide the visualization into groups, each taking the same form but showing a different subset of data.\n\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm) +\n  facet_wrap(facets = vars(Species))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\nBy the way, this is an example of Simpson’s Paradox. The overall trend is downward, but each group trend upward.\n\n\niris %>%\n  ggplot(aes(\n    x = Sepal.Length, \n    y = Sepal.Width)) + \n    geom_point(size=3, aes(color=Species)) + \n    stat_smooth(method = lm) +\n    stat_smooth(method = lm, se=FALSE, aes(color=Species))\n\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nAnyway, the general structure of a ggplot statement is the following:\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(\n     mapping = aes(<MAPPINGS>),\n     stat = <STAT>, \n     position = <POSITION>\n  ) +\n  <COORDINATE_FUNCTION> +\n  <FACET_FUNCTION>"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "title": "NB: GGPlot2",
    "section": "The + operator",
    "text": "The + operator\nYou will notice the use of the + operator to connect ggplot functions together to produce a final product. Theses are not quite the same as pipes %>%.\nThe difference is that pipes feed data from one function to another, whereas the + operation combines elements to produce an increasingly developed visualization.\nAnother thing to keep in mind: the + always goes at the end of a line, not at the beginning."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "title": "NB: GGPlot2",
    "section": "Add Title, X and Y axis labels with labs()",
    "text": "Add Title, X and Y axis labels with labs()\n\ngg1 <- gg + geom_point(aes(color=color))\ngg2 <- gg1 + labs(title=\"Diamonds\", x=\"Carat\", y=\"Price\") \ngg2"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "title": "NB: GGPlot2",
    "section": "Change color of all text with theme()",
    "text": "Change color of all text with theme()\n\ngg2 + theme(text=element_text(color=\"blue\"))  # all text turns blue."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "title": "NB: GGPlot2",
    "section": "Change title, X and Y axis label and text size",
    "text": "Change title, X and Y axis label and text size\n\nplot.title: Controls plot title.\naxis.title.x: Controls X axis title\naxis.title.y: Controls Y axis title\naxis.text.x: Controls X axis text\naxis.text.y: Controls y axis text\n\n\ngg3 <- gg2 + \n  theme(plot.title=element_text(size=25), \n        axis.title.x=element_text(size=20),\n        axis.title.y=element_text(size=20),\n        axis.text.x=element_text(size=15),\n        axis.text.y=element_text(size=15)\n        )\ngg3"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "title": "NB: GGPlot2",
    "section": "Change title face, color, line height",
    "text": "Change title face, color, line height\n\ngg3 + \n  labs(title = \"Plot Title\\nSecond Line of Plot Title\") +\n  theme(plot.title = element_text(\n    face=\"bold\", \n    color=\"steelblue\", \n    lineheight=1.2)\n  )"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "title": "NB: GGPlot2",
    "section": "Change point color",
    "text": "Change point color\n\ngg3 + scale_colour_manual(\n  name='Legend', \n  values=c('D'='grey', \n           'E'='red', \n           'F'='blue', \n           'G'='yellow', \n           'H'='black', \n           'I'='green', \n           'J'='firebrick'))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "title": "NB: GGPlot2",
    "section": "Adjust X and Y axis limits",
    "text": "Adjust X and Y axis limits\nMethod 1: Zoom in\n\ngg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nMethod 2: Deletes the points outside limits\n\ngg3 + \n  xlim(c(0,3)) + \n  ylim(c(0, 5000)) + \n  geom_smooth()  # deletes the points \n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 14714 rows containing missing values (geom_point).\n\n\n\n\n\nMethod 3: Deletes the points outside limits\n\ngg3 + scale_x_continuous(limits=c(0,3)) + \n  scale_y_continuous(limits=c(0, 5000)) +\n  geom_smooth()  # deletes the points outside limits\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 14714 rows containing missing values (geom_point).\n\n\n\n\n\nNotice the change in smoothing line because of deleted points. This could sometimes be misleading in your analysis."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "title": "NB: GGPlot2",
    "section": "Change X and Y axis labels",
    "text": "Change X and Y axis labels\n\ngg3 + scale_x_continuous(\n  labels=c(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\")) \n\n\n\n  scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor\n\n<ScaleContinuousPosition>\n Range:  \n Limits:    0 --    1\n\n\nUse scale_x_discrete instead, if X variable is a factor.\nRotate axis text\n\ngg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "title": "NB: GGPlot2",
    "section": "Flip X and Y Axis",
    "text": "Flip X and Y Axis\n\ngg3 + coord_flip()  # flips X and Y axis."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "title": "NB: GGPlot2",
    "section": "Grid lines and panel background",
    "text": "Grid lines and panel background\n\ngg3 + theme(panel.background = element_rect(fill = 'springgreen'),\n  panel.grid.major = element_line(colour = \"firebrick\", size=3),\n  panel.grid.minor = element_line(colour = \"blue\", size=1))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "title": "NB: GGPlot2",
    "section": "Plot margin and background",
    "text": "Plot margin and background\n\ngg3 + theme(plot.background=element_rect(fill=\"yellowgreen\"), plot.margin = unit(c(2, 4, 1, 3), \"cm\")) # top, right, bottom, left"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "title": "NB: GGPlot2",
    "section": "Hide legend",
    "text": "Hide legend\n\ngg3 + theme(legend.position=\"none\")  # hides the legend"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "title": "NB: GGPlot2",
    "section": "Change legend title",
    "text": "Change legend title\n\ngg3 + scale_color_discrete(name=\"\")  # Remove legend title (method1)\n\n\n\n# Remove legend title (method)\np1 <- gg3 + theme(legend.title=element_blank())  \n\n# Change legend title\np2 <- gg3 + scale_color_discrete(name=\"Diamonds\")  \n\n\n# install.packages(\"gridExtra\")\n\n\nlibrary(gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\ngrid.arrange(p1, p2, ncol=2)  # arrange"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "title": "NB: GGPlot2",
    "section": "Change legend and point color",
    "text": "Change legend and point color\n\ngg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "title": "NB: GGPlot2",
    "section": "Change legend position",
    "text": "Change legend position\nOutside plot\n\np1 <- gg3 + theme(legend.position=\"top\")  # top / bottom / left / right\n\nInside plot\n\np2 <- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)\ngridExtra::grid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "title": "NB: GGPlot2",
    "section": "Change order of legend items",
    "text": "Change order of legend items\n\n#df$newLegendColumn <- factor(df$legendcolumn, levels=c(new_order_of_legend_items), ordered = TRUE) \n\nCreate a new factor variable used in the legend, ordered as you need. Then use this variable instead in the plot."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "title": "NB: GGPlot2",
    "section": "Legend title, text, box, symbol",
    "text": "Legend title, text, box, symbol\n\nlegend.title - Change legend title\nlegend.text - Change legend text\nlegend.key - Change legend box\nguides - Change legend symbols\n\n\ngg3 + theme(legend.title = element_text(size=20, color = \"firebrick\"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))  # legend title color and size, box color, symbol color, size and shape."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "title": "NB: GGPlot2",
    "section": "Add text in chart",
    "text": "Add text in chart\n\n# Not Run: gg + geom_text(aes(xcol, ycol, label=round(labelCol), size=3)) \n# general format \ngg + geom_text(aes(label=color, color=color), size=4)\n\n\n\n\n##Annotation\n\nlibrary(grid) \nmy_grob = grobTree(textGrob(\"My Custom Text\", x=0.8, y=0.2, \n                            gp=gpar(col=\"firebrick\", fontsize=25, fontface=\"bold\"))) \n\ngg3 + annotation_custom(my_grob)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "title": "NB: GGPlot2",
    "section": "Multiple chart panels",
    "text": "Multiple chart panels\n\np1 <- gg1 + facet_grid(color ~ cut) # arrange in a grid. More space for plots. Free X and Y axis scales\n\nBy setting scales=‘free’, the scales of both X and Y axis is freed. Use scales=‘free_x’ to free only X-axis and scales=‘free_y’ to free only Y-axis.\n\np2 <- gg1 + facet_wrap(color ~ cut, scales=\"free\") # free the x and yaxis scales."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "title": "NB: GGPlot2",
    "section": "Arrange multiple plots",
    "text": "Arrange multiple plots\n\nlibrary(gridExtra) \ngrid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "title": "NB: GGPlot2",
    "section": "Add smoothing line",
    "text": "Add smoothing line\n\ngg3 + geom_smooth(aes(color=color)) # method could be - 'lm', 'loess', 'gam'\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "title": "NB: GGPlot2",
    "section": "Add horizontal / vertical line",
    "text": "Add horizontal / vertical line\n\np1 <- gg3 + geom_hline(yintercept=5000, size=2, linetype=\"dotted\", color=\"blue\") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash \np2 <- gg3 + geom_vline(xintercept=4, size=2, color=\"firebrick\") \np3 <- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend=\"round\")) \n\nWarning: Ignoring unknown aesthetics: lineend\n\np4 <- gg3 + geom_segment(aes(x=carat, y=price,\nxend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5)) # x, y: start points. xend, yend: endpoints \ngridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "title": "NB: GGPlot2",
    "section": "Add bar chart",
    "text": "Add bar chart\n\n# Frequency bar chart: Specify only X axis. \ngg <- ggplot(mtcars, aes(x=cyl)) \ngg + geom_bar() # frequency table\n\n\n\n\n\ngg <- ggplot(mtcars, aes(x=cyl)) \np1 <- gg + geom_bar(position=\"dodge\", aes(fill=factor(vs))) # side-by-side \np2 <- gg + geom_bar(aes(fill=factor(vs))) # stacked \ngridExtra::grid.arrange(p1, p2, ncol=2)\n\n\n\n\n\n# Absolute bar chart: Specify both X adn Y axis. Set stat=\"identity\"\ndf <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'\nnames(df) <- c(\"cyl\", \"mpg\")\nhead(df)\n\n  cyl      mpg\n1   4 26.66364\n2   6 19.74286\n3   8 15.10000\n\n#>   cyl    mpg\n#> 1   4  26.66\n#> 2   6  19.74\n#> 3   8  15.10\n\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\")  # Y axis is explicit. 'stat=identity'\nprint(gg_bar)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "title": "NB: GGPlot2",
    "section": "Distinct color for bars",
    "text": "Distinct color for bars\n\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl))\nprint(gg_bar)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "title": "NB: GGPlot2",
    "section": "Change color and width of bars",
    "text": "Change color and width of bars\n\ndf$cyl <- as.factor(df$cyl)\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl), width = 0.25)\ngg_bar + scale_fill_manual(values=c(\"4\"=\"steelblue\", \"6\"=\"firebrick\", \"8\"=\"darkgreen\"))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "title": "NB: GGPlot2",
    "section": "Change color palette",
    "text": "Change color palette\n\nlibrary(RColorBrewer)\n\nWarning: package 'RColorBrewer' was built under R version 4.0.5\n\ndisplay.brewer.all(n=20, exact.n=FALSE)  # display available color palettes\n\n\n\nggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat=\"identity\") + scale_fill_brewer(palette=\"Reds\")  # \"Reds\" is palette name"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "title": "NB: GGPlot2",
    "section": "Line chart from timeseries",
    "text": "Line chart from timeseries\n\n# One step method.\n# install.packages(\"ggfortify\")\nlibrary(ggfortify)\n\nWarning: package 'ggfortify' was built under R version 4.0.5\n\nautoplot(AirPassengers, size=2) + labs(title=\"AirPassengers\")"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "title": "NB: GGPlot2",
    "section": "Area",
    "text": "Area\ngeom_area is similar to geom_ribbon, except that the ymin is set to 0. If you want to make overlapping area plot, use the alpha aesthetic to make the top layer translucent.\n\n# Method1: Non-Overlapping Area\ndf <- reshape2::melt(economics[, c(\"date\", \"psavert\", \"uempmed\")], id=\"date\")\nhead(df, 3)\n\n        date variable value\n1 1967-07-01  psavert  12.6\n2 1967-08-01  psavert  12.6\n3 1967-09-01  psavert  11.9\n\n#>         date variable value\n#> 1 1967-07-01  psavert  12.5\n#> 2 1967-08-01  psavert  12.5\n#> 3 1967-09-01  psavert  11.7\np1 <- ggplot(df, aes(x=date)) + geom_area(aes(y=value, fill=variable)) + labs(title=\"Non-Overlapping - psavert and uempmed\")\n\n# Method2: Overlapping Area\np2 <- ggplot(economics, aes(x=date)) + geom_area(aes(y=psavert), fill=\"yellowgreen\", color=\"yellowgreen\") + geom_area(aes(y=uempmed), fill=\"dodgerblue\", alpha=0.7, linetype=\"dotted\") + labs(title=\"Overlapping - psavert and uempmed\")\ngridExtra::grid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "title": "NB: R Markdown",
    "section": "Introduction",
    "text": "Introduction\nR provides a notebook style coding environment similar to Jupyter.\n\nIt follows the literate programming paradigm of inter-leaving text and code.\nIt uses a version of Markdown to create the text components.\nIt allows executable code blocks.\nThey can be used interactively or as exported documents into standard formats.\n\nHow, the R approach differs in some important ways:\n\nRMarkdown is not visually rendered while your are editing.\n\nThe document has to be ‘knitted’ to see this.\nNewer versions of RStudio have a visual mode that does render Markdown, and also allows you to edit in this mode.\nThis differs from Jupyter’s cell-by-cell approach.\n\nRMarkdown allows several programming languages to be run in the same notebook. - RMarkdown files are meant to be published documents, not workspaces for coding.\nRMarkdown is written in markdown and uses YAMLto store configuration information.\n\nJupyter notebooks are written in JavaScript, which contains both configuration data and content data in the same structure.\nThis difference is what accounts for the different editing experiences. JavaScript is the native programming language of web browsers; the notebook format is executable code that can be integrated into a web application."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "title": "NB: R Markdown",
    "section": "Varieties of R Markdown outputs",
    "text": "Varieties of R Markdown outputs\nR Markdown is designed to be output to several formats:\n\nR Notebooks\n\nDesigned to previewed\nOr output to (html|pdf|doc)_notebook\nHave Preview in RStudio toolbar (but also Knit in menu)\n\nDocuments\n\nOutput to (html|pdf|doc)_document\nHas Knit in RStudio toolbar\n\nPresentations\n\nProduce slideshows from your source file, in ioslides, beamer, or powerpoint.\n\nShiny\n\nCreate interactive apps that can be published on the web."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "title": "NB: R Markdown",
    "section": "Knitting",
    "text": "Knitting\nKnitting is the process of compiling all the code and visual assets of an RMarkdown into a single file."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "title": "NB: R Markdown",
    "section": "Publishing",
    "text": "Publishing\nRMarkdown has publication in mind as an outcome. RStudio allows you to publish in these destinations:\n\nRPubs\nR Studio Connect"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "title": "NB: R Markdown",
    "section": "Outputting",
    "text": "Outputting\nThere are two ways to set the output of a document:\n\nPermanently, by modifying the YAML header:\ntitle: \"Viridis Demo\"\noutput: html_document\nTransiently, by calling rmarkdown::render() by hand:\n\nrmarkdown::render(\"diamond-sizes.Rmd\", output_format = \"word_document\")\n\nThis is useful if you want to programmatically produce multiple types of output.\n\nRStudio’s knit button renders a file to the first format listed in its output field.\nYou can also do it by code:\nknitr::include_graphics(\"screenshots/rmarkdown-knit.png\")\nEach output format is associated with an R function.\nYou can either write foo or pkg::foo.\nIf you omit pkg, the default is assumed to be rmarkdown.\nIt’s important to know the name of the function that makes the output because that’s where you get help.\nFor example, to figure out what parameters you can set with html_document, look at ?rmarkdown::html_document.\n\nOutput options\nTo override the default parameter values, you need to use an expanded output field. For example, if you wanted to render an html_document with a floating table of contents, you’d use:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\nYou can even render to multiple outputs by supplying a list of formats:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n  pdf_document: default\nNote the special syntax if you don’t want to override any of the default options."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "title": "NB: R Markdown",
    "section": "How It Works",
    "text": "How It Works"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "title": "NB: R Markdown",
    "section": "The RMarkdown Spec",
    "text": "The RMarkdown Spec\nSee The RMarkown Reference Guide and RStudio’s Guide."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "title": "NB: Loose Ends",
    "section": "qplot",
    "text": "qplot\nqplot creates quick and simple plots that use all of the ggplot2 defaults.\nIt let’s you define a plot in a single call that gives a set of aesthetics and a data set.\nIt infers a geom from your data and mappings if you don’t supply onw. Recall this is how plot worked.\n\nplot(select(iris, -Species))\n\n\n\n\n\n# qplot(select(iris, -Species))\n\n\nqplot(displ, hwy, data = mpg)\n\n\n\n\n\nqplot(displ, hwy, color=class, data = mpg)\n\n\n\n\n\nqplot(displ, data = mpg)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nqplot(displ, data = mpg, geom = c('bar'))\n\n\n\n\n\nGotchas\nOddly, data is not the first argument, so it won’t work with %>%.\nThis will fail:\n\n# mpg %>% qplot(displ, hwy)\n\nAlso, data has to be called by key, e.g. data = mpg.\nThis will fail, too:\n\n# qplot(displ, hwy, mpg)\n\nHere’s a nice guide in PDF form: Getting started with qplot"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "title": "NB: Loose Ends",
    "section": "GGPlot in Python",
    "text": "GGPlot in Python\nThere are pygg plotnine and\nHard to replicate R syntax in Python.\nBut why should it? Should just implement to pattern Pythonically.\nSee example in M14-00a-Plotnine.ipynb."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "title": "NB: Loose Ends",
    "section": "Plotly in R",
    "text": "Plotly in R\n\ninstall.packages(\"plotly\")\n\n\n  There is a binary version available but the source version is later:\n       binary source needs_compilation\nplotly 4.10.0 4.10.2             FALSE\n\n\n\ninstalling the source package ‘plotly’\n\n\n\n\n\nlibrary(plotly)\n\n\nAttaching package: ‘plotly’\n\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\n\n\n\n\nTypes of plots\n'bar', 'barpolar', 'box', 'candlestick', 'carpet', 'choropleth', 'choroplethmapbox', 'cone', 'contour', 'contourcarpet', 'densitymapbox', 'funnel', 'funnelarea', 'heatmap', 'heatmapgl', 'histogram', 'histogram2d', 'histogram2dcontour', 'icicle', 'image', 'indicator', 'isosurface', 'mesh3d', 'ohlc', 'parcats', 'parcoords', 'pie', 'pointcloud', 'sankey', 'scatter', 'scatter3d', 'scattercarpet', 'scattergeo', 'scattergl', 'scattermapbox', 'scatterpolar', 'scatterpolargl', 'scatterternary', 'splom', 'streamtube', 'sunburst', 'surface', 'table', 'treemap', 'violin', 'volume', 'waterfall'\n\nhead(mpg)\n\n\n\nA tibble: 6 × 11\n\n    manufacturermodeldisplyearcyltransdrvctyhwyflclass\n    <chr><chr><dbl><int><int><chr><chr><int><int><chr><chr>\n\n\n    audia41.819994auto(l5)  f1829pcompact\n    audia41.819994manual(m5)f2129pcompact\n    audia42.020084manual(m6)f2031pcompact\n    audia42.020084auto(av)  f2130pcompact\n    audia42.819996auto(l5)  f1626pcompact\n    audia42.819996manual(m5)f1826pcompact\n\n\n\n\n\nfig1 <- mpg %>%\n    plot_ly(\n        x         = ~hwy, \n        y         = ~cty, \n        size      = ~displ, \n        type      = 'scatter', \n        color     = ~class,\n        mode      = \"markers\",\n        hovertext = ~manufacturer,\n        height    = 500, width = 750)\n\n\nfig1\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\nfig2 <- iris %>%\n    plot_ly(\n        x         = ~Petal.Length, \n        y         = ~Petal.Width, \n        size      = ~Sepal.Length, \n        color     = ~Sepal.Width,\n        symbol    = ~Species,\n        type      = \"scatter\", \n        mode      = \"markers\",\n        height    = 500, width = 750)\n\n\nfig2\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\n# ?plot_ly\n\n\nGGPlotly\nBest of both worlds?\n\nWith ggplotly() by Plotly, you can convert your ggplot2 figures into interactive ones powered by plotly.js, ready for embedding into Dash applications.\n\nIf you call ggplotly() with no argument, it will display your last ggplot as a plotly plot.\nPretty cool.\nYou also pass it a plot that was assigned to a variable.\nIn both cases, you can then add ploty features to your graph.\n\ndf = data.frame(\n    x = 1:10,\n    y = 1:100:10\n)\n\n\ndf %>% ggplot() + \n    aes(x, y) +\n    geom_line()\n\n\n\n\n\nggplotly()\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\nggplotly(height=400, width=400)\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\np = df %>% ggplot() + \n    aes(x, y) +\n    geom_line()\n\n\nggplotly(p)\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n>>> Learn more."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "title": "NB: Loose Ends",
    "section": "Using :: in R",
    "text": "Using :: in R\nWhen you load libraries in R that have the same function names, R resolves this by picking a default, and then letting you access the others using :: operator to specify the library from which the method comes.\nThe rule is that the package loaded last will hide, or mask, the function from earlier packages.\nIf you want to have a certain function be the default, make sure you load it last.\nFor example, when we load tidyverse, we get this message:\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nThis means that dplyr overrides the filter() and lag() methods associated with the stats library.\nSimilarly, when you load plotly, you’ll see this:\nAttaching package: ‘plotly’\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\nOne thing I have noticed is that even though the last library masks the other functions, the help operator ?<objectname> does not follow this.\nAlso, in this script, note that dplyr::filter is the default, even though plotly::filter loaded after dplyr. This is because Plotly’ filter function is not used in the normal way; it appears in the context of the transforms argument to plot_ly(). No need to get into this now, but just know that that’s why it does not mask dplyr.\nExamples\nHere, we call filter by itself and it uses the one from dplyr.\n\nhead(filter(mpg, hwy > 0))\n\nBut if we ask for help, we’ll get the original stats version.\n\n# ?filter\n\nAnd if we ask for help about Plotly’s version, we see this:\n\n# ?plotly"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#ggplot-in-python",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#ggplot-in-python",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "GGPlot in Python",
    "text": "GGPlot in Python\nThere are two ports of GGPlot2 to Python: pygg and plotnine.\nThe first seems to have stopped development and is much less used.\nLet’s look at Plotnine.\n\n## ! conda install -c conda-forge plotnine -y\n\n\nimport pandas as pd\nimport numpy as np\nfrom pandas.api.types import CategoricalDtype\n\n\nfrom plotnine import *\nfrom plotnine.data import mpg\n\nOur old friend, mpg in Python:\n\nmpg\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      auto(s6)\n      f\n      19\n      28\n      p\n      midsize\n    \n    \n      230\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      21\n      29\n      p\n      midsize\n    \n    \n      231\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      midsize\n    \n    \n      232\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      manual(m5)\n      f\n      18\n      26\n      p\n      midsize\n    \n    \n      233\n      volkswagen\n      passat\n      3.6\n      2008\n      6\n      auto(s6)\n      f\n      17\n      26\n      p\n      midsize\n    \n  \n\n234 rows × 11 columns"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "A Simple Bar Chart",
    "text": "A Simple Bar Chart\n\n(ggplot(mpg)            # defining what data to use\n    + aes(x='class')    # defining what variable to use\n    + geom_bar(size=20) # defining the type of plot to use\n)\n\n\n\n\n<Figure Size: (640 x 480)>\n\n\nNotice that aes() is not a helper function (a function in the argument space).\nAlso, R dots become _ in the argument names.\nNote that we don’t have to use the syntax above, which groups the functions in a single expression with (...).\nWe can do this:\n\nggplot(mpg) + aes(x='class') + geom_bar(size=20)\n\n\n\n\n<Figure Size: (640 x 480)>\n\n\nOr this:\n\nggplot(mpg) + \\\n    aes(x='class') + \\\n    geom_bar(size=20)\n\n\n\n\n<Figure Size: (640 x 480)>\n\n\nNote that none of these are like R due to differing white space rules."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "Faceting",
    "text": "Faceting\n\nggplot(mpg) + \\\n    aes(x = 'drv', y = 'cty', color = 'class', size='cyl') + \\\n    geom_point()\n\n\n\n\n<Figure Size: (640 x 480)>\n\n\n\n(ggplot(mpg)         \n + aes(x='drv', y='cty', color='class', size='cyl')\n + geom_point()\n + facet_wrap('class')\n + theme(legend_position = \"none\")\n)\n\n\n\n\n<Figure Size: (640 x 480)>"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "The Pandas Way",
    "text": "The Pandas Way\nNote the GGPlot included the computation of counts in the geom_bar() function.\n\nggplot(mpg) + aes(x='class') + geom_bar(size=20)\n\n\n\n\n<Figure Size: (640 x 480)>\n\n\n\n%matplotlib inline\n\n\n# mpg['class'].plot.bar()\n\n\nmpg['class'].value_counts().sort_index().plot.bar(rot=45);\n\n\n\n\nHowever, sometomes Pandas does do internal calculations, as with .hist():\n\nmpg['cty'].hist();\n\n\n\n\nFor faceting in Pandas, see this: https://stackoverflow.com/questions/29786227/how-do-i-plot-facet-plots-in-pandas\nNotice that it is essentially the result of a .groupby() followed by .unstack().\nSo, Pandas expects you to do the data transformations upfront.\nGGPlot2 will handle these in the geometries and facets\nGGPlot2 is easier, but Pandas separates comcerns\nAs a rule, data operations should never take place in the visualization."
  },
  {
    "objectID": "modules/m13/m13-intro.html#topics",
    "href": "modules/m13/m13-intro.html#topics",
    "title": "M13 Agile",
    "section": "Topics",
    "text": "Topics\n\nGeneral concept of project management (PM)\nRationale for PM\nMain types of PM\nDeeper dive into Agile PM\nBasic artifacts, tools, and processes for PM"
  },
  {
    "objectID": "modules/m13/m13-intro.html#readings",
    "href": "modules/m13/m13-intro.html#readings",
    "title": "M13 Agile",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nManifesto for Agile Software Development (agilemanifesto.org)\nTwelve Principles of Agile Software (agilemanifesto.org)\nUser Stories: An Overview (Digité)\nProject Charters (Princeton)\nDataset Curation Template (Princeton)"
  },
  {
    "objectID": "topics/project-management.html",
    "href": "topics/project-management.html",
    "title": "Project Management",
    "section": "",
    "text": "Some basic facts\nProject management is an established field that is used for many activities.\n\nIt is a profession in which you can be certified as a  CPM.\nIt is a field with an established and large body of knowledge – PMBOK.\n\n\nBroadly speaking, it refers to:\n\nA class of rational methods and protocols for organizing the labor of complex activities in order to achieve specific outcomes on time and on budget.\n\nThink NASA’s space program in the 1960s.\nIts history dates to the early 20th century but becomes highly developed in the 1950s and 60s.\n\nIt is closely associated with US military operations, e.g. Gantt Charts and PERT.\nIt was later adapted to software development, due to the complexity and importances of of this kind of work.\n\n\nSource\n\nSoftware is also mission critical\n\n\n\nFrom the beginning, it has been used to support critical operations: weapons systems, air traffic control, financial systems, health care, etc.\n\n\nOnly recently are we seeing the effects of software design – in the form of data products – fail on the basis of bias and other flaws that lead to social harm\n\n\n\nIn the 1960s, the US Department of Defenses study of software problems found that:\n\n\n\n47% of software delivered could not be used, as it usually didn’t meet requirements\n\n\n29% of funded software was never delivered, as it was usually canceled due to cost/schedule overruns\n\n\n19% of software was useful after extensive rework, and it usually cost 36 times more to fix problems after release\n\n\n\nBecause of this, software engineering was developed.\n\n\nBut Software development is hard for many reasons:\n\n\n\nHardware and software are inherently complex.\n\n\nCode is imperfect and error-prone.\n\n\nCode is always an interpretation of specifications that are always underspecified. → DEBUGGING THE SPEC\n\n\n\nUnderspecified in two senses:\n\n\n\nThe inherent inadequacy of language to represent reality.\n\n\n“The map is not the terrain”\n\n\n\n\nThe fact that people don’t know what they want even when they say they do.\n\n\nThat is, reality itself changes.\n\n\n\n\n\nThe slipperiness of writing code that achieves our goals is the subject of humor:\n\nSource\n\n\nMany paradigms of the software development life cycle (SDLC) have been introduced over the years to address these issues:\n\n\n\nWaterfall\n\n\nSpiral\n\n\nEtc. → See Tutorialspoint on SDLC.\n\n\n\nThe Waterfall Model\n\n\n\n\nWaterfall Methodology\n\n\nSource\n\nWhat they all have in is a faith in the power of planning and engineering to achieve results:\n\n\n\nPlanning as the ability to predict accurately how things will unfold\n\n\nand have people understand and follow rules.\n\n\n\n\nEngineering as the operationalization of labor processes\n\n\nThe ability to treat human behavior as a tractable variable.\n\n\nthe logic of the machine applied to the the organization of labor.\n\n\n\n\n\nThese assumptions are reflected in the relationship between client and developer\n\n\n\nNotice that absence of the client in the design, building, and validation\n\n\n\nThis is partly the result of mitigating the mission creep introduced by the client.\n\n\nThe Iron Triangle\n\nThe Iron Triangle concept shows the effect of changing user requirements on a project.\nIf users want to add something to a project — a new feature, for example — this means that scope has increased.\nTherefore, either tine or resources must expand as well to allow for the change.\n\n\nThe Spiral Method\n\n\nThe Spiral Method recognizes the need to be more iterative, and introduces the client at points in an ongoing cycle. \n\n\n\nPresumably, clients are involved in objective identification and testing …\n\n\n\n\nSource\n\n\nThe methods have the virtue of being rational and comprehensive, defining all the things involved in software development\n\n\n\nBut they are very linear\n\n\n\nEven the Spiral method, which is really a 2D linear process, where phases are features and iterations are observations:\n\n\n\n\n\n\n\n\nPrimary sequence\nS = OI → AE → PD → NPP\n\n\nProcess\nP = S1 → S2 → S3 → … → SN"
  },
  {
    "objectID": "topics/agile-dev.html#backstory",
    "href": "topics/agile-dev.html#backstory",
    "title": "Agile Development",
    "section": "Backstory",
    "text": "Backstory\nAgile development is essentially a philosophy developed in response to bureaucratic software development processes.\nIt is an approach that focuses on the realities of software:\n\nIndividuals and interactions over processes and tools\nWorking software over comprehensive documentation\nCustomer collaboration over contract negotiation\nResponding to change over following a plan\n\nEssentially, it is based on a mistrust of machines, plans, contracts, documents, etc.\nThe Agile Manifesto was written in 2001 after a number of lighter and more flexible approaches were developed in the 1990s.\n\nSCRUM\nXP (Extreme Program) \nEtc.\n\nIt is also a collection of methods and tools:\n\nUser stories\nScrum meetings\nSprints\nTask weighting with cards\nEtc.\n\nAgile is also counter-cultural, like many of the software movements that attended the rise of the web."
  },
  {
    "objectID": "topics/agile-dev.html#principles",
    "href": "topics/agile-dev.html#principles",
    "title": "Agile Development",
    "section": "Principles",
    "text": "Principles\nHere are the 12 Principles of Agile SD:\n\nCustomer satisfaction by early and continuous delivery of valuable software. → The “early and often” of open source development.\nWelcome changing requirements, even in late development.\nDeliver working software frequently (weeks rather than months).\nClose, daily cooperation between business people and developers.\nProjects are built around motivated individuals, who should be trusted.\nFace-to-face conversation is the best form of communication (co-location).\nWorking software is the primary measure of progress.\nSustainable development, able to maintain a constant pace.\nContinuous attention to technical excellence and good design.\nSimplicity—the art of maximizing the amount of work not done—is essential.\nBest architectures, requirements, and designs emerge from self-organizing teams.\nRegularly, the team reflects on how to become more effective, and adjusts accordingly.\n\nAs you can see, it’s all about giving teams the freedom and trust to creatively respond to client needs and change."
  },
  {
    "objectID": "topics/agile-dev.html#aside",
    "href": "topics/agile-dev.html#aside",
    "title": "Agile Development",
    "section": "Aside",
    "text": "Aside\nAs an aside, it’s worth noting the effect of the Web on these developments.\n\nAgile was spurred by the affordances of the Web and open source software\nAnd for teams to organize organically, without the oversight of governmental bodies or corporations\nInfluenced by the success of Open Source tools like Linux\nConsistent with Git as a tool for organically organizing software development."
  },
  {
    "objectID": "topics/user-stories.html",
    "href": "topics/user-stories.html",
    "title": "User Stories",
    "section": "",
    "text": "User Stories are at the heart of Agile development.\nInstead of eliciting requirements through a formal process, teams ask clients to provide statements in verbal form:\n\nAs a [type of user]\nI want [an action or behavior]\nso that [a benefit/value]\n\nThese are written on index cards.\nThese are accompanied by conversation to clarify the meaning of the sentences.\nThese are then converted into requirements:\n\nFunctional – relating specifically to how the software will work, i.e. function.\nNon-functional (so-called) – relating to the broader purpose and context of usage.\nThese map roughly onto the second and third parts of the user story.\nThey also map on MACHINE and HUMAN.\nThis page shows some examples of stories mapping onto features (so-called acceptance criteria).\n\nThese requirements are then prioritized\n\nUsing MSCW – Must / Should / Can / Won’t\nWithin the context of a scope definition in a charter (not discussed here)\nSee this link for some guidance.\n\nAfter this, requirements are serialized into a rough schedule, grouped into milestones.\nIn executing the “plan,” teams meet regularly in brief, stand-up meetings called scrums.\n\nThese happen daily.\nThese involve the development team.\nStakeholder representatives, such as the product manager, may attend too.\n\nAt regular intervals, clients are introduced to the process\n\nPrototypes, MVPs, etc. are presented.\nFeedback is elicited early and often.\n\nThe process is driven by a communication plan:\n\nFrequency of meeting.\nMode of communication – F2F, Slack, Git.\nTask management tools – Jira, Trello, Smartsheet, etc.\n\nOther artifacts are involved in this process:\n\nThe project charter.\nThe project plan.\nA Kan Ban board."
  },
  {
    "objectID": "topics/oreilly-accounts.html",
    "href": "topics/oreilly-accounts.html",
    "title": "Setting Up O’Reilly",
    "section": "",
    "text": "O’Reilly for Higher Education contains books on all aspects of computers, programming and the Web from such publishers as O’Reilly, Sams, New Riders, Adobe. Students can access content for free.\nFollow these instructions to set up your account:\nGo to https://www.oreilly.com/library/view/temporary-access/.\nYou should see this dialog box:\n\nClick on Institution not listed? This will produce the following dialog box:\n\nIf you are first time user, enter your UVA email address and clicl on the big red button.\nThis should produce the following message:\n\nNow you can access all the books in the collection. When you return, click on Already a user? in the second dialog box."
  },
  {
    "objectID": "topics/refreshing-the-course-repo.html",
    "href": "topics/refreshing-the-course-repo.html",
    "title": "Refreshing the Course Repo",
    "section": "",
    "text": "Each day you will want to update the forked version of the course repo you created for your homework in Module 01.\nHere are the steps to do that:\nFirst, if you have made any changes to the course notebooks and want to keep your changes, make copies of these files in your private repo.\nSecond, enter the command git stash within your local repo to hide the changes you’ve made to the current branch. To learn more about how to use stash, check out the docs on GitHub. For now, we are just using it clean up the repo so when you pull, you don’t run into a conflict between local and remote changes.\nThird, go to the forked version of the course repo on GitHub and issue a Sync Fork command to refresh the content of your repo with the new course content. The screenshot below shows where this command is located on your repo’s web page:\n\nFourth, go back to your local repo and run git pull. You should now have the most recent content from the course repo."
  }
]